{"version":3,"sources":["webpack://gatsby-test/./node_modules/hyphenate-style-name/index.js","webpack://gatsby-test/./src/pages/AbbyUIButtons/Evaluate_Canvas.js"],"names":["uppercasePattern","msPattern","cache","toHyphenLower","match","toLowerCase","name","hasOwnProperty","hName","replace","test","drawConfusionMatrix","divElement","confusionMatrixValues","tfvis","values","tickLabels","height","width","Canvas1","props","canvasParentRef","React","console","log","confusionMatrix","current","style","padding","ref"],"mappings":"uHACA,IAAIA,EAAmB,SACnBC,EAAY,OACZC,EAAQ,GAEZ,SAASC,EAAcC,GACrB,MAAO,IAAMA,EAAMC,cAYrB,UATA,SAA4BC,GAC1B,GAAIJ,EAAMK,eAAeD,GACvB,OAAOJ,EAAMI,GAGf,IAAIE,EAAQF,EAAKG,QAAQT,EAAkBG,GAC3C,OAAOD,EAAMI,GAAQL,EAAUS,KAAKF,GAAS,IAAMA,EAAQA,I,yICZvDG,EAAmB,mCAAG,WAAOC,EAAYC,GAAnB,iFACpBC,yBACJF,EACA,CACEG,OAAQF,EACRG,WAAY,CAAC,WAAY,aAE3B,CACEC,OAAQ,IACRC,MAAO,MATe,2CAAH,wDAcV,SAASC,EAAQC,GAC9B,IAAMC,EAAkBC,SAAa,MAarC,OARAA,aAAgB,WAIdC,QAAQC,IAAIJ,EAAMK,iBAClBd,EAAoBU,EAAgBK,QAASN,EAAMK,mBAClD,CAACJ,EAAiBD,EAAMK,kBAGzB,uBAAKE,MAAS,CAACC,QAAQ,KAErB,uBAAKC,IAAKR","file":"component---src-pages-abby-ui-buttons-evaluate-canvas-js-253d38beff0da4019e0e.js","sourcesContent":["/* eslint-disable no-var, prefer-template */\nvar uppercasePattern = /[A-Z]/g;\nvar msPattern = /^ms-/;\nvar cache = {};\n\nfunction toHyphenLower(match) {\n  return '-' + match.toLowerCase();\n}\n\nfunction hyphenateStyleName(name) {\n  if (cache.hasOwnProperty(name)) {\n    return cache[name];\n  }\n\n  var hName = name.replace(uppercasePattern, toHyphenLower);\n  return cache[name] = msPattern.test(hName) ? '-' + hName : hName;\n}\n\nexport default hyphenateStyleName;","\r\nimport React from \"react\";\r\nimport * as tfvis from \"@tensorflow/tfjs-vis\";\r\nconst drawConfusionMatrix = async (divElement, confusionMatrixValues) => {\r\n  await tfvis.render.confusionMatrix(\r\n    divElement,\r\n    {\r\n      values: confusionMatrixValues,\r\n      tickLabels: [\"Positive\", \"Negative\"]\r\n    },\r\n    {\r\n      height: 200,\r\n      width: 300\r\n    }\r\n  );\r\n};\r\n\r\nexport default function Canvas1(props) {\r\n  const canvasParentRef = React.useRef(null);\r\n  // const [confusionMatrix, setConfusionMatrix] = React.useState(props.confusionMatrix);\r\n\r\n  // runs when canvasParentRef is initialized\r\n  // and also when confusionMatrix is updated\r\n  React.useEffect(() => {\r\n    // set the confusion matrix with sample data\r\n    //??? need to figure out how to pass the function value\r\n    \r\n    console.log(props.confusionMatrix)\r\n    drawConfusionMatrix(canvasParentRef.current, props.confusionMatrix);\r\n  }, [canvasParentRef, props.confusionMatrix]);\r\n\r\n  return (\r\n    <div style = {{padding:40}}>\r\n\r\n      <div ref={canvasParentRef}></div>\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}