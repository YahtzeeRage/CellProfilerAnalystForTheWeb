{"version":3,"sources":["webpack://gatsby-test/./src/classes/ImageProvider2.js","webpack://gatsby-test/./src/classes/ImageHandler.js","webpack://gatsby-test/./src/classes/UserUploadFileHandler2.js","webpack://gatsby-test/./src/classes/Properties.js","webpack://gatsby-test/./src/classes/UploadHandler2.js","webpack://gatsby-test/./src/classes/Utils.js","webpack://gatsby-test/./src/pages/indexImgProv2.js"],"names":["ImageProvider2","options","box_dim","x","y","image_type","cords","this","canvases","brighten","canvas","ctx","imagedata","getImageData","height","width","data","color_index","ignore_pixels","max_colors","min_colors","colors_to_change","i","length","j","color_current","push","max","pixels_to_change","putImageData","ImageData","getDataURL","img_info","image","main_canvas","document","createElement","h","l","getContext","canID","color","toString","createColorCanvas","globalCompositeOperation","img_channel","drawImage","toDataURL","fillStyle","fillRect","ImageHandler","fileListObect","data_provider","getObjsToURLs","objects","urls","cur_ImageNum","ImageNumber","image_info","getImagefromFile","getCordsforCellDisplay","ip","url","getImgUrl","object","getImagesfromFile","getDataUrl","console","log","images_path","returnAllImgFileNames","Promise","all","map","image_path","file","file_handler","findFile","filename","fileReaderPromiseImage","then","makeImage","images","UserUploadFileHandler","img","Image","src","fileListObject","search_key","fileIndex","Array","from","target","files","findIndex","elem","startsWith","name","endsWith","fileReaderPromiseText","file_result","resolve","reject","fr","FileReader","onload","result","readAsText","findAllFiles","file_names","file_name","readAsDataURL","Properties","all_prop_keys","prop_types","props","init","text","cur_prop_key","isArray","index","indexOf","entries","string","first","concat","setupFileProperties","setup","db_sql_file","dataFileProperties","Object","assign","data_file_props","trainingSetProperties","training_file_props","training_set","classifierProperties","imageProperties","tile_size","image_props","UploadHandler2","getProperties","getFile","getText","prop","getDataProvider","data_info","data_files","setup_file","column_lines","getColumnLines","key","columns","keys","texts","DataProvider","getTrainingSet","TrainingTable","slice","split","search_name","UserUploadFileHandler2","file_object","PapaParser","papaTextfromCSV","column_lines_txt","array","value1","value2","index1","index2","column_info","table_columns","e","trim","hasOwnProperty","error","React","anchorEl","setAnchorEl","dataProvider","trainingObject","setTrainingObject","setFileListObject","constructTileState","tileState","setTileState","imageGridManager","setImageGridManager","setLastFetchState","featuresToUse","fetchButtonEnabled","setFetchButtonEnabled","trainButtonEnabled","setTrainButtonEnabled","evaluateButtonEnabled","downloadButtonEnabled","setDownloadButtonEnabled","uploadButtonEnabled","setUploadButtonEnabled","handleCloseFetchDropDown","fetchType","undefined","handleFetch","disableIterationButtons","enableIterationButtons","time","unclassified","positive","negative","classifierManager","ClassifierManager","initTrainPromise","classedCellPairObjects","fetchUpToNCellPairsByClass","ih","dataURLS","newTileState","ImageGridManager","timeEnd","handleTrain","negativeIDs","item","id","positiveIDs","setClassByIndexArray","negativeCellPairs","getPairsByClass","positiveCellPairs","negativeObjectDataRows","cellPair","getRow","ObjectNumber","positiveObjectDataRows","trainingDataAddition","negativeLabels","fill","positiveLabels","trainingLabelsAddition","UpdatedTrainingObject","classifierType","trainingData","trainingLabels","clearedTileState","handleUpload","uploadHandler2","trainingTable","handleDownload","userDownloadClassifierSpecPromise","dataURLs","dataURL","idx","address","style","resize","Row","Col","logo","marginRight","IconButton","marginLeft","SaveAlt","GridContext","onChange","sourceId","sourceIndex","targetIndex","targetId","move","swap","Grid","container","justify","spacing","marginBottom","Button","disabled","variant","aria-controls","aria-haspopup","onClick","event","currentTarget","Menu","keepMounted","open","Boolean","onClose","MenuItem","component","type","hidden","webkitdirectory","mozdirectory","msdirectory","odirectory","directory","multiple","eventObject","textAlign","backgroundColor","paddingLeft","className","GridDropZone","boxesPerRow","rowHeight","GridItem","backgroundImage","userSelect","paddingRight","margin"],"mappings":"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","file":"component---src-pages-index-img-prov-2-js-2bc8a0ea3b7220d97999.js","sourcesContent":["\r\nexport default class ImageProvider2 {\r\n    constructor(options = {box_dim : {x: 40, y: 40}, image_type : 'object', cords : {}}) { // {images_info : [{image : image channel: color} x 3] cord_x: x, cord_y: y }\r\n        this.box_dim = options.box_dim\r\n        this.image_type = options.image_type\r\n        this.cords = options.cords\r\n        this.canvases = {}\r\n\r\n    }\r\n    brighten(canvas, ctx) {\r\n        var imagedata = ctx.getImageData(0, 0, canvas.height, canvas.width)\r\n        var data = imagedata.data\r\n        var color_index = ['red','green','blue']\r\n        var ignore_pixels = [15, 15, 0]\r\n        var max_colors = [-1, -1, -1]\r\n        var min_colors = [256, 256, 256]\r\n        var colors_to_change =[[], [],[]]\r\n        for (var i = 0; i < color_index.length; i++) \r\n            colors_to_change[color_index[i]] = []\r\n        for (var i = 0; i < data.length; i += 4) {\r\n            for (var j = 0; j < color_index.length; j++) {\r\n                var color_current = data[i + j]\r\n                max_colors[j] = max_colors[j] < color_current ? color_current : max_colors[j]\r\n                min_colors[j] = min_colors[j] > color_current ? color_current : min_colors[j]\r\n                  if (color_current > ignore_pixels[j]) {\r\n                      colors_to_change[j].push(i+j)\r\n                }\r\n        } \r\n        }\r\n        var max = -1;\r\n        for (var i = 0; i < 3; i++) {\r\n            if (max_colors[i] > max)  max = max_colors[i] \r\n        } \r\n        // for (var i = 0; i < data.length; i += 4) {\r\n        //     for (var j = 0; j < color_index.length; j++) {\r\n        //         if (data[i+j] > ignore_pixels[j]) {\r\n        //             data[i+j] = (data[i+j] / max) * 255\r\n        //         }\r\n        // } \r\n        // }\r\n        for (var i = 0; i < color_index.length; i++) {\r\n        var pixels_to_change = colors_to_change[i]    \r\n        for (var j = 0; j < pixels_to_change.length ; j++) {\r\n            data[pixels_to_change[j]] = (data[pixels_to_change[j]] / max) * 255\r\n        }\r\n  }\r\n        ctx.putImageData(new ImageData(data, imagedata.width, imagedata.height), 0, 0)\r\n    }\r\n    getDataURL(img_info) {\r\n        if (this.image_type === 'image') {\r\n            this.box_dim.x = img_info[0].image.width\r\n            this.box_dim.y = img_info[0].image.height\r\n        }\r\n        var main_canvas = document.createElement(`canvas`); \r\n    \r\n        main_canvas.width = this.box_dim.h;\r\n        main_canvas.height = this.box_dim.l;  \r\n        var ctx = main_canvas.getContext('2d');   \r\n\r\n        for (var i = 0; i < img_info.length; i++) {\r\n            var canID = img_info[i].color\r\n            var canvas = document.createElement(`canvas`)\r\n            this.canvases[canID] = canvas\r\n      }\r\n      for(var i = 0; i < img_info.length; i++) {\r\n            var canID = img_info[i].color.toString()\r\n            this.createColorCanvas(img_info[i].image, canID)\r\n       }\r\n       ctx.globalCompositeOperation = 'lighter';\r\n       for (var i = 0; i < img_info.length; i++) {\r\n            var img_channel = img_info[i];\r\n            if (this.image_type === 'whole') {\r\n                ctx.drawImage(this.canvases[img_channel.color], 0, 0) \r\n            }\r\n            ctx.drawImage(this.canvases[img_channel.color], this.cords.x, this.cords.y,\r\n            this.box_dim.x, this.box_dim.y, 0, 0, main_canvas.width, main_canvas.height)\r\n       }\r\n     ctx.globalCompositeOperation = 'source-over';     \r\n    this.brighten(main_canvas, ctx)       \r\n     return main_canvas.toDataURL();\r\n }\r\n \r\n    createColorCanvas (image, color) {\r\n    /* console.log(image) */\r\n    var height = image.height;\r\n    var width =  image.width;  \r\n    // image.crossOrigin = 'Anonymous';  \r\n    this.canvases[color].width = width;\r\n    this.canvases[color].height = height;\r\n    var ctx = this.canvases[color].getContext(\"2d\");\r\n    ctx.globalCompositeOperation='source-over'; \r\n    ctx.drawImage(image,  0, 0 )\r\n    ctx.globalCompositeOperation='multiply';\r\n    ctx.fillStyle = color;\r\n    ctx.fillRect(0, 0, width ,height);  \r\n    ctx.globalCompositeOperation='source-over'; \r\n }\r\n    //from https://stackoverflow.com/questions/10521978/html5-canvas-image-contrast\r\n    // contrastImage(imgData, contrast){  //input range [-100..100]\r\n    //     var d = imgData.data;\r\n    //     contrast = (contrast/100) + 1;  //convert to decimal & shift range: [0..2]\r\n    //     var intercept = 128 * (1 - contrast);\r\n    //     for(var i=0;i<d.length;i+=4){   //r,g,b,a\r\n    //         d[i] = d[i]*contrast + intercept;\r\n    //         d[i+1] = d[i+1]*contrast + intercept;\r\n    //         d[i+2] = d[i+2]*contrast + intercept;\r\n    //     }\r\n    //     return imgData;\r\n    // }yarn \r\n};\r\n\r\nexport {ImageProvider2}\r\n\r\n\r\n\r\n","import {ImageProvider2} from './ImageProvider2';\r\nimport UserUploadFileHandler from './UserUploadFileHandler'\r\nexport default class ImageHandler {\r\n    \r\n    constructor(fileListObect, data_provider) {\r\n        this.file_handler = new UserUploadFileHandler(fileListObect)\r\n        this.data_provider = data_provider\r\n    }\r\n\r\n    getObjsToURLs = async function(objects) { // takes {ImageNumber: .. ObjectNumber: .. }\r\n        var urls = [];\r\n        for (var i = 0; i < objects.length; i++) {\r\n            var cur_ImageNum = objects[i].ImageNumber;\r\n            var image_info = [];\r\n            var key = cur_ImageNum.toString()\r\n            image_info = await this.getImagefromFile(cur_ImageNum)\r\n             var cords = this.data_provider.getCordsforCellDisplay(objects[i])\r\n             var ip = new ImageProvider2({cords: cords})\r\n             var url = await ip.getDataURL(image_info)\r\n             urls.push(url)           \r\n         }\r\n         return urls;\r\n\r\n    }\r\n    getImgUrl = async function(object) { //takes {ImageNumber:...}\r\n        var image_info = this.getImagesfromFile(object);\r\n        var ip = new ImageProvider2({image_type: 'whole'})\r\n        return ip.getDataUrl(image_info)\r\n    }\r\n    // returns array of                \r\n    getImagefromFile = async function(object) {\r\n        console.log(object)\r\n        var images_path = this.data_provider.returnAllImgFileNames(object)\r\n\r\n        var images = await Promise.all(images_path.map(image_path => {\r\n            var file = this.file_handler.findFile(image_path.filename)\r\n            return this.file_handler.fileReaderPromiseImage(file).then( image =>{\r\n                return this.makeImage(image);\r\n            })\r\n         }))\r\n        var image_info = []\r\n        for (var i = 0; i < images.length; i++) {\r\n            delete images_path.filename\r\n            images_path[i].image = images[i]\r\n        }\r\n        return images_path\r\n    }\r\n    makeImage(image) {\r\n        var img = new Image()\r\n        img.src = image\r\n        return img\r\n    }\r\n}\r\nexport {ImageHandler}","export default class UserUploadFileHandler {\r\n\r\n    constructor(fileListObject) {\r\n\r\n        this.fileListObject = fileListObject\r\n    }\r\n    findAllFiles(file_names) {\r\n        return file_names.map(file_name => {\r\n            return this.findFile(file_name)\r\n        })\r\n    }\r\n    findFile = (search_key) => {\r\n        const fileIndex = Array.from(this.fileListObject.target.files).findIndex((elem) => {\r\n            if (search_key.startsWith('.'))\r\n                return (elem.name.endsWith(search_key))\r\n            return (elem.name === search_key);\r\n        });\r\n        if (fileIndex === -1) return -1\r\n        return this.fileListObject.target.files[fileIndex];\r\n    }\r\n    fileReaderPromiseText =  function(file_result) {\r\n        return new Promise((resolve, reject)=> {\r\n            var fr = new FileReader();\r\n            fr.onload = () => {\r\n                resolve(fr.result)\r\n            };\r\n            fr.readAsText(file_result)\r\n        })\r\n    }\r\n    fileReaderPromiseImage(file_result) {\r\n        return new Promise((resolve, reject)=> {\r\n            var fr = new FileReader();\r\n            fr.onload = () => {\r\n                resolve(fr.result)\r\n            };\r\n            fr.readAsDataURL(file_result)\r\n        })\r\n    }\r\n\r\n    \r\n\r\n}","import {obj_obj_array} from './Utils.js'\r\nexport default class Properties {\r\n//Todo: STATIC\r\n    constructor() {\r\n        this.all_prop_keys = [['db_sql_file'],['image_table', 'object_table'], ['training_set'],\r\n                       ['image_id', 'object_id', 'plate_id', 'well_id', 'cell_x_loc',\r\n                       'cell_y_loc'], ['image_channel_paths', 'image_channel_files', 'image_channel_names',\r\n                       'image_channel_colors'] ,['classifier_ignore_columns'], ['object_name', 'plate_type'], ['image_tile_size']]\r\n        this. prop_types = ['setup', 'data_file_props', 'training_file_props', 'column_props', 'image_props', 'classifier_props'\r\n                            ,'meta', 'tile_size' ]\r\n        this.props = {}\r\n    }\r\n    /*  \r\n        default properties (work in progress)\r\n    */  \r\n    // setupDefualt() {\r\n    //     var default_values = [\".SQL\",[\"per_image.csv\", \"per_object.csv\"],[\"ImageNumber\", \"ObjectNumber\", \r\n    //     \"plate\", \"well\", \"Nuclei_Location_CenterX\", \"Nuclei_Location_CenterY\"],\r\n    //      [[\"Image_PathNames_Path_OrigActin\", \"Image_PathNames_Path_OrigDNA\", \"Image_PathNames_Path_OrigpH3\"],\r\n    //      [\"Image_FileNames_Filename_OrigActin\", \"Image_FileNames_Filename_OrigpH3\", \"Image_FileNames_Filename_OrigDNA\"],\r\n    //      [\"Actin\", \"pH3\", \"DNA\"], [\"red\", \"green\", \"blue\"]],[[\"cell\", \"cells\", 'ObjectNumber', 'ImageNumber'], '96'],[[\"Nuclei_Location.*\", \"Meta.*\"],\r\n    //      \".txt\"],\"40\"]\r\n\r\n    //      this.props = obj_obj_array(this.prop_types, this.all_prop_keys, defualt_values);\r\n\r\n    // }\r\n\r\n    /*  @param text \r\n             properties file string parsed from .properties file for initializing program properties\r\n    */  \r\n    init(text) {\r\n        for (var i = 0; i < this.all_prop_keys.length; i++) {\r\n            this.props[this.prop_types[i]] = {}\r\n            for (var j = 0; j < this.all_prop_keys[i].length; j++) {\r\n                var cur_prop_key\r\n                if (Array.isArray(this.all_prop_keys[i])) {\r\n                    cur_prop_key = this.all_prop_keys[i][j]\r\n                    var index = text.indexOf(cur_prop_key)\r\n                }\r\n                else {\r\n                    cur_prop_key = this.all_prop_keys[i]\r\n                    var index = text.indexOf(this.all_prop_keys[i])\r\n                }\r\n                if (index === -1) {\r\n                    this.props[this.prop_types[i]][this.all_prop_keys[i][j]] = -1\r\n                    continue\r\n                } \r\n                index = index + cur_prop_key.length\r\n                while((text[index] === ' ') || (text[index] === '=')) index++ \r\n                var entries = []\r\n                var string = text[index];\r\n                var first = index\r\n                while(text[index] !== '\\n') {\r\n                    if(text[index-1] === (' ') && first !== index ) {\r\n                        entries.push(string)\r\n                        string = text[index] \r\n                        index++\r\n                        continue;\r\n                    }\r\n                    if (text[index] !== (' ') && text[index] !== (',') && first !== index) \r\n                        string = string.concat(text[index])\r\n                    index++                    \r\n                }\r\n                if (entries.length === 0) \r\n                    this.props[this.prop_types[i]][this.all_prop_keys[i][j]] = string\r\n                else {\r\n                    entries.push(string)\r\n                    this.props[this.prop_types[i]][this.all_prop_keys[i][j]] = entries\r\n                }\r\n            }        \r\n        }\r\n\r\n    }\r\n    setupFileProperties() {\r\n        return this.props.setup.db_sql_file\r\n    }\r\n    dataFileProperties() {\r\n        return Object.assign(this.props.data_file_props) \r\n    }\r\n    trainingSetProperties() {\r\n        return this.props.training_file_props.training_set\r\n    }\r\n    //TODO\r\n    classifierProperties() {\r\n\r\n    }\r\n    imageProperties() {\r\n        return {\r\n            tile_size : this.props.tile_size,\r\n            image_props : this.props.image.props\r\n        }\r\n    }\r\n}\r\nexport {Properties}","//import DataUtils from \"./DataUtils\";\r\nimport PapaParser from \"./PapaParser.js\";\r\nimport UserUploadFileHandler2 from \"./UserUploadFileHandler2.js\";\r\nimport {Properties} from \"./Properties.js\"\r\nimport {sliceArrayByValue} from './Utils.js'                                                                                                                                                                                                   \r\nimport DataProvider from \"./DataProvider.js\";\r\nimport TrainingTable from \"./TrainingTable.js\";\r\nexport default class UploadHandler2 {\r\n\r\n    constructor(fileListObject) {\r\n        this.fileListObject = fileListObject\r\n        this.props = null\r\n    }\r\n   /*\r\n        @param {\"file_name\"}\r\n             Name of file to look up\r\n        @return {'name': file_name, file: File}\r\n             Object containing all material to look up file and match it to specification. Used by getText\r\n   */\r\n    getFile(search_name) {\r\n        var file_handler = new UserUploadFileHandler2(this.fileListObject)\r\n        var file = file_handler.findFile(search_name)\r\n        return {'name' : search_name, 'file' : file }\r\n    }\r\n\r\n    /*\r\n        @param {'name' : \"file_name\", 'file': file}\r\n            of type return argument of getFile, used to handle file correctly\r\n        @return {text} \r\n            raw text of file, sometimes 2D array, sometimes 1D depending\r\n   */\r\n    getText(file_object) {\r\n            if (file_object.name.endsWith(\".csv\") || file_object.name.endsWith(\".txt\")) {\r\n                var papa_parser = new PapaParser();\r\n                return papa_parser.papaTextfromCSV(file_object);\r\n            }\r\n            else {\r\n                var file_handler = new UserUploadFileHandler2(this.fileListObject)\r\n                return file_handler.fileReaderPromiseText(file_object.file);\r\n            }\r\n\r\n    }\r\n    /*\r\n        @param {column_lines_txt}\r\n            from getText \r\n        @return {object_table : column array, image_table : column array}\r\n             columns in 1D array mapped to the type of table they correspond to\r\n   */\r\n    getColumnLines(column_lines_txt) { \r\n        var column_info = {\r\n            'object_table' : [\"CREATE TABLE per_object (\" , \r\n                        \"PRIMARY KEY  (ImageNumber,ObjectNumber)\"],\r\n            'image_table' : [\"CREATE TABLE per_image (\", \r\n                            \"PRIMARY KEY  (ImageNumber)\"]\r\n        }\r\n        var table_columns = {}\r\n        var column_lines = column_lines_txt.split('\\n').map(e=>e.trim())\r\n        for (var key in column_info) {\r\n            if (column_info.hasOwnProperty(key)) {\r\n                var columns = sliceArrayByValue(\r\n                    column_lines,\r\n                    column_info[key][0],\r\n                    column_info[key][1]\r\n                )\r\n                table_columns[key] = columns.map((name)=>name.split(' ')[0]).slice(1)\r\n            } \r\n        }\r\n        return table_columns;\r\n    }\r\n    /*\r\n        @return {Properties}\r\n             An object holding all properties from properties folder\r\n   */\r\n    getProperties = async function() {\r\n        var file = this.getFile(\".properties\")\r\n        console.log(file)\r\n        return this.getText(file)\r\n        .then (text => {\r\n           var prop = new Properties()\r\n           prop.init(text)\r\n           this.props = prop\r\n        })\r\n    }\r\n    /*\r\n        @return {DataProvider}\r\n             An object holding all properties and interactions with object and image tables\r\n   */\r\n    getDataProvider = async function() {\r\n        var data_info = {}\r\n        var data_files = null\r\n        console.log(\"test\")\r\n        return this.getProperties()\r\n        .then (() => {\r\n            var setup_file = this.getFile(this.props.setupFileProperties())\r\n            data_files = this.props.dataFileProperties()\r\n            console.log(\"test\")\r\n            return this.getText(setup_file)\r\n        })\r\n        .then(text=> {\r\n            var column_lines = this.getColumnLines(text) \r\n            for (var key in data_files)  {\r\n                data_info[key] = {}\r\n                data_info[key].columns = column_lines[key]\r\n                console.log(\"test\")\r\n                data_info[key].file = this.getFile(data_files[key].concat(\".csv\"))\r\n            } \r\n        })\r\n        .then(() => {\r\n            var i = 0\r\n            return Promise.all(\r\n            Object.keys(data_info).map(key => {\r\n                data_info[key].index = i++\r\n                return this.getText(data_info[key].file)\r\n            })\r\n        )})\r\n        .then(texts=>{\r\n            for (var key in data_info) \r\n                data_info[key].data = texts[data_info[key].index]\r\n             return new DataProvider(data_info, this.props)\r\n        })\r\n   }\r\n    /*\r\n        @return {TrainingTable}\r\n             An object holding initial training set of program\r\n   */\r\n    getTrainingSet = async function() {\r\n        var file_name = this.props.trainingSetProperties()\r\n        if (file_name === -1) return -1\r\n        var file = this.getFile(file_name)\r\n        return this.getText(file)\r\n        .then (text => {\r\n            return new TrainingTable(text.slice(1), \"label ImageNumber ObjectNumber x y\".split(\" \"))\r\n        })\r\n    }\r\n\r\n}\r\nexport {UploadHandler2}\r\n","    /*  @param keysOuter = outer most keys\r\n        @param keysInner = inner most keys\r\n        @param values = values\r\n    */  \r\nfunction obj_obj_array(keysOuter, keysInner, values) {\r\n    var obj = {}\r\n    for (var i = 0; i < keysOuter.length; i++) {\r\n        obj[keysOuter[i]] = {}\r\n        if (!Array.isArray(keysOuter[i])) {\r\n            obj[keysOuter[i]][keysInner[i]] = values[i]\r\n            continue;\r\n        }\r\n        else {\r\n            obj[keysOuter[i]] = keysInner[i].map(function(key, j) {\r\n                return [key, values[j]]\r\n            })\r\n            }\r\n        }\r\n    return obj;\r\n}\r\nexport {obj_obj_array}\r\n\r\nfunction sliceArrayByValue(array, value1, value2) {\r\n    const index1 = array.indexOf(value1);\r\n    const index2 = array.indexOf(value2);\r\n  \r\n    if (value1 === -1 || value2 === -1) {\r\n        console.error(\"Values not found to slice\");\r\n        return null;\r\n    }\r\n  \r\n    return array.slice(index1, index2);\r\n  }\r\nexport {sliceArrayByValue}\r\n","import React from 'react';\r\nimport { Row, Col, Container} from \"reactstrap\";\r\nimport {Box, Button, Grid, IconButton, Menu, MenuItem}from '@material-ui/core'; \r\nimport logo from '../CPA_newlogo.png';\r\nimport {Image, Dropdown, DropdownButton} from 'react-bootstrap';\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\r\nimport {UploadHandler2} from '../classes/UploadHandler2'\r\nimport {ClassifierManager} from '../classes/ClassifierManager'\r\nimport {ImageProvider2} from '../classes/ImageProvider2.js';\r\nimport UserUploadFileHandler from '../classes/UserUploadFileHandler'\r\nimport {Classifier} from '../classes/Classifier'\r\nimport {ImageGridManager}  from '../classes/imGridManager'\r\nimport {ImageHandler}  from '../classes/ImageHandler'\r\n\r\nimport {\r\n    GridContextProvider,\r\n    GridDropZone,\r\n    GridItem,\r\n    swap,\r\n    move\r\n  } from \"react-grid-dnd\";\r\n  \r\n  import \"../dndstyles.css\";\r\n\r\n\r\n\r\nfunction TestUI(){\r\n    \r\n    \r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const [dataProvider, setDataProvider] = React.useState(null)\r\n\r\n    // var classifierManager = null;\r\n    // const [classifierManager, setClassifierManager] = React.useState(null)\r\n    const [trainingObject, setTrainingObject] = React.useState(null)\r\n    const [fileListObject, setFileListObject] = React.useState(null)\r\n    const [tileState, setTileState] = React.useState( constructTileState([]) );\r\n    const [imageGridManager, setImageGridManager] = React.useState(null)\r\n    const [lastFetchState, setLastFetchState] = React.useState(null)\r\n    const [featuresToUse, setFeaturesToUseState] = React.useState(null)\r\n\r\n    const [fetchButtonEnabled, setFetchButtonEnabled] = React.useState(false)\r\n    const [trainButtonEnabled, setTrainButtonEnabled] = React.useState(false)\r\n    const [evaluateButtonEnabled, setEvaluateButtonEnabled] = React.useState(false)\r\n    const [downloadButtonEnabled, setDownloadButtonEnabled] = React.useState(false)\r\n    const [uploadButtonEnabled, setUploadButtonEnabled] = React.useState(true)\r\n    const N = 20\r\n\r\n    const handleClickFetchDropDown = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseFetchDropDown = (fetchType) => {\r\n        setAnchorEl(null);\r\n        if (fetchType !== undefined) {\r\n            handleFetch(fetchType)\r\n        }\r\n    };\r\n\r\n    const disableIterationButtons = () => {\r\n      setFetchButtonEnabled(false)\r\n      setTrainButtonEnabled(false)\r\n      setDownloadButtonEnabled(false)\r\n    }\r\n    const enableIterationButtons = () => {\r\n      setFetchButtonEnabled(true)\r\n      setTrainButtonEnabled(true)\r\n      setDownloadButtonEnabled(true)\r\n    }\r\n\r\n    const handleFetch = async (fetchType) => {\r\n      disableIterationButtons()\r\n      console.time('fetch with stupid dumb way thats deff not faster because Iknow everything since I had four semesters of cs')\r\n      //console.time('Superior fetch that even though it takes up all this extra ram for no real reason is still deff better')\r\n      const emptyTileState = { unclassified: [], positive: [], negative: []}\r\n      setTileState(emptyTileState)\r\n      const classifierManager = new ClassifierManager(dataProvider, trainingObject)\r\n      await classifierManager.initTrainPromise()\r\n      setLastFetchState(fetchType)\r\n      \r\n     var classedCellPairObjects = classifierManager.fetchUpToNCellPairsByClass(fetchType, N)\r\n    // var classedCellPairObjects =  dataProvider.getObjsPerImg(60)\r\n    // classedCellPairObjects.splice(20, 800)\r\n    // console.log(classedCellPairObjects)\r\n      classifierManager.fetchUpToNCellPairsByClass(fetchType, N)\r\n      const ih = new ImageHandler(fileListObject, dataProvider)\r\n      const dataURLS = await ih.getObjsToURLs(classedCellPairObjects)\r\n      const newTileState = constructTileState(dataURLS)\r\n      setTileState(newTileState)\r\n      setImageGridManager(new ImageGridManager(classedCellPairObjects, dataURLS))\r\n      enableIterationButtons()\r\n     // console.timeEnd('Superior fetch that even though it takes up all this extra ram for no real reason is still deff better')\r\n      console.timeEnd('fetch with stupid dumb way thats deff not faster because Iknow everything since I had four semesters of cs')\r\n      return\r\n  }\r\n\r\n  const handleTrain = async () => {\r\n\r\n    disableIterationButtons()\r\n\r\n      const negativeIDs = tileState.negative.map(item => item.id)\r\n      const positiveIDs = tileState.positive.map(item => item.id)\r\n      console.log(negativeIDs, tileState)\r\n      imageGridManager.setClassByIndexArray('negative', negativeIDs)\r\n      imageGridManager.setClassByIndexArray('positive', positiveIDs)\r\n\r\n      const negativeCellPairs = imageGridManager.getPairsByClass('negative')\r\n      const positiveCellPairs = imageGridManager.getPairsByClass('positive')\r\n \r\n      const negativeObjectDataRows = negativeCellPairs.map(cellPair => dataProvider.getRow('object_data', {ImageNumber: cellPair.ImageNumber, ObjectNumber: cellPair.ObjectNumber}))\r\n      const positiveObjectDataRows = positiveCellPairs.map(cellPair => dataProvider.getRow('object_data', {ImageNumber: cellPair.ImageNumber, ObjectNumber: cellPair.ObjectNumber}))\r\n      const trainingDataAddition = [...negativeObjectDataRows, ...positiveObjectDataRows]\r\n\r\n      const negativeLabels = new Array(negativeObjectDataRows.length).fill(0)\r\n      const positiveLabels = new Array(positiveObjectDataRows.length).fill(1)\r\n      const trainingLabelsAddition = negativeLabels.concat(positiveLabels)\r\n\r\n      const UpdatedTrainingObject = {\r\n        classifierType: \"LogisticRegression\",\r\n        trainingData: [...trainingDataAddition, ...trainingObject.trainingData],\r\n        trainingLabels: [...trainingLabelsAddition, ...trainingObject.trainingLabels],\r\n        featuresToUse: featuresToUse\r\n      }\r\n      console.log(UpdatedTrainingObject)\r\n      setTrainingObject(UpdatedTrainingObject)\r\n      // const newClassifierManager = new ClassifierManager(dataProvider, UpdatedTrainingObject)\r\n      \r\n      \r\n      // setClassifierManager(newClassifierManager)\r\n\r\n      const clearedTileState = { unclassified: tileState.unclassified, positive: [], negative: []}\r\n      setTileState(clearedTileState)\r\n      console.log(\"finished train\")\r\n      enableIterationButtons()\r\n  }\r\n\r\n    const handleUpload = async (fileListObject) => {\r\n        setUploadButtonEnabled(false)\r\n        setFileListObject(fileListObject)\r\n        const uploadHandler2 = new UploadHandler2(fileListObject)\r\n        const dataProvider = await uploadHandler2.getDataProvider()\r\n        const trainingTable = await uploadHandler2.getTrainingSet()\r\n        console.log(dataProvider)\r\n        console.log(trainingTable)\r\n    //     setDataProvider(dataProvider)\r\n    //     const trainingTable = uploadReturnObject.training_data.training_table\r\n    //     const trainingDataTable = trainingTable.getDataColumnsPaired()\r\n\r\n    //     const trainingLabels = trainingTable.getTrainingLabels()\r\n    //     const initialTrainingData = trainingDataTable.map(row_object => {\r\n    //         const ObjectNumber = row_object['objectnum']\r\n    //         const ImageNumber = row_object['imagenum']\r\n    //         return dataProvider.getRow('object_data', {ObjectNumber, ImageNumber})\r\n    //     })\r\n    //     const totalFeatures = uploadReturnObject.training_data.features\r\n    //     const tempFeaturesToUse = totalFeatures.filter((elem)=>!elem.includes(\"Location\") && (elem !== \"ObjectNumber\") && (elem !== \"ImageNumber\"))\r\n    //     setFeaturesToUseState(tempFeaturesToUse)\r\n    //     console.log(\"finished data initialization\")\r\n    //     const initialTrainingObject = {\r\n    //         classifierType: \"LogisticRegression\",\r\n    //         trainingData: initialTrainingData,\r\n    //         trainingLabels: trainingLabels,\r\n    //         featuresToUse: tempFeaturesToUse\r\n    //     }\r\n    //     setTrainingObject(initialTrainingObject)\r\n    //     // console.log(\"starting initial training\")\r\n    //     // const newClassifierManager = new ClassifierManager(dataProvider, initialTrainingObject)\r\n        \r\n    //     // setClassifierManager(newClassifierManager)\r\n\r\n    //     setFetchButtonEnabled(true)\r\n    //     setTrainButtonEnabled(true)\r\n    //     setDownloadButtonEnabled(true)\r\n        \r\n        \r\n    //     console.log(\"finished upload\")\r\n    //     console.log(dataProvider.getToolTip(3))\r\n     }\r\n\r\n    const handleDownload = async () => {\r\n      disableIterationButtons()\r\n      const classifierManager = new ClassifierManager(dataProvider, trainingObject)\r\n      await classifierManager.initTrainPromise()\r\n      classifierManager.userDownloadClassifierSpecPromise()\r\n      enableIterationButtons()\r\n    }\r\n\r\n    function constructTileState(dataURLs) {\r\n        return {\r\n            unclassified: dataURLs.map((dataURL, idx) => {return {id: idx, address: dataURL}}),  \r\n            positive: [],\r\n            negative: []\r\n        };\r\n    }\r\n\r\n    function onChange(sourceId, sourceIndex, targetIndex, targetId) {\r\n        if (targetId) {\r\n          const result = move(\r\n            tileState[sourceId],\r\n            tileState[targetId],\r\n            sourceIndex,\r\n            targetIndex\r\n          );\r\n          return setTileState({\r\n            ...tileState,\r\n            [sourceId]: result[0],\r\n            [targetId]: result[1]\r\n          });\r\n        }\r\n    \r\n        const result = swap(tileState[sourceId], sourceIndex, targetIndex);\r\n        return setTileState({\r\n          ...tileState,\r\n          [sourceId]: result\r\n        });\r\n      }\r\n    \r\n    return (\r\n        <div style={{resize: 'horizontal'}}>\r\n    \r\n        <Row>\r\n       \r\n        \r\n        <Col>\r\n        <Image src={logo} style={{marginRight:\"40%\", height:'90px'}}></Image>\r\n        </Col>\r\n\r\n        <Col >\r\n        <IconButton style={{color: \"black\", marginLeft:\"50%\"}}> <SaveAltIcon /></IconButton> \r\n        </Col>\r\n\r\n\r\n        </Row>\r\n        <GridContextProvider onChange={onChange}>\r\n        <Row>\r\n        \r\n        <Grid container justify=\"center\" spacing={2} style={{marginBottom: 15}}>\r\n       \r\n        <Grid key={0} item>\r\n        {/* <DropdownButton variant=\"secondary\" title= \"Fetch\">\r\n        \r\n         <Dropdown.Item >Positive</Dropdown.Item>\r\n         <Dropdown.Item >Negative</Dropdown.Item>\r\n         <Dropdown.Item >Random</Dropdown.Item>\r\n        \r\n        </DropdownButton> */}\r\n            <Button disabled={!fetchButtonEnabled} variant=\"contained\" aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClickFetchDropDown}>\r\n            Fetch\r\n            </Button>\r\n            <Menu\r\n            id=\"simple-menu\"\r\n            anchorEl={anchorEl}\r\n            keepMounted\r\n            open={Boolean(anchorEl)}\r\n            onClose={handleCloseFetchDropDown}\r\n            >\r\n            <MenuItem onClick={()=>handleCloseFetchDropDown(\"random\")}>Random</MenuItem>\r\n            <MenuItem onClick={()=>handleCloseFetchDropDown(\"positive\")}>Positive</MenuItem>\r\n            <MenuItem onClick={()=>handleCloseFetchDropDown(\"negative\")}>Negative</MenuItem>\r\n            </Menu>\r\n    </Grid>\r\n\r\n\r\n        <Grid key={1} item>\r\n        <Button disabled={!trainButtonEnabled} variant=\"contained\" onClick={handleTrain}>Train</Button>\r\n        </Grid>\r\n\r\n        <Grid key={2} item>\r\n        <Button disabled={!evaluateButtonEnabled} variant=\"contained\" onClick={()=>{}}>Evaluate</Button>\r\n        </Grid>\r\n        <Grid key={3} item>\r\n        <Button disabled={!downloadButtonEnabled} variant=\"contained\" onClick={handleDownload}>Download</Button>\r\n        </Grid>\r\n        <Grid key={4} item>\r\n        <Button disabled={!uploadButtonEnabled} variant=\"contained\" component=\"label\" onClick={()=>console.log(\"Upload!\")}> \r\n            Upload\r\n            <input  type=\"file\"\r\n                    hidden webkitdirectory=\"true\"\r\n                    mozdirectory=\"true\"\r\n                    msdirectory=\"true\"\r\n                    odirectory=\"true\"\r\n                    directory=\"true\"\r\n                    multiple\r\n                    onChange = {(eventObject)=>{handleUpload(eventObject)}}   \r\n            />\r\n        </Button>\r\n        </Grid>\r\n    </Grid>\r\n    </Row>\r\n\r\n    \r\n        <div>\r\n        \r\n        <label style = {{textAlign:\"left\", backgroundColor: 'white', paddingLeft: \"10%\", marginBottom: 0.5} }>Unclassified</label>\r\n        \r\n        <div className=\"topContainer\">\r\n       \r\n        <GridDropZone\r\n             className=\"dropzone \"\r\n            id=\"unclassified\"\r\n            boxesPerRow={8}\r\n            rowHeight={70}\r\n          >\r\n             \r\n            {tileState.unclassified.map(item => (\r\n              <GridItem key={item.id}>\r\n                <div className=\"grid-item\" >\r\n                    <div className=\"grid-item-content\" style = {{backgroundImage:  `url(${item.address})`}} >\r\n                        \r\n                        </div> \r\n                </div>\r\n              </GridItem>\r\n            ))}\r\n          </GridDropZone>\r\n          </div>\r\n        \r\n        <Row>\r\n     \r\n          <label style = {{textAlign:\"left\", backgroundColor: 'white', paddingLeft: \"11%\", userSelect: \"none\", marginBottom:\"0.5%\"} }>Positive</label> \r\n    \r\n        \r\n          <label style = {{textAlign:\"left\", backgroundColor: 'white', paddingRight: \"8%\", marginBottom: 0, userSelect: \"none\", margin: \"auto\",  marginBottom:\"0.5%\"} }>Negative</label>\r\n       \r\n          </Row>\r\n         \r\n         <Row>\r\n\r\n          <GridDropZone\r\n            className=\"dropzone positive\"\r\n            id=\"positive\"\r\n            boxesPerRow={4}\r\n            rowHeight={70}\r\n          >\r\n            \r\n            {tileState.positive.map(item => (\r\n              <GridItem key={item.id}>\r\n                <div className=\"grid-item\"> \r\n                    <div className=\"grid-item-content\" style = {{backgroundImage: `url(${item.address})`}}>\r\n                         \r\n                        </div>  \r\n                </div>\r\n              </GridItem>\r\n            ))}\r\n          </GridDropZone>\r\n   \r\n      \r\n          <GridDropZone\r\n            className=\"dropzone negative\"\r\n            id=\"negative\"\r\n            boxesPerRow={4}\r\n            rowHeight={70}\r\n          >\r\n            {tileState.negative.map(item => (\r\n              <GridItem key={item.id}>\r\n                <div className=\"grid-item\">\r\n                <div className=\"grid-item-content\" style = {{backgroundImage: `url(${item.address})`}}>\r\n                        \r\n                        </div>      \r\n                </div>\r\n              </GridItem>\r\n            ))}\r\n          </GridDropZone>\r\n\r\n     \r\n      \r\n        </Row>\r\n        </div>\r\n      </GridContextProvider>\r\n \r\n    </div>\r\n\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default TestUI; "],"sourceRoot":""}