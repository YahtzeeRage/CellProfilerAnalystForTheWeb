{"version":3,"sources":["webpack://gatsby-test/./src/pages/index.js"],"names":["useStyles","makeStyles","theme","root","display","alignItems","wrapper","position","buttonSuccess","backgroundColor","green","fabProgress","color","top","left","zIndex","buttonProgress","marginTop","marginLeft","React","anchorEl","setAnchorEl","unclassified","positive","negative","tileState","setTileState","fetchButtonEnabled","setFetchButtonEnabled","trainButtonEnabled","setTrainButtonEnabled","evaluateButtonEnabled","setEvaluateButtonEnabled","downloadButtonEnabled","setDownloadButtonEnabled","uploadButtonEnabled","setUploadButtonEnabled","uploading","setUploading","success","setSuccess","fetching","setFetching","openFetchDropdown","setOpenFetchDropdown","openTrainDropdown","setOpenTrainDropdown","canvasWebWorker","setCanvasWebWorker","dataWebWorker","setDataWebWorker","classifierWebWorker","setClassifierWebWorker","confusionMatrix","setConfusionMatrix","trainingObject","setTrainingObject","activeCellPairs","setActiveCellPairs","scoreTableIsUpToDate","setScoreTableIsUpToDate","scoreTable","setScoreTable","histogramData","setHistogramData","trainingLossCanvasParentRef","trainingAccuracyCanvasParentRef","selectedFetchImageNumber","setSelectedFetchImageNumber","fetchImageNumberButtonEnabled","setFetchImageNumberButtonEnabled","cellBigPictureDialogOpen","setCellBigPictureDialogOpen","bigPictureSource","setBigPictureSource","bigPictureTitle","setBigPictureTitle","currentlyScoring","setCurrentlyScoring","scoreTableCsvString","setScoreTableCsvString","dataToCanvasWorkerChannel","MessageChannel","dataToClassifierWorkerChannel","constructWebWorker","postMessage","action","port1","port2","sourcePath","name","worker","Worker","addEventListener","event","console","log","message","classes","buttonClassname","clsx","handleCloseFetchDropDown","fetchType","handleFetch","handleOpenCellBigPicture","cellPair","ImageNumber","ObjectNumber","workerActionPromise","getType","getArgs","then","data","blobUrl","undefined","newCellPairs","amount","cellPairs","getResult","constructTileStatePromise","blobUrls","newTileState","classType","filteredCellPairs","slicedCellPairs","slice","slicedSortedCellPairs","sortedCellPairs","trainingData","map","dataRow","handleTrain","positiveCellPairs","element","id","negativeCellPairs","totalCellPairs","concat","newLabels","Array","length","fill","dataRows","newTrainingObject","classifierType","trainingLabels","featureIndicesToUse","trainSequencePromise","currentTrainingObject","UUID","updateCanvasesListener","uuid","tfvis","current","trainLogs","ticks","loss","accuracy","removeEventListener","newConfusionMatrix","uuidv4","Promise","resolve","selfDestructingEventHandler","handleUpload","eventObject","fileListObject","target","files","initialTrainingObject","dataToCsvString","headers","csvContent","join","l","handleScoreAll","newScoreTableObject","scoreTableObject","scoreDataRows","Object","keys","imageToCountsMap","key","imageNumber","total","ratio","ratios","adjustratio","adjustedRatios","adjustedRatiosData","values","x","csvdata","handleDownload","tf","model","save","dataURLs","all","cellDatas","dataURL","idx","cellData","label","address","info","onChange","sourceId","sourceIndex","targetIndex","targetId","result","move","swap","style","overflowX","height","width","src","logo","maxHeight","marginBottom","right","className","title","aria-label","component","marginRight","type","hidden","webkitdirectory","mozdirectory","msdirectory","odirectory","directory","multiple","disabled","size","onClick","container","justify","spacing","item","variant","aria-controls","aria-haspopup","currentTarget","keepMounted","open","Boolean","onClose","noValidate","value","fullWidth","ref","textAlign","paddingLeft","userSelect","boxesPerRow","rowHeight","minHeight","minWidth","maxWidth","padding","onDoubleClick","backgroundImage","justifyContent","paddingRight","margin"],"mappings":"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","file":"component---src-pages-index-js-58a1d6c5f9c204856e0c.js","sourcesContent":["import React from 'react';\r\nimport { Row, Col, Container } from 'reactstrap';\r\nimport { Box, Button, Grid, IconButton, Menu, MenuItem, Card, TextField, Typography } from '@material-ui/core';\r\nimport logo from '../cpa_logo(blue).png';\r\nimport { Image, Dropdown, DropdownButton } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { green } from '@material-ui/core/colors';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Select from '@material-ui/core/Select';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n//import UploadButton from './UploadButton'\r\n\r\nimport Evaluate from './AbbyUIButtons/UIEvaluateButton';\r\nimport ScoreAll from './UIScoreAllButton';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport jones from '../jones.jpg';\r\n\r\nimport { GridContextProvider, GridDropZone, GridItem, swap, move } from 'react-grid-dnd';\r\n\r\nimport '../dndstyles.css';\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport * as tfvis from '@tensorflow/tfjs-vis';\r\nimport UploadButton from './UploadButton';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\troot: {\r\n\t\tdisplay: 'flex',\r\n\t\talignItems: 'center',\r\n\t},\r\n\twrapper: {\r\n\t\t//margin: theme.spacing(1),\r\n\t\tposition: 'relative',\r\n\t},\r\n\tbuttonSuccess: {\r\n\t\tbackgroundColor: green[500],\r\n\t\t'&:hover': {\r\n\t\t\tbackgroundColor: green[700],\r\n\t\t},\r\n\t},\r\n\tfabProgress: {\r\n\t\tcolor: green[500],\r\n\t\tposition: 'absolute',\r\n\t\ttop: -6,\r\n\t\tleft: -6,\r\n\t\tzIndex: 1,\r\n\t},\r\n\tbuttonProgress: {\r\n\t\tcolor: green[500],\r\n\t\tposition: 'absolute',\r\n\t\ttop: '50%',\r\n\t\tleft: '50%',\r\n\t\tmarginTop: -12,\r\n\t\tmarginLeft: -12,\r\n\t},\r\n}));\r\n\r\nfunction TestUIMVP() {\r\n\tconst [anchorEl, setAnchorEl] = React.useState(null);\r\n\tconst [dataProvider, setDataProvider] = React.useState(null);\r\n\r\n\t// var classifierManager = null;\r\n\t// const [classifierManager, setClassifierManager] = React.useState(null)\r\n\tconst [fileListObject, setFileListObject] = React.useState(null);\r\n\tconst [tileState, setTileState] = React.useState({ unclassified: [], positive: [], negative: [] });\r\n\r\n\tconst [fetchButtonEnabled, setFetchButtonEnabled] = React.useState(false);\r\n\tconst [trainButtonEnabled, setTrainButtonEnabled] = React.useState(false);\r\n\tconst [evaluateButtonEnabled, setEvaluateButtonEnabled] = React.useState(false);\r\n\tconst [downloadButtonEnabled, setDownloadButtonEnabled] = React.useState(false);\r\n\tconst [uploadButtonEnabled, setUploadButtonEnabled] = React.useState(true);\r\n\tconst [scoreAllButtonEnabled, setscoreAllButtonEnabled] = React.useState(false);\r\n\tconst [uploading, setUploading] = React.useState(false);\r\n\tconst [success, setSuccess] = React.useState(false);\r\n\tconst [fetching, setFetching] = React.useState(false);\r\n\tconst [openFetchDropdown, setOpenFetchDropdown] = React.useState(false);\r\n\tconst [openTrainDropdown, setOpenTrainDropdown] = React.useState(false);\r\n\r\n\tconst [canvasWebWorker, setCanvasWebWorker] = React.useState(null);\r\n\tconst [dataWebWorker, setDataWebWorker] = React.useState(null);\r\n\tconst [classifierWebWorker, setClassifierWebWorker] = React.useState(null);\r\n\tconst [confusionMatrix, setConfusionMatrix] = React.useState([\r\n\t\t[0, 0],\r\n\t\t[0, 0],\r\n\t]);\r\n\tconst [trainingObject, setTrainingObject] = React.useState(null);\r\n\tconst [activeCellPairs, setActiveCellPairs] = React.useState([]);\r\n\tconst [trainingCellPairs, setTrainingCellPairs] = React.useState([]);\r\n\r\n\tconst [scoreTableIsUpToDate, setScoreTableIsUpToDate] = React.useState(false);\r\n\tconst [scoreTableObject, setScoreTableObject] = React.useState(null);\r\n\tconst [scoreTable, setScoreTable] = React.useState([]);\r\n\tconst [histogramData, setHistogramData] = React.useState([]);\r\n\r\n\tconst trainingLossCanvasParentRef = React.useRef();\r\n\tconst trainingAccuracyCanvasParentRef = React.useRef();\r\n\r\n\tconst [selectedFetchImageNumber, setSelectedFetchImageNumber] = React.useState(0);\r\n\tconst [fetchImageNumberButtonEnabled, setFetchImageNumberButtonEnabled] = React.useState(false);\r\n\tconst DEBUG = true;\r\n\r\n\tconst [cellBigPictureDialogOpen, setCellBigPictureDialogOpen] = React.useState(false);\r\n\tconst [bigPictureSource, setBigPictureSource] = React.useState(null);\r\n\tconst [bigPictureTitle, setBigPictureTitle] = React.useState('');\r\n\tconst [currentlyScoring, setCurrentlyScoring] = React.useState(false);\r\n\r\n\t// const [downloadScoreTableFunction, setDownloadScoreTableFunction] = React.useState(() => {});\r\n\tconst [scoreTableCsvString, setScoreTableCsvString] = React.useState('');\r\n\tvar __ = null;\r\n\r\n\tReact.useEffect(() => {\r\n\t\tconst dataToCanvasWorkerChannel = new MessageChannel();\r\n\t\tconst dataToClassifierWorkerChannel = new MessageChannel();\r\n\r\n\t\tconst dataWebWorker = constructWebWorker('../dataWorker.js', 'dataWebWorker');\r\n\t\tdataWebWorker.postMessage({ action: 'connectToCanvasWorker' }, [dataToCanvasWorkerChannel.port1]);\r\n\t\tdataWebWorker.postMessage({ action: 'connectToClassifierWorker' }, [dataToClassifierWorkerChannel.port1]);\r\n\t\tsetDataWebWorker(dataWebWorker);\r\n\r\n\t\tconst canvasWebWorker = constructWebWorker('../canvasWorker.js', 'CanvasWebWorker');\r\n\t\tcanvasWebWorker.postMessage({ action: 'connectToDataWorker' }, [dataToCanvasWorkerChannel.port2]);\r\n\t\tsetCanvasWebWorker(canvasWebWorker);\r\n\r\n\t\tconst classifierWebWorker = constructWebWorker('../classifierWorker.js', 'classifierWebWorker');\r\n\t\tclassifierWebWorker.postMessage({ action: 'connectToDataWorker' }, [dataToClassifierWorkerChannel.port2]);\r\n\t\tsetClassifierWebWorker(classifierWebWorker);\r\n\t}, []);\r\n\r\n\tconst constructWebWorker = function (sourcePath, name) {\r\n\t\tconst worker = new Worker(sourcePath);\r\n\t\tworker.addEventListener('error', (event) => {\r\n\t\t\tconsole.log(`[${name}] Error`, event.message, event);\r\n\t\t});\r\n\t\treturn worker;\r\n\t};\r\n\r\n\tconst classes = useStyles();\r\n\tconst buttonClassname = clsx({\r\n\t\t[classes.buttonSuccess]: success,\r\n\t});\r\n\r\n\tconst N = 20;\r\n\r\n\tconst handleClickFetchDropDown = (event) => {\r\n\t\tsetAnchorEl(event.currentTarget);\r\n\t};\r\n\r\n\tconst handleCloseFetchDropDown = (fetchType) => {\r\n\t\tsetAnchorEl(null);\r\n\t\tif (fetchType !== undefined && fetchType !== null) {\r\n\t\t\thandleFetch(fetchType);\r\n\t\t}\r\n\t};\r\n\r\n\tconst disableIterationButtons = () => {\r\n\t\tsetFetchButtonEnabled(false);\r\n\t\tsetTrainButtonEnabled(false);\r\n\t\tsetDownloadButtonEnabled(false);\r\n\t\t//   setEvaluateButtonEnabled(false)\r\n\t};\r\n\tconst enableIterationButtons = () => {\r\n\t\tsetFetchButtonEnabled(true);\r\n\t\tsetTrainButtonEnabled(true);\r\n\t\tsetDownloadButtonEnabled(true);\r\n\t\tsetEvaluateButtonEnabled(true);\r\n\t};\r\n\r\n\tconst handleOpenCellBigPicture = async function (cellPair) {\r\n\t\tconsole.log('open big picture');\r\n\t\tconsole.log(cellPair);\r\n\t\tsetCellBigPictureDialogOpen(true);\r\n\t\tsetBigPictureTitle(`Image: ${cellPair.ImageNumber}, Object: ${cellPair.ObjectNumber}`);\r\n\t\treturn workerActionPromise(canvasWebWorker, 'get', {\r\n\t\t\tgetType: 'blobUrlBigPictureFromCellPair',\r\n\t\t\tgetArgs: { cellPair },\r\n\t\t}).then((event) => {\r\n\t\t\tsetBigPictureSource(event.data.blobUrl);\r\n\t\t});\r\n\t};\r\n\tconst handleCloseCellBigPicture = function () {\r\n\t\tconsole.log('close big picture');\r\n\t\tsetCellBigPictureDialogOpen(false);\r\n\t};\r\n\r\n\tconst handleFetch = async (fetchType) => {\r\n\t\tconsole.log('Fetch!');\r\n\t\tif ((fetchType === undefined) | (fetchType == null)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tsetFetching(true);\r\n\t\tconst emptyTileState = { unclassified: [], positive: [], negative: [] };\r\n\t\tsetTileState(emptyTileState);\r\n\t\tvar newCellPairs = [];\r\n\t\tswitch (fetchType) {\r\n\t\t\tcase 'Random':\r\n\t\t\t\tworkerActionPromise(dataWebWorker, 'get', { getType: 'cellPairs', getArgs: { amount: 16 } })\r\n\t\t\t\t\t.then((event) => {\r\n\t\t\t\t\t\tconst cellPairs = event.data.getResult;\r\n\t\t\t\t\t\tnewCellPairs = cellPairs;\r\n\t\t\t\t\t\tsetActiveCellPairs(cellPairs);\r\n\t\t\t\t\t\tconsole.log(cellPairs);\r\n\t\t\t\t\t\treturn workerActionPromise(canvasWebWorker, 'get', {\r\n\t\t\t\t\t\t\tgetType: 'blobUrlsFromCellPairs',\r\n\t\t\t\t\t\t\tgetArgs: { cellPairs },\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.then((event) => {\r\n\t\t\t\t\t\tconsole.log('tile state time');\r\n\t\t\t\t\t\treturn constructTileStatePromise(event.data.blobUrls, newCellPairs);\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.then((newTileState) => {\r\n\t\t\t\t\t\tsetTileState(newTileState);\r\n\t\t\t\t\t\tsetFetching(false);\r\n\t\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'Positive':\r\n\t\t\tcase 'Negative': {\r\n\t\t\t\tvar newCellPairs = null;\r\n\t\t\t\tworkerActionPromise(dataWebWorker, 'get', { getType: 'cellPairs', getArgs: { amount: 100 } })\r\n\t\t\t\t\t.then((event) => {\r\n\t\t\t\t\t\tconst cellPairs = event.data.getResult;\r\n\r\n\t\t\t\t\t\treturn workerActionPromise(classifierWebWorker, 'predictFilterCellPairs', {\r\n\t\t\t\t\t\t\tcellPairs,\r\n\t\t\t\t\t\t\tclassType: fetchType,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.then((event) => {\r\n\t\t\t\t\t\tconst { filteredCellPairs } = event.data;\r\n\t\t\t\t\t\tconst slicedCellPairs = filteredCellPairs.slice(0, 16);\r\n\t\t\t\t\t\tnewCellPairs = filteredCellPairs;\r\n\t\t\t\t\t\tsetActiveCellPairs(filteredCellPairs);\r\n\t\t\t\t\t\treturn workerActionPromise(canvasWebWorker, 'get', {\r\n\t\t\t\t\t\t\tgetType: 'blobUrlsFromCellPairs',\r\n\t\t\t\t\t\t\tgetArgs: { cellPairs: slicedCellPairs },\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.then((event) => {\r\n\t\t\t\t\t\treturn constructTileStatePromise(event.data.blobUrls, newCellPairs);\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.then((newTileState) => {\r\n\t\t\t\t\t\tsetTileState(newTileState);\r\n\t\t\t\t\t\tsetFetching(false);\r\n\t\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 'Confusing': {\r\n\t\t\t\tvar newCellPairs = null;\r\n\t\t\t\tworkerActionPromise(dataWebWorker, 'get', { getType: 'cellPairs', getArgs: { amount: 100 } })\r\n\t\t\t\t\t.then((event) => {\r\n\t\t\t\t\t\tconst cellPairs = event.data.getResult;\r\n\r\n\t\t\t\t\t\treturn workerActionPromise(classifierWebWorker, 'confusingFilterCellPairs', {\r\n\t\t\t\t\t\t\tcellPairs: cellPairs,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.then((event) => {\r\n\t\t\t\t\t\tconst { sortedCellPairs } = event.data;\r\n\t\t\t\t\t\tconst slicedSortedCellPairs = sortedCellPairs.slice(0, 16);\r\n\t\t\t\t\t\tsetActiveCellPairs(slicedSortedCellPairs);\r\n\t\t\t\t\t\tnewCellPairs = slicedSortedCellPairs;\r\n\t\t\t\t\t\treturn workerActionPromise(canvasWebWorker, 'get', {\r\n\t\t\t\t\t\t\tgetType: 'blobUrlsFromCellPairs',\r\n\t\t\t\t\t\t\tgetArgs: { cellPairs: slicedSortedCellPairs },\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.then((event) => {\r\n\t\t\t\t\t\treturn constructTileStatePromise(event.data.blobUrls, newCellPairs);\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.then((newTileState) => {\r\n\t\t\t\t\t\tsetTileState(newTileState);\r\n\t\t\t\t\t\tsetFetching(false);\r\n\t\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 'ImageNumber': {\r\n\t\t\t\tvar newCellPairs = null;\r\n\t\t\t\tconsole.log('fetch by image number: ' + selectedFetchImageNumber);\r\n\t\t\t\tworkerActionPromise(dataWebWorker, 'get', {\r\n\t\t\t\t\tgetType: 'cellPairsFromImage',\r\n\t\t\t\t\tgetArgs: { ImageNumber: selectedFetchImageNumber },\r\n\t\t\t\t})\r\n\t\t\t\t\t.then((event) => {\r\n\t\t\t\t\t\tconst cellPairs = event.data.getResult;\r\n\t\t\t\t\t\tconsole.log(cellPairs);\r\n\t\t\t\t\t\treturn workerActionPromise(classifierWebWorker, 'predictFilterCellPairs', {\r\n\t\t\t\t\t\t\tcellPairs,\r\n\t\t\t\t\t\t\tclassType: fetchType,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.then((event) => {\r\n\t\t\t\t\t\tconst { filteredCellPairs } = event.data;\r\n\t\t\t\t\t\tconst slicedCellPairs = filteredCellPairs.slice(0, 16);\r\n\t\t\t\t\t\tsetActiveCellPairs(filteredCellPairs);\r\n\t\t\t\t\t\tnewCellPairs = filteredCellPairs;\r\n\t\t\t\t\t\treturn workerActionPromise(canvasWebWorker, 'get', {\r\n\t\t\t\t\t\t\tgetType: 'blobUrlsFromCellPairs',\r\n\t\t\t\t\t\t\tgetArgs: { cellPairs: slicedCellPairs },\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.then((event) => {\r\n\t\t\t\t\t\treturn constructTileStatePromise(event.data.blobUrls, newCellPairs);\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.then((newTileState) => {\r\n\t\t\t\t\t\tsetTileState(newTileState);\r\n\t\t\t\t\t\tsetFetching(false);\r\n\t\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase 'TrainingPositive':\r\n\t\t\tcase 'TrainingNegative': {\r\n\t\t\t\tvar newCellPairs = null;\r\n\t\t\t\t__ = DEBUG ? console.log(`Enter fetch: ${fetchType}`) : null;\r\n\t\t\t\tconst cellPairs = trainingObject.trainingData.map((dataRow) => ({\r\n\t\t\t\t\tImageNumber: dataRow[0],\r\n\t\t\t\t\tObjectNumber: dataRow[1],\r\n\t\t\t\t}));\r\n\t\t\t\t__ = DEBUG ? console.log(cellPairs) : null;\r\n\t\t\t\tworkerActionPromise(classifierWebWorker, 'predictFilterCellPairs', {\r\n\t\t\t\t\tcellPairs,\r\n\t\t\t\t\tclassType: fetchType === 'TrainingPositive' ? 'Positive' : 'Negative',\r\n\t\t\t\t})\r\n\t\t\t\t\t.then((event) => {\r\n\t\t\t\t\t\t__ = DEBUG ? console.log(`Return from predictFilterCellPairs `, event.data) : null;\r\n\t\t\t\t\t\tconst { filteredCellPairs } = event.data;\r\n\t\t\t\t\t\tsetActiveCellPairs(filteredCellPairs);\r\n\t\t\t\t\t\tnewCellPairs = filteredCellPairs;\r\n\t\t\t\t\t\treturn workerActionPromise(canvasWebWorker, 'get', {\r\n\t\t\t\t\t\t\tgetType: 'blobUrlsFromCellPairs',\r\n\t\t\t\t\t\t\tgetArgs: { cellPairs: filteredCellPairs },\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.then((event) => {\r\n\t\t\t\t\t\t__ = DEBUG ? console.log(`Return get blobUrlsFromCellPairs`, event.data) : null;\r\n\t\t\t\t\t\treturn constructTileStatePromise(event.data.blobUrls, newCellPairs);\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.then((newTileState) => {\r\n\t\t\t\t\t\tsetTileState(newTileState);\r\n\t\t\t\t\t\tsetFetching(false);\r\n\t\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleTrain = async () => {\r\n\t\tconsole.log('Train!');\r\n\t\tconst positiveCellPairs = tileState.positive.map((element) => activeCellPairs[element.id]);\r\n\t\tconst negativeCellPairs = tileState.negative.map((element) => activeCellPairs[element.id]);\r\n\r\n\t\tconst totalCellPairs = positiveCellPairs.concat(negativeCellPairs);\r\n\t\tconst newLabels = new Array(positiveCellPairs.length)\r\n\t\t\t.fill(1)\r\n\t\t\t.concat(new Array(negativeCellPairs.length).fill(0));\r\n\r\n\t\tsetScoreTableIsUpToDate(false);\r\n\t\tconst emptyTileState = { unclassified: [], positive: [], negative: [] };\r\n\t\tsetTileState(emptyTileState);\r\n\t\tsetActiveCellPairs([]);\r\n\r\n\t\tworkerActionPromise(dataWebWorker, 'get', {\r\n\t\t\tgetType: 'objectRowsFromCellpairs',\r\n\t\t\tgetArgs: { cellPairs: totalCellPairs },\r\n\t\t}).then((event) => {\r\n\t\t\tconst dataRows = event.data.getResult;\r\n\r\n\t\t\tconst newTrainingObject = {\r\n\t\t\t\tclassifierType: 'LogisticRegression',\r\n\t\t\t\ttrainingData: [...trainingObject.trainingData, ...dataRows],\r\n\t\t\t\ttrainingLabels: [...trainingObject.trainingLabels, ...newLabels],\r\n\t\t\t\tfeatureIndicesToUse: trainingObject.featureIndicesToUse,\r\n\t\t\t};\r\n\t\t\treturn trainSequencePromise(newTrainingObject);\r\n\t\t});\r\n\t};\r\n\r\n\tconst trainSequencePromise = function (currentTrainingObject) {\r\n\t\tsetOpenTrainDropdown(true);\r\n\t\tvar UUID = null;\r\n\t\tlet updateCanvasesListener = (event) => {\r\n\t\t\tif (UUID == event.data.uuid) {\r\n\t\t\t\tswitch (event.data.action) {\r\n\t\t\t\t\tcase 'updateTrainingCanvases':\r\n\t\t\t\t\t\ttfvis.show.history(trainingLossCanvasParentRef.current, event.data.trainLogs, [\r\n\t\t\t\t\t\t\t...event.data.ticks.loss,\r\n\t\t\t\t\t\t\t...event.data.ticks.accuracy,\r\n\t\t\t\t\t\t]);\r\n\t\t\t\t\t\t// tfvis.show.history(\r\n\t\t\t\t\t\t// \ttrainingAccuracyCanvasParentRef.current,\r\n\t\t\t\t\t\t// \tevent.data.trainLogs,\r\n\r\n\t\t\t\t\t\t// );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tconsole.log(\"didn't render bad action\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tworkerActionPromise(classifierWebWorker, 'startTrainingGraphsConnection', {})\r\n\t\t\t.then((event) => {\r\n\t\t\t\tUUID = event.data.uuid;\r\n\t\t\t\tclassifierWebWorker.addEventListener('message', updateCanvasesListener);\r\n\t\t\t\treturn workerActionPromise(classifierWebWorker, 'train', { trainingObject: currentTrainingObject });\r\n\t\t\t})\r\n\t\t\t.then(() => {\r\n\t\t\t\tworkerActionPromise(classifierWebWorker, 'endTrainingGraphsConnection', {});\r\n\t\t\t\tclassifierWebWorker.removeEventListener('message', updateCanvasesListener);\r\n\t\t\t\treturn workerActionPromise(classifierWebWorker, 'confusionMatrix');\r\n\t\t\t})\r\n\t\t\t.then((event) => {\r\n\t\t\t\tconst newConfusionMatrix = event.data.confusionMatrix;\r\n\t\t\t\tsetConfusionMatrix(newConfusionMatrix);\r\n\t\t\t})\r\n\t\t\t.then(() => {\r\n\t\t\t\tsetTrainingObject(currentTrainingObject);\r\n\t\t\t\tsetOpenTrainDropdown(false);\r\n\t\t\t});\r\n\t};\r\n\r\n\tconst workerActionPromise = function (worker, action, data) {\r\n\t\tconst UUID = uuidv4();\r\n\r\n\t\treturn new Promise((resolve) => {\r\n\t\t\tlet selfDestructingEventHandler = (event) => {\r\n\t\t\t\tif (event.data.uuid === UUID) {\r\n\t\t\t\t\tworker.removeEventListener('message', selfDestructingEventHandler);\r\n\t\t\t\t\tresolve(event);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tworker.addEventListener('message', selfDestructingEventHandler);\r\n\r\n\t\t\tworker.postMessage({ action, ...data, uuid: UUID });\r\n\t\t});\r\n\t};\r\n\r\n\tconst handleUpload = async (eventObject) => {\r\n\t\tconsole.log('Upload!');\r\n\t\tsetUploading(true);\r\n\t\tworkerActionPromise(dataWebWorker, 'init', { fileListObject: eventObject.target.files })\r\n\t\t\t.then(() => {\r\n\t\t\t\tconsole.log('done');\r\n\t\t\t\tworkerActionPromise(dataWebWorker, 'get', {\r\n\t\t\t\t\tgetType: 'cellPairData',\r\n\t\t\t\t\tgetArgs: { cellPair: { ImageNumber: 1, ObjectNumber: 1 } },\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t\t.then(() => {\r\n\t\t\t\tconsole.log('next');\r\n\t\t\t\treturn workerActionPromise(dataWebWorker, 'get', { getType: 'trainingObject' });\r\n\t\t\t})\r\n\t\t\t.then((event) => {\r\n\t\t\t\tconst initialTrainingObject = event.data.getResult;\r\n\t\t\t\treturn trainSequencePromise(initialTrainingObject);\r\n\t\t\t})\r\n\t\t\t.then(() => {\r\n\t\t\t\tsetUploading(false);\r\n\t\t\t\tsetSuccess(true);\r\n\t\t\t\tenableIterationButtons();\r\n\t\t\t\tsetUploadButtonEnabled(false);\r\n\t\t\t});\r\n\t};\r\n\r\n\t/*\r\n\t\t@param (Array<Array<any>>) data The 2D array of data to convert and download as csv\r\n\t\t@param? (Array<string>) headers The possible headers at the top of the fiile\r\n\t\t@return (string)\r\n\t*/\r\n\tconst dataToCsvString = (data, headers = null) => {\r\n\t\tlet csvContent = '';\r\n\t\tif (headers !== null) {\r\n\t\t\tcsvContent += headers.join(',') + '\\n';\r\n\t\t}\r\n\t\tcsvContent += data.map((l) => l.join(',')).join('\\n');\r\n\t\t// downloadFile('enrichmentScores', csvContent, '.csv');\r\n\t\treturn csvContent;\r\n\t};\r\n\r\n\tconst rows = [\r\n\t\t['name1', 'city1', 'some other info'],\r\n\t\t['name2', 'city2', 'more info'],\r\n\t];\r\n\tconst headers = ['a', 'b', 'c'];\r\n\r\n\tconst handleScoreAll = async () => {\r\n\t\tconsole.log('Score All!');\r\n\t\tif (!scoreTableIsUpToDate && !currentlyScoring) {\r\n\t\t\tsetCurrentlyScoring(true);\r\n\t\t\tconsole.log('Score All!');\r\n\t\t\treturn workerActionPromise(classifierWebWorker, 'scoreObjectData').then((event) => {\r\n\t\t\t\tconst newScoreTableObject = event.data.scoreTableObject;\r\n\t\t\t\tconsole.log(newScoreTableObject);\r\n\t\t\t\tconst scoreDataRows = Object.keys(newScoreTableObject.imageToCountsMap).map((key) => ({\r\n\t\t\t\t\timageNumber: key,\r\n\t\t\t\t\ttotal: newScoreTableObject.imageToCountsMap[key][0] + newScoreTableObject.imageToCountsMap[key][1],\r\n\t\t\t\t\tpositive: newScoreTableObject.imageToCountsMap[key][1],\r\n\t\t\t\t\tnegative: newScoreTableObject.imageToCountsMap[key][0],\r\n\t\t\t\t\tratio: newScoreTableObject.ratios[key],\r\n\t\t\t\t\tadjustratio: newScoreTableObject.adjustedRatios[key],\r\n\t\t\t\t}));\r\n\t\t\t\tconst adjustedRatiosData = Object.values(newScoreTableObject.adjustedRatios).map((ratio) => ({\r\n\t\t\t\t\tx: ratio,\r\n\t\t\t\t}));\r\n\t\t\t\tsetHistogramData(adjustedRatiosData);\r\n\t\t\t\tsetScoreTable(scoreDataRows);\r\n\t\t\t\tsetCurrentlyScoring(false);\r\n\t\t\t\t// setScoreTableObject(newScoreTableObject);\r\n\r\n\t\t\t\tconst headers = [\r\n\t\t\t\t\t'ImageNumber',\r\n\t\t\t\t\t'PositiveCount',\r\n\t\t\t\t\t'NegativeCount',\r\n\t\t\t\t\t'TotalCount',\r\n\t\t\t\t\t'Ratio',\r\n\t\t\t\t\t'AdjustedRatio',\r\n\t\t\t\t];\r\n\t\t\t\tconst csvdata = scoreDataRows.map((dataRow) => [\r\n\t\t\t\t\tdataRow.imageNumber,\r\n\t\t\t\t\tdataRow.positive,\r\n\t\t\t\t\tdataRow.negative,\r\n\t\t\t\t\tdataRow.total,\r\n\t\t\t\t\tdataRow.ratio,\r\n\t\t\t\t\tdataRow.adjustratio,\r\n\t\t\t\t]);\r\n\t\t\t\t// const onDownload = () => {\r\n\t\t\t\t// \tdownloadDataAsCSV(csvdata, headers);\r\n\t\t\t\t// };\r\n\t\t\t\tconst csvContent = dataToCsvString(csvdata, headers);\r\n\t\t\t\tsetScoreTableCsvString(csvContent);\r\n\t\t\t\t// setDownloadScoreTableFunction(onDownload);\r\n\t\t\t\tsetScoreTableIsUpToDate(true);\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleDownload = async () => {\r\n\t\tconsole.log('Download!');\r\n\t\treturn workerActionPromise(classifierWebWorker, 'getClassifier').then((event) => {\r\n\t\t\ttf.loadLayersModel(`indexeddb://${trainingObject.classifierType}`).then((model) => {\r\n\t\t\t\tmodel.save(`downloads://${trainingObject.classifierType}`);\r\n\t\t\t});\r\n\r\n\t\t\t// const classifier = event.data.classifier;\r\n\t\t\t// classifier.save(`downloads://${trainingObject.classifierType}`);\r\n\t\t});\r\n\t};\r\n\r\n\tasync function constructTileStatePromise(dataURLs, newCellPairs) {\r\n\t\tconst cellDatas = await Promise.all(\r\n\t\t\tnewCellPairs.map((cellPair) =>\r\n\t\t\t\tworkerActionPromise(dataWebWorker, 'get', {\r\n\t\t\t\t\tgetType: 'cellPairData',\r\n\t\t\t\t\tgetArgs: { cellPair: cellPair },\r\n\t\t\t\t}).then((event) => event.data.getResult)\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t\treturn {\r\n\t\t\tunclassified: dataURLs.map((dataURL, idx) => {\r\n\t\t\t\tconst cellData = cellDatas[idx];\r\n\r\n\t\t\t\tconst label = `Ob: ${cellData.ObjectNumber}\\nIm: ${cellData.ImageNumber}`;\r\n\t\t\t\t// We: ${cellData.Well}\r\n\t\t\t\t// Pl: ${cellData.Plate}`;\r\n\t\t\t\tconsole.log(label);\r\n\t\t\t\treturn {\r\n\t\t\t\t\tid: idx,\r\n\t\t\t\t\taddress: dataURL,\r\n\t\t\t\t\tinfo: label,\r\n\t\t\t\t\tcellPair: { ImageNumber: cellData.ImageNumber, ObjectNumber: cellData.ObjectNumber },\r\n\t\t\t\t};\r\n\t\t\t}),\r\n\t\t\tpositive: [],\r\n\t\t\tnegative: [],\r\n\t\t};\r\n\t}\r\n\r\n\tfunction onChange(sourceId, sourceIndex, targetIndex, targetId) {\r\n\t\tif (targetId) {\r\n\t\t\tconst result = move(tileState[sourceId], tileState[targetId], sourceIndex, targetIndex);\r\n\t\t\treturn setTileState({\r\n\t\t\t\t...tileState,\r\n\t\t\t\t[sourceId]: result[0],\r\n\t\t\t\t[targetId]: result[1],\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tconst result = swap(tileState[sourceId], sourceIndex, targetIndex);\r\n\t\treturn setTileState({\r\n\t\t\t...tileState,\r\n\t\t\t[sourceId]: result,\r\n\t\t});\r\n\t}\r\n\r\n\tconst handleClickOpenImNumFetchDropdown = () => {\r\n\t\tsetAnchorEl(null);\r\n\t\tsetOpenFetchDropdown(true);\r\n\t};\r\n\r\n\tconst handleClickCloseImNumFetchDropdown = () => {\r\n\t\tsetOpenFetchDropdown(false);\r\n\t\thandleCloseFetchDropDown('ImageNumber');\r\n\t};\r\n\r\n\treturn (\r\n\t\t<GridContextProvider onChange={onChange}>\r\n\t\t\t<div style={{ overflowX: 'hidden', height: '100%', width: '100%' }}>\r\n\t\t\t\t<Row style={{ marginTop: '2%' }}>\r\n\t\t\t\t\t<Image\r\n\t\t\t\t\t\tsrc={logo}\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\tmarginLeft: '11%',\r\n\t\t\t\t\t\t\theight: '30%',\r\n\t\t\t\t\t\t\twidth: '25%',\r\n\t\t\t\t\t\t\tposition: 'relative',\r\n\t\t\t\t\t\t\tmaxHeight: '125px',\r\n\t\t\t\t\t\t\tmarginBottom: '2%',\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t></Image>\r\n\r\n\t\t\t\t\t<Col style={{ left: '40%', right: 5 }}>\r\n\t\t\t\t\t\t<div className={classes.root}>\r\n\t\t\t\t\t\t\t<div className={classes.wrapper}>\r\n\t\t\t\t\t\t\t\t<Tooltip title=\"Load Data\" aria-label=\"load data\">\r\n\t\t\t\t\t\t\t\t\t<Fab\r\n\t\t\t\t\t\t\t\t\t\taria-label=\"save\"\r\n\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\t\t\tcomponent=\"label\"\r\n\t\t\t\t\t\t\t\t\t\tclassName={buttonClassname}\r\n\t\t\t\t\t\t\t\t\t\t// style={{ height: '5vw', width: '5vw' }}\r\n\t\t\t\t\t\t\t\t\t\tstyle={{ marginRight: 5 }}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{success ? (\r\n\t\t\t\t\t\t\t\t\t\t\t<CheckIcon\r\n\t\t\t\t\t\t\t\t\t\t\t// style={{ height: '50%', width: '50%'}}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t\t<CloudUploadIcon\r\n\t\t\t\t\t\t\t\t\t\t\t// style={{ height: '50%', width: '50%' }}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\t\t\ttype=\"file\"\r\n\t\t\t\t\t\t\t\t\t\t\thidden\r\n\t\t\t\t\t\t\t\t\t\t\twebkitdirectory=\"true\"\r\n\t\t\t\t\t\t\t\t\t\t\tmozdirectory=\"true\"\r\n\t\t\t\t\t\t\t\t\t\t\tmsdirectory=\"true\"\r\n\t\t\t\t\t\t\t\t\t\t\todirectory=\"true\"\r\n\t\t\t\t\t\t\t\t\t\t\tdirectory=\"true\"\r\n\t\t\t\t\t\t\t\t\t\t\tmultiple\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={(eventObject) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\thandleUpload(eventObject);\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\tdisabled={!uploadButtonEnabled}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</Fab>\r\n\t\t\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t\t\t\t{/* size={68}  */}\r\n\t\t\t\t\t\t\t\t{uploading && (\r\n\t\t\t\t\t\t\t\t\t<CircularProgress\r\n\t\t\t\t\t\t\t\t\t\tclassName={classes.fabProgress}\r\n\t\t\t\t\t\t\t\t\t\tsize={68}\r\n\t\t\t\t\t\t\t\t\t\t// size={\"6vw\"}\r\n\t\t\t\t\t\t\t\t\t\t//  style={{   marginTop: \"3%\", marginRight: '20vw'}}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t\t<Col style={{ left: '15%' }}>\r\n\t\t\t\t\t\t<Tooltip title=\"Download\" aria-label=\"download\">\r\n\t\t\t\t\t\t\t<Fab\r\n\t\t\t\t\t\t\t\taria-label=\"save\"\r\n\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\tcomponent=\"label\"\r\n\t\t\t\t\t\t\t\tdisabled={!downloadButtonEnabled}\r\n\t\t\t\t\t\t\t\tonClick={handleDownload}\r\n\t\t\t\t\t\t\t\t// style={{ height: '5vw', width: '5vw'}}\r\n\t\t\t\t\t\t\t\tstyle={{ positive: 'relative' }}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{' '}\r\n\t\t\t\t\t\t\t\t<SaveAltIcon\r\n\t\t\t\t\t\t\t\t// style={{ height: '50%', width: '50%' }}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Fab>\r\n\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n\t\t\t\t<Row>\r\n\t\t\t\t\t<Grid container justify=\"center\" spacing={2} style={{ marginBottom: 15 }}>\r\n\t\t\t\t\t\t<Grid key={0} item>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tdisabled={!fetchButtonEnabled}\r\n\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\taria-controls=\"simple-menu\"\r\n\t\t\t\t\t\t\t\taria-haspopup=\"true\"\r\n\t\t\t\t\t\t\t\tonClick={handleClickFetchDropDown}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tFetch\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t<Menu\r\n\t\t\t\t\t\t\t\tid=\"simple-menu\"\r\n\t\t\t\t\t\t\t\tanchorEl={anchorEl}\r\n\t\t\t\t\t\t\t\tkeepMounted\r\n\t\t\t\t\t\t\t\topen={Boolean(anchorEl)}\r\n\t\t\t\t\t\t\t\tonClose={() => handleCloseFetchDropDown(null)}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<MenuItem onClick={() => handleCloseFetchDropDown('Random')}>Random</MenuItem>\r\n\t\t\t\t\t\t\t\t<MenuItem onClick={() => handleCloseFetchDropDown('Positive')}>Positive</MenuItem>\r\n\t\t\t\t\t\t\t\t<MenuItem onClick={() => handleCloseFetchDropDown('Negative')}>Negative</MenuItem>\r\n\t\t\t\t\t\t\t\t<MenuItem onClick={handleClickOpenImNumFetchDropdown}>By Image</MenuItem>\r\n\t\t\t\t\t\t\t\t<MenuItem onClick={() => handleCloseFetchDropDown('TrainingPositive')}>\r\n\t\t\t\t\t\t\t\t\tTraining Set Positive\r\n\t\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t\t<MenuItem onClick={() => handleCloseFetchDropDown('TrainingNegative')}>\r\n\t\t\t\t\t\t\t\t\tTraining Set Negative\r\n\t\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t\t<MenuItem onClick={() => handleCloseFetchDropDown('Confusing')}>Confusing</MenuItem>\r\n\r\n\t\t\t\t\t\t\t\t<Dialog open={openFetchDropdown} onClose={() => handleCloseFetchDropDown(null)}>\r\n\t\t\t\t\t\t\t\t\t<DialogTitle>\r\n\t\t\t\t\t\t\t\t\t\t{/* <Typography variant=\"h3\" align=\"center\"> */}\r\n\t\t\t\t\t\t\t\t\t\t\tFetch By Image\r\n\t\t\t\t\t\t\t\t\t\t{/* </Typography> */}\r\n\t\t\t\t\t\t\t\t\t</DialogTitle>\r\n\t\t\t\t\t\t\t\t\t<DialogContent>\r\n\t\t\t\t\t\t\t\t\t\t<DialogContentText>\r\n\t\t\t\t\t\t\t\t\t\t\tSelect the image number you would like to fetch from.\r\n\t\t\t\t\t\t\t\t\t\t</DialogContentText>\r\n\t\t\t\t\t\t\t\t\t\t<form noValidate>\r\n\t\t\t\t\t\t\t\t\t\t\t<FormControl>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(event) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tevent.target.value === null ||\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tevent.target.value === undefined ||\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tevent.target.value === ''\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetSelectedFetchImageNumber(event.target.value);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetFetchImageNumberButtonEnabled(true);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tlabel=\"Image Number\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t></TextField>\r\n\t\t\t\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t\t\t\t</DialogContent>\r\n\t\t\t\t\t\t\t\t\t<DialogActions>\r\n\t\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\t\tdisabled={!fetchImageNumberButtonEnabled}\r\n\t\t\t\t\t\t\t\t\t\t\tonClick={handleClickCloseImNumFetchDropdown}\r\n\t\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\tOk\r\n\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t</DialogActions>\r\n\t\t\t\t\t\t\t\t</Dialog>\r\n\t\t\t\t\t\t\t</Menu>\r\n\t\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t\t<Grid key={1} item>\r\n\t\t\t\t\t\t\t{/* style = {{height: \"5vw\", width:\"10vw\", minHeight:2, maxHeight: 35, maxwidth: 50, fontSize: \"max(1.5vw, 20)\"}}  */}\r\n\t\t\t\t\t\t\t<Button disabled={!trainButtonEnabled} variant=\"contained\" onClick={handleTrain}>\r\n\t\t\t\t\t\t\t\tTrain\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t<Dialog fullWidth={500} open={openTrainDropdown}>\r\n\t\t\t\t\t\t\t\t<DialogTitle>Training the Classifier</DialogTitle>\r\n\t\t\t\t\t\t\t\t<DialogContent>\r\n\t\t\t\t\t\t\t\t\t<div width={300} ref={trainingAccuracyCanvasParentRef}></div>\r\n\t\t\t\t\t\t\t\t\t<div width={300} ref={trainingLossCanvasParentRef}></div>\r\n\t\t\t\t\t\t\t\t</DialogContent>\r\n\t\t\t\t\t\t\t</Dialog>\r\n\t\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t\t<Grid key={2} item>\r\n\t\t\t\t\t\t\t{/* <Button disabled={!evaluateButtonEnabled} variant=\"contained\" onClick={()=>{}}>Evaluate</Button>  */}\r\n\t\t\t\t\t\t\t{/* TODO: need to fix button disabled DONE*/}\r\n\t\t\t\t\t\t\t{!evaluateButtonEnabled ? (\r\n\t\t\t\t\t\t\t\t<Button disabled={!evaluateButtonEnabled} variant=\"contained\" onClick={() => {}}>\r\n\t\t\t\t\t\t\t\t\tEvaluate\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t<Evaluate confusionMatrix={confusionMatrix}></Evaluate>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t\t<Grid key={3} item>\r\n\t\t\t\t\t\t\t{/* <Button  disabled={!scoreAllButtonEnabled} variant=\"contained\" onClick={()=>{}}>Score All</Button> */}\r\n\t\t\t\t\t\t\t{/* TODO: need to fix button disabled DONE*/}\r\n\r\n\t\t\t\t\t\t\t{!evaluateButtonEnabled ? (\r\n\t\t\t\t\t\t\t\t<Button disabled={!evaluateButtonEnabled} variant=\"contained\" onClick={handleScoreAll}>\r\n\t\t\t\t\t\t\t\t\tScore All\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t<ScoreAll\r\n\t\t\t\t\t\t\t\t\thistogramData={histogramData}\r\n\t\t\t\t\t\t\t\t\tscoreTable={scoreTable}\r\n\t\t\t\t\t\t\t\t\thandleScoreAll={handleScoreAll}\r\n\t\t\t\t\t\t\t\t\tscoreTableIsUpToDate={scoreTableIsUpToDate}\r\n\t\t\t\t\t\t\t\t\t// downloadScoreTableFunction={downloadScoreTableFunction}\r\n\t\t\t\t\t\t\t\t\tscoreTableCsvString={scoreTableCsvString}\r\n\t\t\t\t\t\t\t\t></ScoreAll>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Row>\r\n\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<label\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\ttextAlign: 'left',\r\n\t\t\t\t\t\t\tbackgroundColor: 'white',\r\n\t\t\t\t\t\t\tpaddingLeft: '10%',\r\n\t\t\t\t\t\t\tmarginBottom: '0.5%',\r\n\t\t\t\t\t\t\tuserSelect: 'none',\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tUnclassified{' '}\r\n\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<GridDropZone\r\n\t\t\t\t\t\t\tclassName=\"dropzone \"\r\n\t\t\t\t\t\t\tid=\"unclassified\"\r\n\t\t\t\t\t\t\tboxesPerRow={8}\r\n\t\t\t\t\t\t\trowHeight={80}\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\theight: '20vw',\r\n\t\t\t\t\t\t\t\tmaxHeight: 200,\r\n\t\t\t\t\t\t\t\tminHeight: 150,\r\n\t\t\t\t\t\t\t\tmarginBottom: 10,\r\n\t\t\t\t\t\t\t\tmarginLeft: '10%',\r\n\t\t\t\t\t\t\t\twidth: '80%',\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{!fetching ? (\r\n\t\t\t\t\t\t\t\ttileState.unclassified.map((item) => (\r\n\t\t\t\t\t\t\t\t\t<GridItem\r\n\t\t\t\t\t\t\t\t\t\tclassName=\"hoverTest\"\r\n\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\theight: '15vw',\r\n\t\t\t\t\t\t\t\t\t\t\twidth: '15vw',\r\n\t\t\t\t\t\t\t\t\t\t\tminHeight: 80,\r\n\t\t\t\t\t\t\t\t\t\t\tminWidth: 80,\r\n\t\t\t\t\t\t\t\t\t\t\tmaxHeight: 120,\r\n\t\t\t\t\t\t\t\t\t\t\tmaxWidth: 120,\r\n\t\t\t\t\t\t\t\t\t\t\tpadding: 10,\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\tkey={item.id}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"grid-item\">\r\n\t\t\t\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\t\t\t\tonDoubleClick={() => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log('double click: ' + item.info);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\thandleOpenCellBigPicture(item.cellPair);\r\n\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"grid-item-content\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tbackgroundImage: `url(${item.address})`,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\theight: '5vw',\r\n\t\t\t\t\t\t\t\t\t\t\t\t\twidth: '5vw',\r\n\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"hoverText\">{item.info}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</GridItem>\r\n\t\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t<CircularProgress\r\n\t\t\t\t\t\t\t\t\tstyle={{ height: '6vw', width: '6vw', marginTop: '6%', marginLeft: '45%' }}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</GridDropZone>\r\n\t\t\t\t\t\t<Dialog\r\n\t\t\t\t\t\t\tstyle={{ alignItems: 'center' }}\r\n\t\t\t\t\t\t\tonClose={handleCloseCellBigPicture}\r\n\t\t\t\t\t\t\t// fullWidth={480}\r\n\t\t\t\t\t\t\t// maxWidth={480}\r\n\t\t\t\t\t\t\topen={cellBigPictureDialogOpen}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<DialogTitle>{bigPictureTitle}</DialogTitle>\r\n\t\t\t\t\t\t\t{/* <DialogTitle>Loss and Accuracy</DialogTitle> */}\r\n\t\t\t\t\t\t\t<DialogContent style={{ alignItems: 'center', justifyContent: 'center' }}>\r\n\t\t\t\t\t\t\t\t<img width={430} height={430} src={bigPictureSource}></img>\r\n\t\t\t\t\t\t\t</DialogContent>\r\n\t\t\t\t\t\t</Dialog>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t<label\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\ttextAlign: 'left',\r\n\t\t\t\t\t\t\t\tbackgroundColor: 'white',\r\n\t\t\t\t\t\t\t\tpaddingLeft: '11%',\r\n\t\t\t\t\t\t\t\tuserSelect: 'none',\r\n\t\t\t\t\t\t\t\tmarginBottom: '0.5%',\r\n\t\t\t\t\t\t\t\tmarginTop: 0,\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tPositive\r\n\t\t\t\t\t\t</label>\r\n\r\n\t\t\t\t\t\t<label\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\ttextAlign: 'left',\r\n\t\t\t\t\t\t\t\tbackgroundColor: 'white',\r\n\t\t\t\t\t\t\t\tpaddingRight: '8%',\r\n\t\t\t\t\t\t\t\tuserSelect: 'none',\r\n\t\t\t\t\t\t\t\tmargin: 'auto',\r\n\t\t\t\t\t\t\t\tmarginBottom: '0.5%',\r\n\t\t\t\t\t\t\t\tmarginTop: 0,\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tNegative\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t</Row>\r\n\r\n\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t<GridDropZone\r\n\t\t\t\t\t\t\tclassName=\"dropzone positive\"\r\n\t\t\t\t\t\t\tid=\"positive\"\r\n\t\t\t\t\t\t\tboxesPerRow={4}\r\n\t\t\t\t\t\t\trowHeight={80}\r\n\t\t\t\t\t\t\tstyle={{ height: '20vw', maxHeight: 200, minHeight: 150 }}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{tileState.positive.map((item) => (\r\n\t\t\t\t\t\t\t\t<GridItem\r\n\t\t\t\t\t\t\t\t\tclassName=\"hoverTest\"\r\n\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\theight: '15vw',\r\n\t\t\t\t\t\t\t\t\t\twidth: '15vw',\r\n\t\t\t\t\t\t\t\t\t\tminHeight: 80,\r\n\t\t\t\t\t\t\t\t\t\tminWidth: 80,\r\n\t\t\t\t\t\t\t\t\t\tmaxHeight: 105,\r\n\t\t\t\t\t\t\t\t\t\tmaxWidth: 105,\r\n\t\t\t\t\t\t\t\t\t\tpadding: 10,\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\tkey={item.id}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<div className=\"grid-item\">\r\n\t\t\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\t\t\tonDoubleClick={() => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tconsole.log('double click: ' + item.info);\r\n\t\t\t\t\t\t\t\t\t\t\t\thandleOpenCellBigPicture(item.cellPair);\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"grid-item-content\"\r\n\t\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t\tbackgroundImage: `url(${item.address})`,\r\n\t\t\t\t\t\t\t\t\t\t\t\theight: '5vw',\r\n\t\t\t\t\t\t\t\t\t\t\t\twidth: '5vw',\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"hoverText\">{item.info}</span>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</GridItem>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</GridDropZone>\r\n\r\n\t\t\t\t\t\t<GridDropZone\r\n\t\t\t\t\t\t\tclassName=\"dropzone negative\"\r\n\t\t\t\t\t\t\tid=\"negative\"\r\n\t\t\t\t\t\t\tboxesPerRow={4}\r\n\t\t\t\t\t\t\trowHeight={80}\r\n\t\t\t\t\t\t\tstyle={{ height: '20vw', maxHeight: 200, minHeight: 150 }}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{tileState.negative.map((item) => (\r\n\t\t\t\t\t\t\t\t<GridItem\r\n\t\t\t\t\t\t\t\t\tclassName=\"hoverTest\"\r\n\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\theight: '15vw',\r\n\t\t\t\t\t\t\t\t\t\twidth: '15vw',\r\n\t\t\t\t\t\t\t\t\t\tminHeight: 80,\r\n\t\t\t\t\t\t\t\t\t\tminWidth: 80,\r\n\t\t\t\t\t\t\t\t\t\tmaxHeight: 105,\r\n\t\t\t\t\t\t\t\t\t\tmaxWidth: 105,\r\n\t\t\t\t\t\t\t\t\t\tpadding: 10,\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\tkey={item.address}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<div className=\"grid-item\">\r\n\t\t\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\t\t\tonDoubleClick={() => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tconsole.log('double click: ' + item.info);\r\n\t\t\t\t\t\t\t\t\t\t\t\thandleOpenCellBigPicture(item.cellPair);\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"grid-item-content\"\r\n\t\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t\tbackgroundImage: `url(${item.address})`,\r\n\t\t\t\t\t\t\t\t\t\t\t\theight: '5vw',\r\n\t\t\t\t\t\t\t\t\t\t\t\twidth: '5vw',\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"hoverText\">{item.info}</span>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</GridItem>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</GridDropZone>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</GridContextProvider>\r\n\t);\r\n}\r\n\r\nexport default TestUIMVP;\r\n"],"sourceRoot":""}