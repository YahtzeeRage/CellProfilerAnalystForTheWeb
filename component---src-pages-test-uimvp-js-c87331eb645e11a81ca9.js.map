{"version":3,"sources":["webpack://gatsby-test/./src/pages/TestUIMVP.js"],"names":["Transition","React","props","ref","direction","useStyles","makeStyles","theme","root","display","alignItems","wrapper","margin","spacing","position","buttonSuccess","backgroundColor","green","fabProgress","color","top","left","zIndex","buttonProgress","marginTop","marginLeft","anchorEl","setAnchorEl","dataProvider","setDataProvider","trainingObject","setTrainingObject","fileListObject","setFileListObject","constructTileState","tileState","setTileState","imageGridManager","setImageGridManager","setLastFetchState","featuresToUse","setFeaturesToUseState","fetchButtonEnabled","setFetchButtonEnabled","trainButtonEnabled","setTrainButtonEnabled","evaluateButtonEnabled","setEvaluateButtonEnabled","downloadButtonEnabled","setDownloadButtonEnabled","uploadButtonEnabled","setUploadButtonEnabled","setScoreAllButtonEnabled","uploading","setUploading","success","setSuccess","fetching","setFetching","openFetchDropdown","setOpenFetchDropdown","setOpenViewCell","openEvaulate","setOpenEvaulate","handleClickOpenViewCell","handleCloseEvaulate","classes","buttonClassname","clsx","handleClickFetchDropDownOption","fetchType","undefined","handleFetch","disableIterationButtons","enableIterationButtons","unclassified","positive","negative","classifierManager","ClassifierManager","initTrainPromise","classedCellPairObjects","fetchUpToNCellPairsByClass","ih","ImageHandler","getObjsToURLs","dataURLS","newTileState","ImageGridManager","handleTrain","negativeIDs","map","item","id","positiveIDs","console","log","setClassByIndexArray","negativeCellPairs","getPairsByClass","positiveCellPairs","negativeObjectDataRows","cellPair","getRow","ImageNumber","ObjectNumber","positiveObjectDataRows","trainingDataAddition","negativeLabels","Array","length","fill","positiveLabels","trainingLabelsAddition","concat","UpdatedTrainingObject","classifierType","trainingData","trainingLabels","clearedTileState","handleUpload","uploadHandler","UploadHandler","getDataHandlerandStartingTrainingSet","uploadReturnObject","data_provider","trainingTable","training_data","training_table","trainingDataTable","getDataColumnsPaired","getTrainingLabels","initialTrainingData","row_object","totalFeatures","features","tempFeaturesToUse","filter","elem","includes","initialTrainingObject","handleDownload","userDownloadClassifierSpecPromise","dataURLs","cellToolTips","dataURL","idx","address","info","handleCloseFetchDropdownByImg","onChange","sourceId","sourceIndex","targetIndex","targetId","result","move","swap","style","overflowX","hieght","width","src","logo","height","maxHeight","marginBottom","className","title","aria-label","component","type","hidden","webkitdirectory","mozdirectory","msdirectory","odirectory","directory","multiple","eventObject","disabled","marginRight","onClick","container","justify","key","variant","aria-controls","aria-haspopup","event","currentTarget","keepMounted","open","Boolean","onClose","noValidate","autoFocus","value","TransitionComponent","right","textAlign","paddingLeft","userSelect","boxesPerRow","rowHeight","minHeight","minWidth","maxWidth","padding","backgroundImage","paddingRight"],"mappings":"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","file":"component---src-pages-test-uimvp-js-c87331eb645e11a81ca9.js","sourcesContent":["import React from 'react';\r\nimport { Row, Col, Container} from \"reactstrap\";\r\nimport {Box, Button, Grid, IconButton, Menu, MenuItem, Card}from '@material-ui/core'; \r\nimport logo from '../cpa_logo(blue).svg';\r\nimport {Image, Dropdown, DropdownButton} from 'react-bootstrap';\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { green } from '@material-ui/core/colors';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\n\r\nimport UploadHandler from '../classes/UploadHandler'\r\nimport {ClassifierManager} from '../classes/ClassifierManager'\r\nimport {ImageHandler}  from '../classes/ImageHandler'\r\nimport UserUploadFileHandler from '../classes/UserUploadFileHandler'\r\nimport {ImageGridManager}  from '../classes/imGridManager'\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Select from '@material-ui/core/Select';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ConfusionMatrix from './AbbyUIButtons/Evaluate_Canvas'\r\n\r\n\r\n\r\n\r\n//import UploadButton from './UploadButton'\r\n\r\nimport Evaluate from './AbbyUIButtons/UIEvaluateButton'\r\nimport ScoreAll from './AbbyUIButtons/UIScoreAllButton'\r\n\r\n\r\nimport {\r\n    GridContextProvider,\r\n    GridDropZone,\r\n    GridItem,\r\n    swap,\r\n    move\r\n  } from \"react-grid-dnd\";\r\n  \r\n  import \"../dndstyles.css\";\r\nimport { truncatedNormal } from '@tensorflow/tfjs-core';\r\nimport UploadButton from './UploadButton';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n    },\r\n    wrapper: {\r\n      margin: theme.spacing(1),\r\n      position: 'relative',\r\n    },\r\n    buttonSuccess: {\r\n      backgroundColor: green[500],\r\n      '&:hover': {\r\n        backgroundColor: green[700],\r\n      },\r\n    },\r\n    fabProgress: {\r\n      color: green[500],\r\n      position: 'absolute',\r\n      top: -6,\r\n      left: -6,\r\n      zIndex: 1,\r\n    },\r\n    buttonProgress: {\r\n      color: green[500],\r\n      position: 'absolute',\r\n      top: '50%',\r\n      left: '50%',\r\n      marginTop: -12,\r\n      marginLeft: -12,\r\n    },\r\n    \r\n  }));\r\n\r\n\r\nfunction TestUIMVP(){\r\n    \r\n    \r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const [dataProvider, setDataProvider] = React.useState(null)\r\n\r\n    // var classifierManager = null;\r\n    // const [classifierManager, setClassifierManager] = React.useState(null)\r\n    const [trainingObject, setTrainingObject] = React.useState(null)\r\n    const [fileListObject, setFileListObject] = React.useState(null)\r\n    const [tileState, setTileState] = React.useState( constructTileState([]) );\r\n    const [imageGridManager, setImageGridManager] = React.useState(null)\r\n    const [lastFetchState, setLastFetchState] = React.useState(null)\r\n    const [featuresToUse, setFeaturesToUseState] = React.useState(null)\r\n\r\n    const [fetchButtonEnabled, setFetchButtonEnabled] = React.useState(false)\r\n    const [trainButtonEnabled, setTrainButtonEnabled] = React.useState(false)\r\n    const [evaluateButtonEnabled, setEvaluateButtonEnabled] = React.useState(false)\r\n    const [downloadButtonEnabled, setDownloadButtonEnabled] = React.useState(false)\r\n    const [uploadButtonEnabled, setUploadButtonEnabled] = React.useState(true)\r\n    const [scoreAllButtonEnabled, setScoreAllButtonEnabled] = React.useState(false)\r\n    const [uploading, setUploading] = React.useState(false)\r\n    const [success, setSuccess] = React.useState(false)\r\n    const [fetching, setFetching] = React.useState(false)\r\n    const [openFetchDropdown, setOpenFetchDropdown] = React.useState(false);\r\n    const [openViewCell, setOpenViewCell] = React.useState(false);\r\n    const [openEvaulate, setOpenEvaulate] = React.useState(false);\r\n\r\n\r\n    const handleClickOpenViewCell = () => {\r\n      setOpenViewCell(true);\r\n    };\r\n  \r\n    const handleCloseViewCell = () => {\r\n      setOpenViewCell(false);\r\n    };\r\n\r\n    const handleClickOpenEvaulate = () => {\r\n      setOpenEvaulate(true);\r\n      \r\n    };\r\n    const handleCloseEvaulate = () => {\r\n      setOpenEvaulate(false);\r\n      \r\n    };\r\n\r\n    \r\n    const classes = useStyles();\r\n    const buttonClassname = clsx({\r\n      [classes.buttonSuccess]: success,\r\n    });\r\n\r\n    const N = 20\r\n\r\n    const handleClickFetchDropDown = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseFetchDropDown = () => {\r\n        setAnchorEl(null)\r\n    };\r\n    const handleClickFetchDropDownOption = (fetchType) => {\r\n      setAnchorEl(null)\r\n       if (fetchType !== undefined) {\r\n          handleFetch(fetchType)\r\n       }\r\n  };\r\n\r\n\r\n    const disableIterationButtons = () => {\r\n      setFetchButtonEnabled(false)\r\n      setTrainButtonEnabled(false)\r\n      setDownloadButtonEnabled(false)\r\n      setEvaluateButtonEnabled(false)\r\n      setScoreAllButtonEnabled(false)\r\n    }\r\n    const enableIterationButtons = () => {\r\n      setFetchButtonEnabled(true)\r\n      setTrainButtonEnabled(true)\r\n      setDownloadButtonEnabled(true)\r\n      setEvaluateButtonEnabled(true)\r\n      setScoreAllButtonEnabled(true)\r\n\r\n    }\r\n\r\n    const handleFetch = async (fetchType) => {\r\n      setFetching(true)\r\n      disableIterationButtons()\r\n      const emptyTileState = { unclassified: [], positive: [], negative: []}\r\n      setTileState(emptyTileState)\r\n      const classifierManager = new ClassifierManager(dataProvider, trainingObject)\r\n      await classifierManager.initTrainPromise()\r\n      setLastFetchState(fetchType)\r\n      const classedCellPairObjects = classifierManager.fetchUpToNCellPairsByClass(fetchType, N)\r\n     // const cellToolTips = classedCellPairObjects.map(cellPair => dataProvider.getToolTip(cellPair.ImageNumber))\r\n      const ih = new ImageHandler(fileListObject, dataProvider)\r\n      const dataURLS = await ih.getObjsToURLs(classedCellPairObjects)\r\n      const newTileState = constructTileState(dataURLS)\r\n      setTileState(newTileState)\r\n      setImageGridManager(new ImageGridManager(classedCellPairObjects, dataURLS))\r\n      enableIterationButtons()\r\n      setImageGridManager(classedCellPairObjects, dataURLS)\r\n      enableIterationButtons()\r\n      setFetching(false)\r\n      return\r\n    }\r\n    \r\n\r\n\r\n  const handleTrain = async () => {\r\n\r\n    disableIterationButtons()\r\n\r\n      const negativeIDs = tileState.negative.map(item => item.id)\r\n      const positiveIDs = tileState.positive.map(item => item.id)\r\n      console.log(negativeIDs, tileState)\r\n      imageGridManager.setClassByIndexArray('negative', negativeIDs)\r\n      imageGridManager.setClassByIndexArray('positive', positiveIDs)\r\n\r\n      const negativeCellPairs = imageGridManager.getPairsByClass('negative')\r\n      const positiveCellPairs = imageGridManager.getPairsByClass('positive')\r\n \r\n      const negativeObjectDataRows = negativeCellPairs.map(cellPair => dataProvider.getRow('object_data', {ImageNumber: cellPair.ImageNumber, ObjectNumber: cellPair.ObjectNumber}))\r\n      const positiveObjectDataRows = positiveCellPairs.map(cellPair => dataProvider.getRow('object_data', {ImageNumber: cellPair.ImageNumber, ObjectNumber: cellPair.ObjectNumber}))\r\n      const trainingDataAddition = [...negativeObjectDataRows, ...positiveObjectDataRows]\r\n\r\n      const negativeLabels = new Array(negativeObjectDataRows.length).fill(0)\r\n      const positiveLabels = new Array(positiveObjectDataRows.length).fill(1)\r\n      const trainingLabelsAddition = negativeLabels.concat(positiveLabels)\r\n\r\n      const UpdatedTrainingObject = {\r\n        classifierType: \"LogisticRegression\",\r\n        trainingData: [...trainingDataAddition, ...trainingObject.trainingData],\r\n        trainingLabels: [...trainingLabelsAddition, ...trainingObject.trainingLabels],\r\n        featuresToUse: featuresToUse\r\n      }\r\n      console.log(UpdatedTrainingObject)\r\n      setTrainingObject(UpdatedTrainingObject)\r\n      // const newClassifierManager = new ClassifierManager(dataProvider, UpdatedTrainingObject)\r\n      \r\n      \r\n      // setClassifierManager(newClassifierManager)\r\n\r\n      const clearedTileState = { unclassified: tileState.unclassified, positive: [], negative: []}\r\n      setTileState(clearedTileState)\r\n      console.log(\"finished train\")\r\n      enableIterationButtons()\r\n    \r\n  }\r\n\r\n    const handleUpload = async (fileListObject) => {\r\n        setUploading(true)\r\n        setUploadButtonEnabled(false)\r\n        setFileListObject(fileListObject)\r\n        const uploadHandler = new UploadHandler(fileListObject)\r\n        const uploadReturnObject = await uploadHandler.getDataHandlerandStartingTrainingSet();\r\n\r\n        const dataProvider = uploadReturnObject.data_provider\r\n        setDataProvider(dataProvider)\r\n        const trainingTable = uploadReturnObject.training_data.training_table\r\n        const trainingDataTable = trainingTable.getDataColumnsPaired()\r\n\r\n        const trainingLabels = trainingTable.getTrainingLabels()\r\n        const initialTrainingData = trainingDataTable.map(row_object => {\r\n            const ObjectNumber = row_object['objectnum']\r\n            const ImageNumber = row_object['imagenum']\r\n            return dataProvider.getRow('object_data', {ObjectNumber, ImageNumber})\r\n        })\r\n        const totalFeatures = uploadReturnObject.training_data.features\r\n        const tempFeaturesToUse = totalFeatures.filter((elem)=>!elem.includes(\"Location\") && (elem !== \"ObjectNumber\") && (elem !== \"ImageNumber\"))\r\n        setFeaturesToUseState(tempFeaturesToUse)\r\n        console.log(\"finished data initialization\")\r\n        const initialTrainingObject = {\r\n            classifierType: \"LogisticRegression\",\r\n            trainingData: initialTrainingData,\r\n            trainingLabels: trainingLabels,\r\n            featuresToUse: tempFeaturesToUse\r\n        }\r\n        setTrainingObject(initialTrainingObject)\r\n        // console.log(\"starting initial training\")\r\n        // const newClassifierManager = new ClassifierManager(dataProvider, initialTrainingObject)\r\n        \r\n        // setClassifierManager(newClassifierManager)\r\n\r\n        setFetchButtonEnabled(true)\r\n        setTrainButtonEnabled(true)\r\n        setDownloadButtonEnabled(true)\r\n        setEvaluateButtonEnabled(true)\r\n        \r\n        \r\n        console.log(\"finished upload\")\r\n\r\n    setTrainingObject(initialTrainingObject)\r\n    // console.log(\"starting initial training\")\r\n    // const newClassifierManager = new ClassifierManager(dataProvider, initialTrainingObject)\r\n    \r\n    // setClassifierManager(newClassifierManager)\r\n\r\n    setFetchButtonEnabled(true)\r\n    setTrainButtonEnabled(true)\r\n    setDownloadButtonEnabled(true)\r\n    setScoreAllButtonEnabled(true)\r\n    setEvaluateButtonEnabled(true)\r\n    setUploadButtonEnabled(false)\r\n      \r\n    console.log(\"finished upload\")\r\n    setUploading(false)\r\n    setSuccess(true)\r\n\r\n  }\r\n    const handleDownload = async () => {\r\n      disableIterationButtons()\r\n      const classifierManager = new ClassifierManager(dataProvider, trainingObject)\r\n      await classifierManager.initTrainPromise()\r\n      classifierManager.userDownloadClassifierSpecPromise()\r\n      enableIterationButtons()\r\n    }\r\n\r\n    \r\n    function constructTileState(dataURLs, cellToolTips) {\r\n        return {\r\n            unclassified: dataURLs.map((dataURL, idx) => {return {id: idx, address: dataURL, info: \"cellToolTips[idx]\"}}),  \r\n            positive: [],\r\n            negative: []\r\n        };\r\n    }\r\n\r\n    function onChange(sourceId, sourceIndex, targetIndex, targetId) {\r\n        if (targetId) {\r\n          const result = move(\r\n            tileState[sourceId],\r\n            tileState[targetId],\r\n            sourceIndex,\r\n            targetIndex\r\n          );\r\n          return setTileState({\r\n            ...tileState,\r\n            [sourceId]: result[0],\r\n            [targetId]: result[1]\r\n          });\r\n        }\r\n    \r\n        const result = swap(tileState[sourceId], sourceIndex, targetIndex);\r\n        return setTileState({\r\n          ...tileState,\r\n          [sourceId]: result\r\n        });\r\n      }\r\n    \r\n      const handleClickOpenFetchDropdownByImg = () => {\r\n        setOpenFetchDropdown(true);\r\n      };\r\n   \r\n      const handleCloseFetchDropdownByImg = () => {\r\n        setOpenFetchDropdown(false);\r\n      };\r\n\r\n      const imageDialogComponent = (item) => {\r\n              return (<Dialog\r\n                open={openViewCell}\r\n                onClose={handleCloseViewCell}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n                >\r\n                  <Image\r\n                      src = {item.address}  \r\n                    />\r\n                  \r\n                  <DialogActions>\r\n                  <Button onClick={handleCloseViewCell} color=\"primary\">\r\n                    Close\r\n                  </Button>\r\n                </DialogActions>\r\n              </Dialog>)\r\n      };\r\n      \r\n\r\n    return (\r\n       \r\n\r\n        <GridContextProvider onChange={onChange}>\r\n             \r\n        <div style={{ overflowX:\"hidden\", hieght: \"100%\", width: \"100%\" }}>\r\n      \r\n        <Row>\r\n        <Image src={logo} style={{marginLeft:\"10%\", height:\"30%\", width:\"25%\",position:\"relative\", maxHeight:\"125px\", marginBottom:\"1%\"}}></Image>\r\n       \r\n        <Col style = {{left:'40%'}}>\r\n        <div className={classes.root}>\r\n      <div className={classes.wrapper}>\r\n       <Tooltip title=\"Load Data\" aria-label=\"load data\">\r\n        <Fab\r\n          aria-label=\"save\"\r\n          color=\"primary\"\r\n          component=\"label\"\r\n          className={buttonClassname}\r\n          style =  {{height: '5vw', width: '5vw'}}\r\n        >\r\n        \r\n          {success ? <CheckIcon style =  {{ hieght: \"50%\", width: \"50%\"}}/> : <CloudUploadIcon style =  {{ hieght: \"50%\", width: \"50%\"}}/>}\r\n          <input  type=\"file\"\r\n                hidden webkitdirectory=\"true\"\r\n                mozdirectory=\"true\"\r\n                msdirectory=\"true\"\r\n                odirectory=\"true\"\r\n                directory=\"true\"\r\n                multiple\r\n                onChange = {(eventObject)=>{handleUpload(eventObject)}}  \r\n                disabled={!uploadButtonEnabled} \r\n               \r\n        />\r\n        </Fab>\r\n        </Tooltip>\r\n        {/* size={68}  */}\r\n        {uploading && <CircularProgress className={classes.fabProgress} style={{height: '6vw', width: '6vw', marginTop:\"4%\", marginRight:\"4%\"}}/>}\r\n      </div>  \r\n    </div>\r\n        </Col>\r\n        <Col style = {{left: '15%', marginTop: '.75%'}}>\r\n        <Tooltip title=\"Download\" aria-label=\"download\">\r\n        <Fab \r\n         aria-label=\"save\"\r\n         color=\"primary\"\r\n         component=\"label\"\r\n        disabled={!downloadButtonEnabled} \r\n        onClick={handleDownload}\r\n        style =  {{height: '5vw', width: '5vw'}}\r\n        > <SaveAltIcon style =  {{ hieght: \"50%\", width: \"50%\"}} /></Fab> \r\n        </Tooltip>\r\n        </Col>\r\n       \r\n        </Row>\r\n        <Row>\r\n        \r\n        <Grid container justify=\"center\" spacing={2} style={{marginBottom: 15}}>\r\n       \r\n        <Grid key={0} item>\r\n            <Button disabled={!fetchButtonEnabled} variant=\"contained\" aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClickFetchDropDown}>\r\n            Fetch\r\n            </Button>\r\n            <Menu\r\n            id=\"simple-menu\"\r\n            anchorEl={anchorEl}\r\n            keepMounted\r\n            open={Boolean(anchorEl)}\r\n            onClose={handleCloseFetchDropDown}\r\n            >\r\n            <MenuItem onClick={()=>handleClickFetchDropDownOption(\"random\")}>Random</MenuItem>\r\n            <MenuItem onClick={()=>handleClickFetchDropDownOption(\"positive\")}>Positive</MenuItem>\r\n            <MenuItem onClick={()=>handleClickFetchDropDownOption(\"negative\")}>Negative</MenuItem>\r\n            <MenuItem onClick={handleClickOpenFetchDropdownByImg}>By Image</MenuItem>\r\n           \r\n                <Dialog\r\n            open={openFetchDropdown}\r\n            onClose={handleCloseFetchDropdownByImg}\r\n        \r\n            >\r\n            <DialogTitle>Fetch By Image</DialogTitle>\r\n            <DialogContent>\r\n            <DialogContentText>\r\n                Select the image number you would like to fetch from. \r\n            </DialogContentText>\r\n            <form  noValidate >\r\n                <FormControl >\r\n                <InputLabel >Image</InputLabel>\r\n                <Select\r\n                    autoFocus>\r\n                    <MenuItem value=\"1\">1</MenuItem>\r\n                    <MenuItem value=\"2\">2</MenuItem>\r\n                    <MenuItem value=\"3\">3</MenuItem>\r\n                    <MenuItem value=\"4\" >4</MenuItem>\r\n                    <MenuItem value=\"5\" >5</MenuItem>\r\n                </Select>\r\n                </FormControl>\r\n            </form>\r\n            </DialogContent>\r\n            <DialogActions>\r\n            <Button onClick={handleCloseFetchDropdownByImg} color=\"primary\">\r\n                Close\r\n            </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n            \r\n            </Menu>\r\n    </Grid>\r\n\r\n\r\n        <Grid key={1} item>\r\n            {/* style = {{height: \"5vw\", width:\"10vw\", minHeight:2, maxHeight: 35, maxwidth: 50, fontSize: \"max(1.5vw, 20)\"}}  */}\r\n        <Button disabled={!trainButtonEnabled} variant=\"contained\" onClick={handleTrain}>Train</Button>\r\n        </Grid>\r\n\r\n        <Grid key={2} item>\r\n         {/* <Button disabled={!evaluateButtonEnabled} variant=\"contained\" onClick={()=>{}}>Evaluate</Button>  */}\r\n          {/* TODO: need to fix button disabled DONE*/}\r\n          {!evaluateButtonEnabled ? <Button disabled={!evaluateButtonEnabled} variant=\"contained\" onClick={()=>{}}>Evaluate</Button> : <Evaluate></Evaluate>}\r\n        </Grid>\r\n\r\n        <Grid key={3} item>\r\n        {/* <Button  disabled={!scoreAllButtonEnabled} variant=\"contained\" onClick={()=>{}}>Score All</Button> */}\r\n          {/* TODO: need to fix button disabled DONE*/}\r\n          \r\n          {!evaluateButtonEnabled ? <Button disabled={!evaluateButtonEnabled} onClick={handleClickOpenEvaulate}variant=\"contained\" onClick={()=>{}}>Score All</Button> : <ScoreAll></ScoreAll>}\r\n          <Dialog\r\n            open={openEvaulate}\r\n            TransitionComponent={Transition}\r\n            keepMounted\r\n            onClose={handleCloseEvaulate}>\r\n\r\n            <CloseIcon onClick = {handleCloseEvaulate} style={{position: 'absolute', right: '10px', top: '10px',}}></CloseIcon>  \r\n\r\n            <ConfusionMatrix></ConfusionMatrix>\r\n            \r\n          </Dialog>\r\n        </Grid>\r\n        \r\n    </Grid>\r\n    </Row>\r\n\r\n  \r\n        <div>\r\n        \r\n        \r\n        <label style = {{textAlign:\"left\", backgroundColor: 'white', paddingLeft: \"10%\", marginBottom:\"0.5%\", userSelect: \"none\"} }>Unclassified </label>\r\n      \r\n        <div>\r\n        <GridDropZone\r\n             className=\"dropzone \"\r\n            id=\"unclassified\"\r\n            boxesPerRow={8}\r\n            rowHeight={80}\r\n            style={{height: \"20vw\", maxHeight: 200, minHeight:150, marginBottom:10, marginLeft: \"10%\", width:\"80%\"}}\r\n          >   \r\n            {!fetching ? tileState.unclassified.map(item => (\r\n              <GridItem className= \"hoverTest\"  style={{height: \"20vw\", width: \"10vw\", minHeight:80, minWidth: 80, maxHeight: 105, maxWidth: 105, padding:10}} key={item.id}>\r\n                    {/* {imageDialogComponent} */}\r\n                <Button className=\"grid-item\" onClick = {handleClickOpenViewCell} >\r\n                    <div className=\"grid-item-content\"   style = {{backgroundImage:  `url(${item.address})`}} >\r\n                    <span className= \"hoverText\">{item.info}</span>  \r\n                               \r\n                </div>\r\n               \r\n                </Button>\r\n              </GridItem>\r\n              \r\n            )) : <CircularProgress style= {{height: '5vw', width: '5vw', marginTop: \"5%\", marginLeft: \"45%\"}}/>} \r\n        \r\n          </GridDropZone>\r\n         \r\n          </div>\r\n               \r\n        \r\n        <Row>\r\n       \r\n          <label style = {{textAlign:\"left\", backgroundColor: 'white', paddingLeft: \"11%\", userSelect: \"none\", marginBottom:\"0.5%\", marginTop:0} }>Positive</label> \r\n    \r\n        \r\n          <label style = {{textAlign:\"left\", backgroundColor: 'white', paddingRight: \"8%\", userSelect: \"none\", margin: \"auto\",  marginBottom:\"0.5%\", marginTop:0} }>Negative</label>\r\n       \r\n          </Row>\r\n         \r\n         <Row>\r\n\r\n          <GridDropZone\r\n            className=\"dropzone positive\"\r\n            id=\"positive\"\r\n            boxesPerRow={4}\r\n            rowHeight={80}\r\n            style={{height: \"20vw\", maxHeight: 200, minHeight:150}}\r\n          >\r\n            \r\n            {tileState.positive.map(item => (\r\n              <GridItem className= \"hoverTest\" style={{height:\"50vw\", width: \"10vw\", minHeight: 80, minWidth: 80, maxHeight: 205, maxWidth: 105, padding:10}} key={item.id}>\r\n                <div className=\"grid-item\"> \r\n                    <div className=\"grid-item-content\" style = {{backgroundImage: `url(${item.address})`}}>\r\n                    <span className= \"hoverText\">{item.info}</span>\r\n                        </div>  \r\n                </div>\r\n              </GridItem>\r\n            ))}\r\n          </GridDropZone>\r\n   \r\n      \r\n          <GridDropZone\r\n            className=\"dropzone negative\"\r\n            id=\"negative\"\r\n            boxesPerRow={4}\r\n            rowHeight= {80}\r\n            style={{height: \"20vw\", maxHeight: 200, minHeight:150}}\r\n          >\r\n            {tileState.negative.map(item => (\r\n              <GridItem className= \"hoverTest\" style={{height:\"10vw\", width: \"10vw\", minHeight: 80, minWidth: 80, maxHeight: 105, maxWidth: 105, padding: 10}} key={item.address}>\r\n                <div className=\"grid-item\">\r\n                <div className=\"grid-item-content\" style = {{backgroundImage: `url(${item.address})`}}>\r\n                <span className= \"hoverText\">{item.info}</span>\r\n                        </div>      \r\n                </div>\r\n              </GridItem>\r\n            ))}\r\n          </GridDropZone>\r\n\r\n     \r\n      \r\n        </Row>\r\n        </div>\r\n      \r\n \r\n    </div>\r\n    </GridContextProvider>\r\n\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default TestUIMVP; "],"sourceRoot":""}