{"version":3,"sources":["webpack://gatsby-test/./src/classes/ClassifierManager.js","webpack://gatsby-test/./src/classes/ImageHandler.js","webpack://gatsby-test/./src/classes/ImageProvider2.js","webpack://gatsby-test/./src/classes/imGridManager.js","webpack://gatsby-test/./node_modules/lodash/_baseValues.js","webpack://gatsby-test/./node_modules/lodash/includes.js","webpack://gatsby-test/./node_modules/lodash/isEqual.js","webpack://gatsby-test/./node_modules/lodash/isString.js","webpack://gatsby-test/./node_modules/lodash/values.js"],"names":["ClassifierManager","DataProvider","InitialTrainingSetObject","this","testConstructorInputPreconditions","InitialTrainingObject","classifierType","featuresToUse","trainingData","trainingLabels","TrainingSetObject","Classifier","undefined","Error","initTrainPromise","trainPromise","fetchUpToNCellPairsByClass","classType","N","sampledCellPairObjects","getNRandomObjs","testingData","map","cellPair","getRow","desiredLabel","predicted_labels","predict","filter","pair","index","appendToTrainingSetAndRetrainPromise","additionTrainingSetObject","getTrainingSetObject","userDownloadClassifierSpecPromise","DownloadModelPromise","ImageHandler","fileListObect","data_provider","getObjsToURLs","objects","urls","i","length","cur_ImageNum","ImageNumber","image_info","key","toString","getImagefromFile","images_seen","cords","getCordsforCellDisplay","ip","ImageProvider2","getDataURL","url","push","getImgUrl","object","images","getImagesfromFile","getDataUrl","console","log","images_path","returnAllImgFileNames","Promise","all","image_path","file","file_handler","findFile","filename","fileReaderPromiseImage","then","image","makeImage","UserUploadFileHandler","img","Image","src","img_info","box_dim","image_type","canvases","setDimensionsofImg","h","l","width","height","main_canvas","document","createElement","ctx","getContext","canID","color","canvas","createColorCanvas","globalCompositeOperation","img_channel","drawImage","x","y","toDataURL","fillStyle","fillRect","ImageGridManager","data_pairs","dataurls","classifications","getDataUrlFromImg","image_object","onload","crossOrigin","getNumberImages","getDataUrlByIndex","setImageClassByIndex","gridType","getAllIndexes","arr","val","indexes","indexOf","getPairsByClass","final","indices","setClassByIndexArray","arrayMap","module","exports","props","baseIndexOf","isArrayLike","isString","toInteger","values","nativeMax","Math","max","collection","value","fromIndex","guard","baseIsEqual","other","baseGetTag","isArray","isObjectLike","baseValues","keys"],"mappings":"8LAGMA,E,WACF,WAAYC,EAAcC,GAEtBC,KAAKC,kCAAkCH,EAAcC,GAErDC,KAAKF,aAAeA,EACpBE,KAAKE,sBAAwBH,EAE7B,IAAMI,EAAiBJ,EAAyBI,eAC1CC,EAAgBL,EAAyBK,cACzCC,EAAeN,EAAyBM,aACxCC,EAAiBP,EAAyBO,eAChDN,KAAKO,kBAAoB,CACrBJ,iBACAC,gBACAC,eACAC,kBAEJN,KAAKQ,WAAa,IAAIA,IAAWR,KAAKO,mB,2BAG1CN,kCAAA,SAAkCH,EAAcC,GAC5C,GAAoBU,MAAhBX,GAAyDW,MAA5BV,EAC7B,MAAM,IAAIW,MAAM,oEAEpB,QAA8CD,IAA1CV,EAAyBM,mBACmBI,IAA5CV,EAAyBO,qBACkBG,IAA3CV,EAAyBK,oBACmBK,IAA5CV,EAAyBI,eACzB,MAAM,IAAIO,MAAM,2DAEpB,GAAgD,uBAA5CX,EAAyBI,eACzB,MAAM,IAAIO,MAAM,kE,EAIxBC,iBAAA,WACI,OAAOX,KAAKQ,WAAWI,gB,EAI3BC,2BAAA,SAA2BC,EAAWC,GAAI,IAAD,OAErC,GAAkB,aAAdD,GAA0C,aAAdA,GAA0C,WAAdA,EACxD,MAAM,IAAIJ,MAAJ,+BAAyCI,EAAzC,iDAGV,IAAME,EAAyBhB,KAAKF,aAAamB,eAAeF,GAGhE,GAAkB,WAAdD,EACA,OAAOE,EAGX,IAAME,EAAcF,EAAuBG,KACvC,SAAAC,GAAQ,OAAI,EAAKtB,aAAauB,OAAO,cAAeD,MAGpDE,EAAe,EACF,YAAbR,IACAQ,EAAe,GAGnB,IAAMC,EAAmBvB,KAAKQ,WAAWgB,QAAQN,GAKjD,OAJ+BF,EAAuBS,QAClD,SAACC,EAAMC,GAAP,OAAiBJ,EAAiBI,KAAWL,M,EAOrDM,qCAAA,SAAqCC,GAIjC,GAHA7B,KAAKO,kBAAkBF,aAAvB,kBAA0CL,KAAKO,kBAAkBF,eAAjE,OAAkFwB,EAA0BxB,eAC5GL,KAAKO,kBAAkBD,eAAvB,kBAA4CN,KAAKO,kBAAkBD,iBAAnE,OAAsFuB,EAA0BvB,iBAE5GN,KAAKO,kBAAkBJ,iBAAmB0B,EAA0B1B,iBACnE,IAAUH,KAAKO,kBAAkBH,cAAeyB,EAA0BzB,eAEvE,MAAM,IAAIM,MAAM,sHACyBV,KAAKO,kBAAkBJ,eADhD,QACsEH,KAAKO,kBAAkBH,cAD7F,UAEQyB,EAA0B1B,eAFlC,QAEwD0B,EAA0BzB,eAK1G,OADAJ,KAAKQ,WAAa,IAAIA,IAAWR,KAAKO,mBAC/BP,KAAKQ,WAAWI,gB,EAG3BkB,qBAAA,WACI,OAAO9B,KAAKO,mB,EAGhBwB,kCAAA,WACI,OAAO/B,KAAKQ,WAAWwB,wB,iIC/FVC,E,WACjB,WAAYC,EAAeC,GAAgB,KAK3CC,cAL0C,mCAK1B,WAAeC,GAAf,qFACRC,EAAO,GACFC,EAAI,EAFD,YAEIA,EAAIF,EAAQG,QAFhB,wBAGJC,EAAeJ,EAAQE,GAAGG,YAC1BC,EAAa,GAORC,EAAMH,EAAaI,WAXpB,SAYgB7C,KAAK8C,iBAAiBL,GAZtC,cAYHE,EAZG,OAaH3C,KAAK+C,YAAYH,GAAOD,EAExBK,EAAQhD,KAAKmC,cAAcc,uBAAuBZ,EAAQE,IAC1DW,EAAK,IAAIC,IAAeR,EAAYK,GAhBjC,UAiBSE,EAAGE,aAjBZ,QAiBHC,EAjBG,OAkBPf,EAAKgB,KAAKD,GAlBH,QAEwBd,IAFxB,gDAoBJD,GApBI,iDAL0B,2DA4B1CiB,UA5B0C,mCA4B9B,WAAeC,GAAf,gFACJC,EAASzD,KAAK0D,kBAAkBF,GAChCN,EAAK,IAAIC,IAAeM,GAFpB,kBAGDP,EAAGS,cAHF,gDA5B8B,2DAkC1Cb,iBAlC0C,mCAkCvB,WAAeU,GAAf,yFACfI,QAAQC,IAAIL,GACRM,EAAc9D,KAAKmC,cAAc4B,sBAAsBP,GAF5C,SAIIQ,QAAQC,IAAIH,EAAY3C,KAAI,SAAA+C,GAC3C,IAAIC,EAAO,EAAKC,aAAaC,SAASH,EAAWI,UACjD,OAAO,EAAKF,aAAaG,uBAAuBJ,GAAMK,MAAM,SAAAC,GACxD,OAAO,EAAKC,UAAUD,UAPf,OAWf,IAPIhB,EAJW,OAUE,GACRlB,EAAI,EAAGA,EAAIkB,EAAOjB,OAAQD,WACxBuB,EAAYQ,SACnBR,EAAYvB,GAAGkC,MAAQhB,EAAOlB,GAbnB,yBAeRuB,GAfQ,gDAlCuB,sDACtC9D,KAAKoE,aAAe,IAAIO,IAAsBzC,GAC9ClC,KAAKmC,cAAgBA,EACrBnC,KAAK+C,YAAc,G,mBAgDvB2B,UAAA,SAAUD,GACN,IAAIG,EAAM,IAAIC,MAEd,OADAD,EAAIE,IAAML,EACHG,G,4ECvDMzB,E,WACjB,WAAY4B,EAAU/B,EAAYgC,EAAcC,QAAuB,IAAjDjC,MAAQ,SAAyC,IAArCgC,MAAU,SAA2B,IAAvBC,MAAa,UACzDjF,KAAK+E,SAAWA,EAChB/E,KAAKgF,QAAUA,EACfhF,KAAKiF,WAAaA,EAClBjF,KAAKgD,MAAQA,EACbhD,KAAKkF,SAAW,G,2BAGpBC,mBAAA,WAC4B,WAApBnF,KAAKiF,aACLjF,KAAKgF,QAAQI,EAAI,GACjBpF,KAAKgF,QAAQK,EAAI,IAEG,UAApBrF,KAAKiF,aACLjF,KAAKgF,QAAQK,EAAIrF,KAAK+E,SAAS,GAAGN,MAAMa,MACxCtF,KAAKgF,QAAQI,EAAIpF,KAAK+E,SAAS,GAAGN,MAAMc,S,EAGhDnC,WAAA,WACIpD,KAAKmF,qBACL,IAAIK,EAAcC,SAASC,cAAT,UAElBF,EAAYF,MAAQtF,KAAK+E,SAAS,GAAGN,MAAMa,MAC3CE,EAAYD,OAASvF,KAAK+E,SAAS,GAAGN,MAAMc,OAG5C,IAFA,IAAII,EAAMH,EAAYI,WAAW,MAExBrD,EAAI,EAAGA,EAAIvC,KAAK+E,SAASvC,OAAQD,IAAK,CAC3C,IAAIsD,EAAQ7F,KAAK+E,SAASxC,GAAGuD,MACzBC,EAASN,SAASC,cAAT,UACb1F,KAAKkF,SAASW,GAASE,EAG7B,IAAQxD,EAAI,EAAGA,EAAIvC,KAAK+E,SAASvC,OAAQD,IAAK,CACpCsD,EAAQ7F,KAAK+E,SAASxC,GAAGuD,MAAMjD,WACnC7C,KAAKgG,kBAAkBhG,KAAK+E,SAASxC,GAAGkC,MAAOoB,GAEpDF,EAAIM,yBAA2B,UAC/B,IAAS1D,EAAI,EAAGA,EAAIvC,KAAK+E,SAASvC,OAAQD,IAAK,CAC1C,IAAI2D,EAAclG,KAAK+E,SAASxC,GAChCoD,EAAIQ,UAAUnG,KAAKkF,SAASgB,EAAYJ,OAAQ9F,KAAKgD,MAAMoD,EAAGpG,KAAKgD,MAAMqD,EACzErG,KAAKgF,QAAQI,EAAGpF,KAAKgF,QAAQK,EAAG,EAAG,EAAGG,EAAYF,MAAOE,EAAYD,QAI5E,OADAI,EAAIM,yBAA2B,cACxBT,EAAYc,a,EAYpBN,kBAAA,SAAmBvB,EAAOqB,GAE1B,IAAIP,EAASd,EAAMc,OACfD,EAASb,EAAMa,MAEnBtF,KAAKkF,SAASY,GAAOR,MAAQA,EAC7BtF,KAAKkF,SAASY,GAAOP,OAASA,EAC9B,IAAII,EAAM3F,KAAKkF,SAASY,GAAOF,WAAW,MAC1CD,EAAIM,yBAAyB,cAC7BN,EAAIQ,UAAU1B,EAAQ,EAAG,GACzBkB,EAAIM,yBAAyB,WAC7BN,EAAIY,UAAYT,EAChBH,EAAIa,SAAS,EAAG,EAAGlB,EAAOC,GAC1BI,EAAIM,yBAAyB,e,iGCrE3BQ,E,WAIF,WAAYC,EAAYC,GAGtB,GAHiC,KAFnCC,gBAAkB,IAKXF,IAAeC,EAChB,MAAM,IAAIjG,MAAM,4DAGpB,GAAGgG,EAAWlE,SAAWmE,EAASnE,OAChC,MAAM,IAAI9B,MAAM,gEAGlBV,KAAK0G,WAAaA,EAClB1G,KAAK2G,SAAWA,EAEhB,IAAI,IAAIpE,EAAI,EAAGA,EAAIvC,KAAK0G,WAAWlE,OAAQD,IAC3CvC,KAAK4G,gBAAgBtD,KAAK,gB,EAKrBuD,kBAAP,SAAyBjC,GAEvB,IAAMmB,EAASN,SAASC,cAAc,UAChCC,EAAMI,EAAOH,WAAW,MAKxBkB,EAAe,IAAIjC,MAUzB,OATAiC,EAAaC,OAAU,WACnBpB,EAAIQ,UAAUW,EAAc,EAAG,IAInCA,EAAahC,IAAMF,EACnBkC,EAAaE,YAAc,YAEXjB,EAAOO,a,2BAOzBW,gBAAA,WACE,OAAOjH,KAAK0G,WAAWlE,Q,EAIzB0E,kBAAA,SAAmBvF,GACjB,OAAO3B,KAAK2G,SAAShF,I,EAGvBwF,qBAAA,SAAsBxF,EAAOyF,GAC3B,QAAa3G,IAAVkB,QAAoClB,IAAb2G,EACxB,MAAM,IAAI1G,MACT,qEAGH,IAAG,IAAW,CAAC,eAAgB,WAAY,YAAa0G,GAKtD,MAAM,IAAI1G,MACT,sDAA0D0G,EAAU,+CALrEpH,KAAK4G,gBAAgBjF,GAASyF,G,EAUlCC,cAAA,SAAcC,EAAKC,GAEjB,IADA,IAAIC,EAAU,GAAIjF,GAAK,GACgB,IAA/BA,EAAI+E,EAAIG,QAAQF,EAAKhF,EAAE,KAC3BiF,EAAQlE,KAAKf,GAEjB,OAAOiF,G,EAGTE,gBAAA,SAAiBN,GAEf,GAAG,IAAW,CAAC,eAAgB,WAAY,YAAaA,GAAU,CAGhE,IAFA,IAAMO,EAAQ,GACVC,EAAU5H,KAAKqH,cAAcrH,KAAK4G,gBAAiBQ,GAC/C7E,EAAI,EAAGA,EAAIqF,EAAQpF,OAAQD,IACjCoF,EAAMrE,KAAKtD,KAAK0G,WAAWkB,EAAQrF,KAErC,OAAOoF,EAGP,MAAM,IAAIjH,MACT,wB,EAKLmH,qBAAA,SAAsBT,EAAUE,GAC9B,IAAG,IAAW,CAAC,eAAgB,WAAY,YAAaF,GAMtD,MAAM,IAAI1G,MACT,uBAND,IAAI,IAAI6B,EAAI,EAAGA,EAAI+E,EAAI9E,OAAQD,IAC7BvC,KAAK4G,gBAAgBU,EAAI/E,IAAM6E,G,4BCzGzC,IAAIU,EAAW,EAAQ,OAkBvBC,EAAOC,QANP,SAAoBxE,EAAQyE,GAC1B,OAAOH,EAASG,GAAO,SAASrF,GAC9B,OAAOY,EAAOZ,Q,sBCdlB,IAAIsF,EAAc,EAAQ,OACtBC,EAAc,EAAQ,OACtBC,EAAW,EAAQ,OACnBC,EAAY,EAAQ,OACpBC,EAAS,EAAQ,OAGjBC,EAAYC,KAAKC,IA6CrBV,EAAOC,QAbP,SAAkBU,EAAYC,EAAOC,EAAWC,GAC9CH,EAAaP,EAAYO,GAAcA,EAAaJ,EAAOI,GAC3DE,EAAaA,IAAcC,EAASR,EAAUO,GAAa,EAE3D,IAAIpG,EAASkG,EAAWlG,OAIxB,OAHIoG,EAAY,IACdA,EAAYL,EAAU/F,EAASoG,EAAW,IAErCR,EAASM,GACXE,GAAapG,GAAUkG,EAAWjB,QAAQkB,EAAOC,IAAc,IAC7DpG,GAAU0F,EAAYQ,EAAYC,EAAOC,IAAc,I,sBCjDhE,IAAIE,EAAc,EAAQ,OAkC1Bf,EAAOC,QAJP,SAAiBW,EAAOI,GACtB,OAAOD,EAAYH,EAAOI,K,sBC/B5B,IAAIC,EAAa,EAAQ,OACrBC,EAAU,EAAQ,MAClBC,EAAe,EAAQ,OA2B3BnB,EAAOC,QALP,SAAkBW,GAChB,MAAuB,iBAATA,IACVM,EAAQN,IAAUO,EAAaP,IArBrB,mBAqB+BK,EAAWL,K,sBC1B1D,IAAIQ,EAAa,EAAQ,OACrBC,EAAO,EAAQ,MAgCnBrB,EAAOC,QAJP,SAAgBxE,GACd,OAAiB,MAAVA,EAAiB,GAAK2F,EAAW3F,EAAQ4F,EAAK5F","file":"4304c005f53b8d6546d8f3b17dcef3ab08f111cf-a23598e07b94b3ae986a.js","sourcesContent":["import {Classifier} from \"./Classifier\"\r\nimport _ from \"lodash\";\r\n\r\nclass ClassifierManager {\r\n    constructor(DataProvider, InitialTrainingSetObject) {\r\n        \r\n        this.testConstructorInputPreconditions(DataProvider, InitialTrainingSetObject)\r\n\r\n        this.DataProvider = DataProvider\r\n        this.InitialTrainingObject = InitialTrainingSetObject\r\n\r\n        const classifierType = InitialTrainingSetObject.classifierType\r\n        const featuresToUse = InitialTrainingSetObject.featuresToUse\r\n        const trainingData = InitialTrainingSetObject.trainingData\r\n        const trainingLabels = InitialTrainingSetObject.trainingLabels\r\n        this.TrainingSetObject = {\r\n            classifierType,\r\n            featuresToUse,\r\n            trainingData,\r\n            trainingLabels\r\n        }\r\n        this.Classifier = new Classifier(this.TrainingSetObject);\r\n    }\r\n\r\n    testConstructorInputPreconditions(DataProvider, InitialTrainingSetObject) {\r\n        if (DataProvider == undefined || InitialTrainingSetObject == undefined) {\r\n            throw new Error(\"Constructor Error on no dataprovider or no initialtrainingobject\")\r\n        }\r\n        if (InitialTrainingSetObject.trainingData === undefined ||\r\n            InitialTrainingSetObject.trainingLabels === undefined ||\r\n            InitialTrainingSetObject.featuresToUse === undefined ||\r\n            InitialTrainingSetObject.classifierType === undefined) {\r\n            throw new Error(\"Constructor Error on InitialTrainingData missing fields\")\r\n        }\r\n        if (InitialTrainingSetObject.classifierType !== \"LogisticRegression\") {\r\n            throw new Error(\"Constructor Error classifierType passed in is not implemented\")\r\n        }\r\n    }\r\n\r\n    initTrainPromise() {\r\n        return this.Classifier.trainPromise()\r\n    }\r\n\r\n\r\n    fetchUpToNCellPairsByClass(classType, N) {\r\n\r\n        if (classType !== \"positive\" && classType !== \"negative\" && classType !== \"random\") {\r\n            throw new Error(`Error on invalid class: got ${classType} but expected negative or positive or random}`)\r\n        }\r\n\r\n        const sampledCellPairObjects = this.DataProvider.getNRandomObjs(N)\r\n        \r\n\r\n        if (classType === \"random\") {\r\n            return sampledCellPairObjects\r\n        }\r\n\r\n        const testingData = sampledCellPairObjects.map(\r\n            cellPair => this.DataProvider.getRow('object_data', cellPair)\r\n        )\r\n\r\n        var desiredLabel = 0\r\n        if (classType == \"positive\") {\r\n            desiredLabel = 1\r\n        }\r\n\r\n        const predicted_labels = this.Classifier.predict(testingData)\r\n        const classedCellPairObjects = sampledCellPairObjects.filter(\r\n            (pair, index) => predicted_labels[index] === desiredLabel \r\n        )\r\n\r\n        return classedCellPairObjects\r\n    }\r\n\r\n\r\n    appendToTrainingSetAndRetrainPromise(additionTrainingSetObject) {\r\n        this.TrainingSetObject.trainingData = [...this.TrainingSetObject.trainingData, ...additionTrainingSetObject.trainingData]\r\n        this.TrainingSetObject.trainingLabels = [...this.TrainingSetObject.trainingLabels, ...additionTrainingSetObject.trainingLabels]\r\n\r\n        if (this.TrainingSetObject.classifierType !== additionTrainingSetObject.classifierType ||\r\n            !_.isEqual(this.TrainingSetObject.featuresToUse, additionTrainingSetObject.featuresToUse))\r\n            {\r\n                throw new Error(\"Error incompatible addition TrainingSetObject, needs same classifierType and featuresToUse:\\n\" + \r\n                                `Comparison: expected: ${this.TrainingSetObject.classifierType} and ${this.TrainingSetObject.featuresToUse}\\n` +\r\n                                `got: ${additionTrainingSetObject.classifierType} and ${additionTrainingSetObject.featuresToUse}`)\r\n            }\r\n\r\n\r\n        this.Classifier = new Classifier(this.TrainingSetObject);\r\n        return this.Classifier.trainPromise()\r\n    }\r\n\r\n    getTrainingSetObject() {\r\n        return this.TrainingSetObject\r\n    }\r\n\r\n    userDownloadClassifierSpecPromise() {\r\n        return this.Classifier.DownloadModelPromise()\r\n    }\r\n}\r\n\r\nexport {ClassifierManager}","import {ImageProvider2} from './ImageProvider2';\r\nimport UserUploadFileHandler from './UserUploadFileHandler'\r\nexport default class ImageHandler {\r\n    constructor(fileListObect, data_provider) {\r\n        this.file_handler = new UserUploadFileHandler(fileListObect)\r\n        this.data_provider = data_provider\r\n        this.images_seen = {};\r\n    }\r\n    getObjsToURLs = async function(objects) { // takes {ImageNumber: .. ObjectNumber: .. }\r\n        var urls = [];\r\n        for (var i = 0; i < objects.length; i++) {\r\n            var cur_ImageNum = objects[i].ImageNumber;\r\n            var image_info = [];\r\n            //if image is already seen, needs to be fixed to take care of the canvas\r\n            //objects\r\n            // if (this.images_seen.hasOwnProperty(cur_ImageNum.toString())) {\r\n            //      image_info = Object.assign({}, this.images_seen[cur_ImageNum.toString()]);\r\n            //  }\r\n           //  else {\r\n                 var key = cur_ImageNum.toString()\r\n                 image_info = await this.getImagefromFile(cur_ImageNum)\r\n                 this.images_seen[key] = image_info\r\n           //  }\r\n             var cords = this.data_provider.getCordsforCellDisplay(objects[i])\r\n             var ip = new ImageProvider2(image_info, cords)\r\n             var url = await ip.getDataURL()\r\n             urls.push(url)           \r\n         }\r\n         return urls;\r\n\r\n    }\r\n    getImgUrl = async function(object) { //takes {ImageNumber:...}\r\n        var images = this.getImagesfromFile(object);\r\n        var ip = new ImageProvider2(images)\r\n        return ip.getDataUrl()\r\n    }\r\n    // returns array of                \r\n    getImagefromFile = async function(object) {\r\n        console.log(object)\r\n        var images_path = this.data_provider.returnAllImgFileNames(object)\r\n\r\n        var images = await Promise.all(images_path.map(image_path => {\r\n            var file = this.file_handler.findFile(image_path.filename)\r\n            return this.file_handler.fileReaderPromiseImage(file).then( image =>{\r\n                return this.makeImage(image);\r\n            })\r\n         }))\r\n        var image_info = []\r\n        for (var i = 0; i < images.length; i++) {\r\n            delete images_path.filename\r\n            images_path[i].image = images[i]\r\n        }\r\n        return images_path\r\n    }\r\n    makeImage(image) {\r\n        var img = new Image()\r\n        img.src = image\r\n        return img\r\n    }\r\n}\r\nexport {ImageHandler}","\r\n\r\nexport default class ImageProvider2 {\r\n    constructor(img_info, cords = {}, box_dim = {}, image_type = 'object') { // {images_info : [{image : image channel: color} x 3] cord_x: x, cord_y: y }\r\n        this.img_info = img_info\r\n        this.box_dim = box_dim\r\n        this.image_type = image_type\r\n        this.cords = cords\r\n        this.canvases = {}\r\n\r\n    }\r\n    setDimensionsofImg() {\r\n        if (this.image_type === 'object') {  // if no cords\r\n            this.box_dim.h = 40;\r\n            this.box_dim.l = 40\r\n        }\r\n        if (this.image_type === 'image') {\r\n            this.box_dim.l = this.img_info[0].image.width\r\n            this.box_dim.h = this.img_info[0].image.height\r\n        }\r\n    }\r\n    getDataURL() {\r\n        this.setDimensionsofImg()\r\n        var main_canvas = document.createElement(`canvas`); \r\n    \r\n        main_canvas.width = this.img_info[0].image.width;\r\n        main_canvas.height = this.img_info[0].image.height;  \r\n        var ctx = main_canvas.getContext('2d');   \r\n\r\n        for (var i = 0; i < this.img_info.length; i++) {\r\n            var canID = this.img_info[i].color\r\n            var canvas = document.createElement(`canvas`)\r\n            this.canvases[canID] = canvas\r\n      }\r\n\r\n      for(var i = 0; i < this.img_info.length; i++) {\r\n            var canID = this.img_info[i].color.toString()\r\n            this.createColorCanvas(this.img_info[i].image, canID)\r\n       }\r\n       ctx.globalCompositeOperation = 'lighter';\r\n       for (var i = 0; i < this.img_info.length; i++) {\r\n            var img_channel = this.img_info[i];\r\n            ctx.drawImage(this.canvases[img_channel.color], this.cords.x, this.cords.y,\r\n            this.box_dim.h, this.box_dim.l, 0, 0, main_canvas.width, main_canvas.height)\r\n     \r\n       }\r\n     ctx.globalCompositeOperation = 'source-over';              \r\n     return main_canvas.toDataURL();\r\n }\r\n \r\n    // initialzeCanvases() {     \r\n    //     return this.images_info.map(image_info => { //images_info = [{image : image, channel: color, cord_x: x, cord_y: y, canvas: canvas}] {}}\r\n    //         var canvas = document.getElementById(\"canvas\");\r\n    //         var canvas_obj = {'canvas': canvas} \r\n    //         var a = Object.assign(image_info, canvas_obj);    \r\n    //         console.log(a)\r\n    //         return a;\r\n    //     })\r\n    // }\r\n    createColorCanvas (image, color) {\r\n    /* console.log(image) */\r\n    var height = image.height;\r\n    var width =  image.width;  \r\n    // image.crossOrigin = 'Anonymous';  \r\n    this.canvases[color].width = width;\r\n    this.canvases[color].height = height;\r\n    var ctx = this.canvases[color].getContext(\"2d\");\r\n    ctx.globalCompositeOperation='source-over'; \r\n    ctx.drawImage(image,  0, 0 )\r\n    ctx.globalCompositeOperation='multiply';\r\n    ctx.fillStyle = color;\r\n    ctx.fillRect(0, 0, width ,height);  \r\n    ctx.globalCompositeOperation='source-over'; \r\n    // var imagedata = ctx.getImageData(this.cords.x, this.cords.y, 40, 40)\r\n    // var data = imagedata.data\r\n    // var max = -1\r\n    // var obj = {}\r\n    // for (var i = 0; i < data.length; i += 4) {\r\n    //     if (data[i] > max) max = data[i]\r\n    //     if (!(color === 'red' && data[i] > 20)) \r\n    //         obj[key] = data[i]\r\n\r\n    // }\r\n    // for (var key in obj) {\r\n    //     var index = parseInt(key)\r\n    //     data[key] = ((data[key]) / max) * 255 \r\n    // }\r\n    // ctx.putImageData(new ImageData(data, 40, 40), this.cords.x, this.cords.y)\r\n }\r\n    //from https://stackoverflow.com/questions/10521978/html5-canvas-image-contrast\r\n    // contrastImage(imgData, contrast){  //input range [-100..100]\r\n    //     var d = imgData.data;\r\n    //     contrast = (contrast/100) + 1;  //convert to decimal & shift range: [0..2]\r\n    //     var intercept = 128 * (1 - contrast);\r\n    //     for(var i=0;i<d.length;i+=4){   //r,g,b,a\r\n    //         d[i] = d[i]*contrast + intercept;\r\n    //         d[i+1] = d[i+1]*contrast + intercept;\r\n    //         d[i+2] = d[i+2]*contrast + intercept;\r\n    //     }\r\n    //     return imgData;\r\n    // }yarn \r\n};\r\n\r\nexport {ImageProvider2}\r\n\r\n\r\n\r\n","\r\nimport _ from \"lodash\"; \r\n\r\nclass ImageGridManager {\r\n\r\n    classifications = []\r\n    \r\n    constructor(data_pairs, dataurls) {\r\n\r\n      \r\n      if (!data_pairs || !dataurls) {\r\n          throw new Error(\"Constructor Error on no data url or data pairs passed in\")\r\n      }\r\n\r\n      if(data_pairs.length !== dataurls.length){\r\n        throw new Error(\"Constructor Error on mismatched data pair and dataurl length\") \r\n      }\r\n\r\n      this.data_pairs = data_pairs\r\n      this.dataurls = dataurls\r\n  \r\n      for(var i = 0; i < this.data_pairs.length; i++){\r\n      this.classifications.push(\"unclassified\")\r\n      }\r\n\r\n    }\r\n\r\n    static getDataUrlFromImg(img) {\r\n      // Create canvas\r\n      const canvas = document.createElement('canvas');\r\n      const ctx = canvas.getContext('2d');\r\n      // Set width and height\r\n      //canvas.width = img.width;\r\n      //canvas.height = img.height;\r\n      //console.log(img)\r\n      const image_object = new Image()\r\n      image_object.onload = (() => {\r\n          ctx.drawImage(image_object, 0, 0)\r\n          //console.log(canvas.toDataURL())\r\n          //(canvas.toDataURL().length);\r\n      })\r\n      image_object.src = img;\r\n      image_object.crossOrigin = \"Anonymous\"\r\n      \r\n      var outputURL = canvas.toDataURL()\r\n      return outputURL\r\n      // Draw the image\r\n      //ctx.drawImage(img, 0, 0);\r\n\r\n    }\r\n\r\n    getNumberImages () {\r\n      return this.data_pairs.length\r\n    }\r\n\r\n\r\n    getDataUrlByIndex (index) {\r\n      return this.dataurls[index]\r\n    }\r\n\r\n    setImageClassByIndex (index, gridType) {\r\n      if(index === undefined || gridType === undefined){\r\n        throw new Error \r\n        (\"setImageClassByIndex Error must have 2 arguments: index and class\")\r\n      }\r\n\r\n      if(_.includes([\"unclassified\", \"positive\", \"negative\"], gridType)){\r\n        this.classifications[index] = gridType\r\n      }\r\n\r\n      else{\r\n        throw new Error\r\n        (\"setImageClassByIndex Error incorrect class to set:\" +\" \"+gridType+ \", must be: unclassified, positive, negative\")\r\n      }\r\n    }\r\n\r\n    //get indices of all occurences of gridType\r\n    getAllIndexes(arr, val) {\r\n      var indexes = [], i = -1;\r\n      while ((i = arr.indexOf(val, i+1)) != -1){\r\n          indexes.push(i);\r\n      }\r\n      return indexes;\r\n    }\r\n\r\n    getPairsByClass (gridType) {\r\n\r\n      if(_.includes([\"unclassified\", \"positive\", \"negative\"], gridType)){\r\n        const final = []\r\n        var indices = this.getAllIndexes(this.classifications, gridType)\r\n        for(var i = 0; i < indices.length; i++){\r\n          final.push(this.data_pairs[indices[i]])\r\n        }\r\n        return final\r\n      }\r\n      else {\r\n        throw new Error \r\n        (\"wrong class entered\")\r\n      }\r\n\r\n    }\r\n\r\n    setClassByIndexArray (gridType, arr) {\r\n      if(_.includes([\"unclassified\", \"positive\", \"negative\"], gridType)){\r\n        for(var i = 0; i < arr.length; i++){\r\n          this.classifications[arr[i]] = gridType\r\n        }\r\n      }\r\n      else {\r\n        throw new Error\r\n        (\"wrong class entered\")\r\n      }\r\n    }\r\n  //   render(){\r\n      \r\n    \r\n  //     const urls = [];\r\n  //     //construct list of dataUrls\r\n  //     urls.push(imGridManager.getDataUrlFromImg(Elephant))\r\n  //     urls.push(imGridManager.getDataUrlFromImg(cheetah))\r\n  //     urls.push(imGridManager.getDataUrlFromImg(puggy))\r\n  //     urls.push(imGridManager.getDataUrlFromImg(labrador))\r\n  //     urls.push(imGridManager.getDataUrlFromImg(cat))\r\n      \r\n  //     //console.log(urls[0])\r\n\r\n  //     const data_pairs = [{\r\n  //         \"ImageKey\": 2, \r\n  //         \"ObjectKey\" : 3\r\n  //          },\r\n  //          {\r\n  //           \"ImageKey\": 3,\r\n  //           \"ObjectKey\":4   \r\n  //          },\r\n  //          {\r\n  //           \"ImageKey\": 4,\r\n  //           \"ObkectKey\": 5  \r\n  //          },\r\n  //          {\r\n  //           \"ImageKey\":5,\r\n  //           \"ObjectKey\":6\r\n  //          },\r\n  //          {\r\n  //           \"ImageKey\": 6,\r\n  //           \"ObjectKey\": 7\r\n  //          }\r\n  //       ]\r\n\r\n  //     const classifications = []\r\n  //     var size = data_pairs.length\r\n      \r\n  //     //create classfication array and fill up indices up to size of \r\n  //     // data_pair array\r\n  //     for(var i = 0; i < size; i++){\r\n  //       classifications.push(\"unclassified\")\r\n  //     }\r\n  //     //console.log(classifications)\r\n      \r\n      \r\n  //     //test get_url_by_ID function\r\n  //     //const val = get_url_by_ID(2)\r\n  //     //console.log(val)\r\n    \r\n      \r\n\r\n  //     //test get_number_images function\r\n  //     //console.log(get_number_images(data_pairs))\r\n\r\n      \r\n  //     set_grid_prop(1, \"positive\")\r\n  //     set_grid_prop(2, \"negative\")\r\n  //     //console.log(classifications)\r\n\r\n  //     const get_pairs = (gridType) => {\r\n  //         const pairs = []\r\n  //         for(var i = 0; i < classifications.length; i++){\r\n  //             if(classifications[i] === gridType){\r\n  //                 pairs.push(data_pairs[i])\r\n  //             }\r\n  //         }\r\n  //         return pairs\r\n  //     }\r\n\r\n  //     console.log(get_pairs(\"unclassified\"))\r\n  //     return;\r\n  //     // return (\r\n  //     //    <div>\r\n  //     //        <p>imGridManager</p>\r\n  //     //    </div>\r\n         \r\n  //     //    );\r\n \r\n  //  }\r\n\r\n}\r\nexport {ImageGridManager} \r\n//ReactDOM.render(<imGridManager />, document.getElementById('root'));\r\n","var arrayMap = require('./_arrayMap');\n\n/**\n * The base implementation of `_.values` and `_.valuesIn` which creates an\n * array of `object` property values corresponding to the property names\n * of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the array of property values.\n */\nfunction baseValues(object, props) {\n  return arrayMap(props, function(key) {\n    return object[key];\n  });\n}\n\nmodule.exports = baseValues;\n","var baseIndexOf = require('./_baseIndexOf'),\n    isArrayLike = require('./isArrayLike'),\n    isString = require('./isString'),\n    toInteger = require('./toInteger'),\n    values = require('./values');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Checks if `value` is in `collection`. If `collection` is a string, it's\n * checked for a substring of `value`, otherwise\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * is used for equality comparisons. If `fromIndex` is negative, it's used as\n * the offset from the end of `collection`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object|string} collection The collection to inspect.\n * @param {*} value The value to search for.\n * @param {number} [fromIndex=0] The index to search from.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {boolean} Returns `true` if `value` is found, else `false`.\n * @example\n *\n * _.includes([1, 2, 3], 1);\n * // => true\n *\n * _.includes([1, 2, 3], 1, 2);\n * // => false\n *\n * _.includes({ 'a': 1, 'b': 2 }, 1);\n * // => true\n *\n * _.includes('abcd', 'bc');\n * // => true\n */\nfunction includes(collection, value, fromIndex, guard) {\n  collection = isArrayLike(collection) ? collection : values(collection);\n  fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n  var length = collection.length;\n  if (fromIndex < 0) {\n    fromIndex = nativeMax(length + fromIndex, 0);\n  }\n  return isString(collection)\n    ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n    : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n}\n\nmodule.exports = includes;\n","var baseIsEqual = require('./_baseIsEqual');\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nmodule.exports = isEqual;\n","var baseGetTag = require('./_baseGetTag'),\n    isArray = require('./isArray'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n}\n\nmodule.exports = isString;\n","var baseValues = require('./_baseValues'),\n    keys = require('./keys');\n\n/**\n * Creates an array of the own enumerable string keyed property values of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property values.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.values(new Foo);\n * // => [1, 2] (iteration order is not guaranteed)\n *\n * _.values('hi');\n * // => ['h', 'i']\n */\nfunction values(object) {\n  return object == null ? [] : baseValues(object, keys(object));\n}\n\nmodule.exports = values;\n"],"sourceRoot":""}