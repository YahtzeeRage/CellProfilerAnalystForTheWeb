{"version":3,"sources":["webpack://gatsby-test/./src/classes/ImageProvider.js","webpack://gatsby-test/./src/pages/RoughUI.js"],"names":["ImageProvider","getDataURLPromise","promise_images","cords","Promise","all","then","images","map","image","createRGB","rgb_images","tf","squeeze","color_image","createDataURL","canvas_at_index","document","createElement","width","height","ctx_at_index","getContext","temp_canvas","hasOwnProperty","drawImage","x","y","remove","toDataURL","img","resolve","reject","img_tf","newImg","Image","onload","src","React","anchorEl","setAnchorEl","dataProvider","setDataProvider","trainingObject","setTrainingObject","userUploadFileHandler","setUserUploadFileHandler","constructTileState","tileState","setTileState","imageGridManager","setImageGridManager","setLastFetchState","featuresToUse","setFeaturesToUseState","handleCloseFetchDropDown","fetchType","undefined","handleFetch","classifierManager","ClassifierManager","initTrainPromise","console","log","classedCellPairObjects","fetchUpToNCellPairsByClass","imageProvider","dataURLPromiseArray","CellPair","promiseImages","returnAllImgFileNames","ImageNumber","name","findFile","file","fileReaderPromiseImage","coords","getCordsforCellDisplay","dataURLs","newTileState","ImageGridManager","handleTrain","negativeIDs","negative","item","id","positiveIDs","positive","setClassByIndexArray","negativeCellPairs","getPairsByClass","positiveCellPairs","negativeObjectDataRows","cellPair","getRow","ObjectNumber","positiveObjectDataRows","trainingDataAddition","negativeLabels","Array","length","fill","positiveLabels","trainingLabelsAddition","concat","UpdatedTrainingObject","classifierType","trainingData","trainingLabels","clearedTileState","unclassified","handleUpload","eventObject","UserUploadFileHandler","uploadHandler","UploadHandler","getDataHandlerandStartingTrainingSet","uploadReturnObject","data_provider","trainingTable","training_data","training_table","trainingDataTable","getDataColumnsPaired","getTrainingLabels","initialTrainingData","row_object","totalFeatures","features","tempFeaturesToUse","filter","elem","includes","handleDownload","userDownloadClassifierSpecPromise","dataURL","idx","address","style","resize","Row","Col","logo","marginRight","IconButton","color","marginLeft","SaveAlt","Grid","container","justify","spacing","marginBottom","key","Button","variant","aria-controls","aria-haspopup","onClick","event","currentTarget","Menu","keepMounted","open","Boolean","onClose","MenuItem","component","type","hidden","webkitdirectory","mozdirectory","msdirectory","odirectory","directory","multiple","onChange","GridContext","sourceId","sourceIndex","targetIndex","targetId","result","move","swap","textAlign","backgroundColor","paddingLeft","className","GridDropZone","boxesPerRow","rowHeight","GridItem","backgroundImage","userSelect","paddingRight","margin"],"mappings":"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","file":"component---src-pages-rough-ui-js-539de14666862a42cd02.js","sourcesContent":["\r\nimport * as tf from '@tensorflow/tfjs'\r\nexport default class ImageProvider {\r\n    constructor() {\r\n        \r\n    }\r\n\r\n\r\ngetDataURLPromise(promise_images, cords = {}) {\r\n    return Promise.all(promise_images).then(images => {\r\n        return Promise.all( images.map(image => {\r\n            return this.createRGB(image)\r\n        }))\r\n    })\r\n    .then (rgb_images => {\r\n        return tf.stack(rgb_images,2).squeeze()\r\n    })\r\n    .then(color_image => {\r\n        return this.createDataURL(color_image, cords)\r\n    })\r\n      \r\n     \r\n}\r\n\r\ncreateDataURL (color_image, cords) {\r\n    var canvas_at_index = document.createElement(`canvas`);\r\n    canvas_at_index.width = 500;\r\n    canvas_at_index.height = 600;\r\n    var ctx_at_index = canvas_at_index.getContext(\"2d\");\r\n    var temp_canvas = document.createElement('canvas');  \r\n    return tf.browser.toPixels(color_image, temp_canvas).then(()=>{\r\n            if(cords.hasOwnProperty('x') && cords.hasOwnProperty('x') )\r\n               ctx_at_index.drawImage(temp_canvas, cords.x, cords.y, 40, 40, 0, 0, canvas_at_index.width, canvas_at_index.height)\r\n            else    \r\n                ctx_at_index.drawImage(temp_canvas, cords.x, cords.y, 40, 40, 0, 0, canvas_at_index.width, canvas_at_index.height)\r\n            temp_canvas.remove();  \r\n            return canvas_at_index.toDataURL();             \r\n    })\r\n }\r\n\r\ncreateRGB(img) {\r\n    return new Promise((resolve, reject)=> {\r\n        var img_tf;\r\n        var newImg = new Image();\r\n        newImg.onload = (()=> {\r\n            img_tf = tf.browser.fromPixels(newImg, 1)\r\n            resolve(img_tf);\r\n        })\r\n    newImg.src = img\r\n    })\r\n}}\r\nexport {ImageProvider}","import React from 'react';\r\nimport { Row, Col, Container} from \"reactstrap\";\r\nimport {Box, Button, Grid, IconButton, Menu, MenuItem}from '@material-ui/core'; \r\nimport logo from '../CPA_newlogo.png';\r\nimport {Image, Dropdown, DropdownButton} from 'react-bootstrap';\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\r\n\r\nimport UploadHandler from '../classes/UploadHandler'\r\nimport {ClassifierManager} from '../classes/ClassifierManager'\r\nimport {ImageProvider} from '../classes/ImageProvider.js';\r\nimport UserUploadFileHandler from '../classes/UserUploadFileHandler'\r\nimport {Classifier} from '../classes/Classifier'\r\nimport {ImageGridManager}  from '../classes/imGridManager'\r\n\r\nimport {\r\n    GridContextProvider,\r\n    GridDropZone,\r\n    GridItem,\r\n    swap,\r\n    move\r\n  } from \"react-grid-dnd\";\r\n  \r\n  import \"../dndstyles.css\";\r\n\r\n\r\n\r\nfunction TestUI(){\r\n    \r\n    \r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const [dataProvider, setDataProvider] = React.useState(null)\r\n\r\n    // var classifierManager = null;\r\n    // const [classifierManager, setClassifierManager] = React.useState(null)\r\n    const [trainingObject, setTrainingObject] = React.useState(null)\r\n    const [userUploadFileHandler, setUserUploadFileHandler] = React.useState(null)\r\n    const [tileState, setTileState] = React.useState( constructTileState([]) );\r\n    const [imageGridManager, setImageGridManager] = React.useState(null)\r\n    const [lastFetchState, setLastFetchState] = React.useState(null)\r\n    const [featuresToUse, setFeaturesToUseState] = React.useState(null)\r\n    const N = 20\r\n\r\n    const handleClickFetchDropDown = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseFetchDropDown = (fetchType) => {\r\n        setAnchorEl(null);\r\n        if (fetchType !== undefined) {\r\n            handleFetch(fetchType)\r\n        }\r\n    };\r\n\r\n    const handleFetch = async (fetchType) => {\r\n\r\n        const classifierManager = new ClassifierManager(dataProvider, trainingObject)\r\n        await classifierManager.initTrainPromise()\r\n\r\n        setLastFetchState(fetchType)\r\n        console.log(\"fetch \" + fetchType)\r\n        const classedCellPairObjects = classifierManager.fetchUpToNCellPairsByClass(fetchType, N)\r\n        const imageProvider = new ImageProvider();\r\n        var dataURLPromiseArray = null;\r\n        if (fetchType === \"random\") {\r\n            const dataURLPromiseArray = classedCellPairObjects.map(CellPair => {\r\n                const channelFileNames = dataProvider.returnAllImgFileNames(CellPair.ImageNumber)\r\n                const channelFiles = channelFileNames.map(name => { //Alternatively, we could have this.dp.returnAllImgPromisesPerImg({'ImageNumber': 2}, fh)\r\n                    return userUploadFileHandler.findFile(name)       // and abstract from 8-17 or more\r\n                })\r\n                const promiseImages = channelFiles.map(file => {\r\n                    const promiseImage =  userUploadFileHandler.fileReaderPromiseImage(file)\r\n                    return promiseImage;    \r\n                })\r\n                return Promise.all(promiseImages)\r\n                    .then(images => {\r\n                        const coords = dataProvider.getCordsforCellDisplay(CellPair)\r\n                        return imageProvider.getDataURLPromise(images, coords);   //The only method of imageprovider. If cords is left blank, it will produce a whole image. Should be\r\n                    })                                                //static class or function\r\n            })\r\n            const dataURLs = await Promise.all(dataURLPromiseArray)\r\n            const newTileState = constructTileState(dataURLs)\r\n            setTileState(newTileState)\r\n            console.log(newTileState)\r\n            console.log(dataURLs)\r\n            setImageGridManager(new ImageGridManager(classedCellPairObjects, dataURLs))\r\n\r\n            return\r\n        } \r\n\r\n        if (fetchType === \"positive\") {\r\n          dataURLPromiseArray = classedCellPairObjects.map(CellPair => {\r\n            const channelFileNames = dataProvider.returnAllImgFileNames(CellPair.ImageNumber)\r\n            const channelFiles = channelFileNames.map(name => { //Alternatively, we could have this.dp.returnAllImgPromisesPerImg({'ImageNumber': 2}, fh)\r\n                return userUploadFileHandler.findFile(name)       // and abstract from 8-17 or more\r\n            })\r\n            const promiseImages = channelFiles.map(file => {\r\n                const promiseImage =  userUploadFileHandler.fileReaderPromiseImage(file)\r\n                return promiseImage;    \r\n            })\r\n            return Promise.all(promiseImages)\r\n                .then(images => {\r\n                    const coords = dataProvider.getCordsforCellDisplay(CellPair)\r\n                    return imageProvider.getDataURLPromise(images, coords);   //The only method of imageprovider. If cords is left blank, it will produce a whole image. Should be\r\n                })                                                //static class or function\r\n        })\r\n        \r\n        const dataURLs = await Promise.all(dataURLPromiseArray)\r\n        const newTileState = constructTileState(dataURLs)\r\n        setTileState(newTileState)\r\n        console.log(newTileState)\r\n        console.log(dataURLs)\r\n        setImageGridManager(new ImageGridManager(classedCellPairObjects, dataURLs))\r\n        return\r\n      }\r\n\r\n      if (fetchType === 'negative') {\r\n        dataURLPromiseArray = classedCellPairObjects.map(CellPair => {\r\n          const channelFileNames = dataProvider.returnAllImgFileNames(CellPair.ImageNumber)\r\n          const channelFiles = channelFileNames.map(name => { //Alternatively, we could have this.dp.returnAllImgPromisesPerImg({'ImageNumber': 2}, fh)\r\n              return userUploadFileHandler.findFile(name)       // and abstract from 8-17 or more\r\n          })\r\n          const promiseImages = channelFiles.map(file => {\r\n              const promiseImage =  userUploadFileHandler.fileReaderPromiseImage(file)\r\n              return promiseImage;    \r\n          })\r\n          return Promise.all(promiseImages)\r\n              .then(images => {\r\n                  const coords = dataProvider.getCordsforCellDisplay(CellPair)\r\n                  return imageProvider.getDataURLPromise(images, coords);   //The only method of imageprovider. If cords is left blank, it will produce a whole image. Should be\r\n              })                                                //static class or function\r\n      })\r\n      \r\n      const dataURLs = await Promise.all(dataURLPromiseArray)\r\n      const newTileState = constructTileState(dataURLs)\r\n      setTileState(newTileState)\r\n      console.log(newTileState)\r\n      console.log(dataURLs)\r\n      setImageGridManager(new ImageGridManager(classedCellPairObjects, dataURLs))\r\n      return\r\n    }\r\n\r\n  }\r\n\r\n  const handleTrain = async () => {\r\n      const negativeIDs = tileState.negative.map(item => item.id)\r\n      const positiveIDs = tileState.positive.map(item => item.id)\r\n      console.log(negativeIDs, tileState)\r\n      imageGridManager.setClassByIndexArray('negative', negativeIDs)\r\n      imageGridManager.setClassByIndexArray('positive', positiveIDs)\r\n\r\n      const negativeCellPairs = imageGridManager.getPairsByClass('negative')\r\n      const positiveCellPairs = imageGridManager.getPairsByClass('positive')\r\n \r\n      const negativeObjectDataRows = negativeCellPairs.map(cellPair => dataProvider.getRow('object_data', {ImageNumber: cellPair.ImageNumber, ObjectNumber: cellPair.ObjectNumber}))\r\n      const positiveObjectDataRows = positiveCellPairs.map(cellPair => dataProvider.getRow('object_data', {ImageNumber: cellPair.ImageNumber, ObjectNumber: cellPair.ObjectNumber}))\r\n      const trainingDataAddition = [...negativeObjectDataRows, ...positiveObjectDataRows]\r\n\r\n      const negativeLabels = new Array(negativeObjectDataRows.length).fill(0)\r\n      const positiveLabels = new Array(positiveObjectDataRows.length).fill(1)\r\n      const trainingLabelsAddition = negativeLabels.concat(positiveLabels)\r\n\r\n      const UpdatedTrainingObject = {\r\n        classifierType: \"LogisticRegression\",\r\n        trainingData: [...trainingDataAddition, ...trainingObject.trainingData],\r\n        trainingLabels: [...trainingLabelsAddition, ...trainingObject.trainingLabels],\r\n        featuresToUse: featuresToUse\r\n      }\r\n      console.log(UpdatedTrainingObject)\r\n      setTrainingObject(UpdatedTrainingObject)\r\n      // const newClassifierManager = new ClassifierManager(dataProvider, UpdatedTrainingObject)\r\n      \r\n      \r\n      // setClassifierManager(newClassifierManager)\r\n\r\n      const clearedTileState = { unclassified: tileState.unclassified, positive: [], negative: []}\r\n      setTileState(clearedTileState)\r\n      console.log(\"finished train\")\r\n    \r\n  }\r\n\r\n    const handleUpload = async (eventObject) => {\r\n\r\n        const userUploadFileHandler = new UserUploadFileHandler(eventObject)\r\n        setUserUploadFileHandler(userUploadFileHandler)\r\n\r\n        const uploadHandler = new UploadHandler(eventObject)\r\n        const uploadReturnObject = await uploadHandler.getDataHandlerandStartingTrainingSet();\r\n\r\n        const dataProvider = uploadReturnObject.data_provider\r\n        setDataProvider(dataProvider)\r\n        const trainingTable = uploadReturnObject.training_data.training_table\r\n        const trainingDataTable = trainingTable.getDataColumnsPaired()\r\n\r\n        const trainingLabels = trainingTable.getTrainingLabels()\r\n        const initialTrainingData = trainingDataTable.map(row_object => {\r\n            const ObjectNumber = row_object['objectnum']\r\n            const ImageNumber = row_object['imagenum']\r\n            return dataProvider.getRow('object_data', {ObjectNumber, ImageNumber})\r\n        })\r\n        const totalFeatures = uploadReturnObject.training_data.features\r\n        const tempFeaturesToUse = totalFeatures.filter((elem)=>!elem.includes(\"Location\") && (elem !== \"ObjectNumber\") && (elem !== \"ImageNumber\"))\r\n        setFeaturesToUseState(tempFeaturesToUse)\r\n        console.log(\"finished data initialization\")\r\n        const initialTrainingObject = {\r\n            classifierType: \"LogisticRegression\",\r\n            trainingData: initialTrainingData,\r\n            trainingLabels: trainingLabels,\r\n            featuresToUse: tempFeaturesToUse\r\n        }\r\n        setTrainingObject(initialTrainingObject)\r\n        // console.log(\"starting initial training\")\r\n        // const newClassifierManager = new ClassifierManager(dataProvider, initialTrainingObject)\r\n        \r\n        // setClassifierManager(newClassifierManager)\r\n\r\n        \r\n\r\n        console.log(\"finished upload\")\r\n    }\r\n\r\n    const handleDownload = async () => {\r\n      const classifierManager = new ClassifierManager(dataProvider, trainingObject)\r\n      await classifierManager.initTrainPromise()\r\n      classifierManager.userDownloadClassifierSpecPromise()\r\n    }\r\n\r\n    function constructTileState(dataURLs) {\r\n        return {\r\n            unclassified: dataURLs.map((dataURL, idx) => {return {id: idx, address: dataURL}}),  \r\n            positive: [],\r\n            negative: []\r\n        };\r\n    }\r\n\r\n    function onChange(sourceId, sourceIndex, targetIndex, targetId) {\r\n        if (targetId) {\r\n          const result = move(\r\n            tileState[sourceId],\r\n            tileState[targetId],\r\n            sourceIndex,\r\n            targetIndex\r\n          );\r\n          return setTileState({\r\n            ...tileState,\r\n            [sourceId]: result[0],\r\n            [targetId]: result[1]\r\n          });\r\n        }\r\n    \r\n        const result = swap(tileState[sourceId], sourceIndex, targetIndex);\r\n        return setTileState({\r\n          ...tileState,\r\n          [sourceId]: result\r\n        });\r\n      }\r\n    \r\n    return (\r\n        <div style={{resize: 'horizontal'}}>\r\n    \r\n        <Row>\r\n       \r\n        \r\n        <Col>\r\n        <Image src={logo} style={{marginRight:\"40%\", height:'90px'}}></Image>\r\n        </Col>\r\n\r\n        <Col >\r\n        <IconButton style={{color: \"black\", marginLeft:\"50%\"}}> <SaveAltIcon /></IconButton> \r\n        </Col>\r\n\r\n\r\n        </Row>\r\n        <Row>\r\n        \r\n        <Grid container justify=\"center\" spacing={2} style={{marginBottom: 15}}>\r\n       \r\n        <Grid key={0} item>\r\n        {/* <DropdownButton variant=\"secondary\" title= \"Fetch\">\r\n        \r\n         <Dropdown.Item >Positive</Dropdown.Item>\r\n         <Dropdown.Item >Negative</Dropdown.Item>\r\n         <Dropdown.Item >Random</Dropdown.Item>\r\n        \r\n        </DropdownButton> */}\r\n            <Button variant=\"contained\" aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClickFetchDropDown}>\r\n            Fetch\r\n            </Button>\r\n            <Menu\r\n            id=\"simple-menu\"\r\n            anchorEl={anchorEl}\r\n            keepMounted\r\n            open={Boolean(anchorEl)}\r\n            onClose={handleCloseFetchDropDown}\r\n            >\r\n            <MenuItem onClick={()=>handleCloseFetchDropDown(\"random\")}>Random</MenuItem>\r\n            <MenuItem onClick={()=>handleCloseFetchDropDown(\"positive\")}>Positive</MenuItem>\r\n            <MenuItem onClick={()=>handleCloseFetchDropDown(\"negative\")}>Negative</MenuItem>\r\n            </Menu>\r\n    </Grid>\r\n\r\n\r\n        <Grid key={1} item>\r\n        <Button variant=\"contained\" onClick={handleTrain}>Train</Button>\r\n        </Grid>\r\n\r\n        <Grid key={2} item>\r\n        <Button variant=\"contained\" onClick={()=>{}}>Evaluate</Button>\r\n        </Grid>\r\n        <Grid key={3} item>\r\n        <Button variant=\"contained\" onClick={handleDownload}>Download</Button>\r\n        </Grid>\r\n        <Grid key={4} item>\r\n        <Button variant=\"contained\" component=\"label\" onClick={()=>console.log(\"Upload!\")}> \r\n            Upload\r\n            <input  type=\"file\"\r\n                    hidden webkitdirectory=\"true\"\r\n                    mozdirectory=\"true\"\r\n                    msdirectory=\"true\"\r\n                    odirectory=\"true\"\r\n                    directory=\"true\"\r\n                    multiple\r\n                    onChange = {(eventObject)=>{handleUpload(eventObject)}}   \r\n            />\r\n        </Button>\r\n        </Grid>\r\n    </Grid>\r\n    </Row>\r\n\r\n    <GridContextProvider onChange={onChange}>\r\n        <div>\r\n        \r\n        <label style = {{textAlign:\"left\", backgroundColor: 'white', paddingLeft: \"10%\", marginBottom: 0.5} }>Unclassified</label>\r\n        \r\n        <div className=\"topContainer\">\r\n       \r\n        <GridDropZone\r\n             className=\"dropzone \"\r\n            id=\"unclassified\"\r\n            boxesPerRow={8}\r\n            rowHeight={70}\r\n          >\r\n             \r\n            {tileState.unclassified.map(item => (\r\n              <GridItem key={item.id}>\r\n                <div className=\"grid-item\" >\r\n                    <div className=\"grid-item-content\" style = {{backgroundImage:  `url(${item.address})`}} >\r\n                        \r\n                        </div> \r\n                </div>\r\n              </GridItem>\r\n            ))}\r\n          </GridDropZone>\r\n          </div>\r\n        \r\n        <Row>\r\n     \r\n          <label style = {{textAlign:\"left\", backgroundColor: 'white', paddingLeft: \"11%\", userSelect: \"none\", marginBottom:\"0.5%\"} }>Positive</label> \r\n    \r\n        \r\n          <label style = {{textAlign:\"left\", backgroundColor: 'white', paddingRight: \"8%\", marginBottom: 0, userSelect: \"none\", margin: \"auto\",  marginBottom:\"0.5%\"} }>Negative</label>\r\n       \r\n          </Row>\r\n         \r\n         <Row>\r\n\r\n          <GridDropZone\r\n            className=\"dropzone positive\"\r\n            id=\"positive\"\r\n            boxesPerRow={4}\r\n            rowHeight={70}\r\n          >\r\n            \r\n            {tileState.positive.map(item => (\r\n              <GridItem key={item.id}>\r\n                <div className=\"grid-item\"> \r\n                    <div className=\"grid-item-content\" style = {{backgroundImage: `url(${item.address})`}}>\r\n                         \r\n                        </div>  \r\n                </div>\r\n              </GridItem>\r\n            ))}\r\n          </GridDropZone>\r\n   \r\n      \r\n          <GridDropZone\r\n            className=\"dropzone negative\"\r\n            id=\"negative\"\r\n            boxesPerRow={4}\r\n            rowHeight={70}\r\n          >\r\n            {tileState.negative.map(item => (\r\n              <GridItem key={item.id}>\r\n                <div className=\"grid-item\">\r\n                <div className=\"grid-item-content\" style = {{backgroundImage: `url(${item.address})`}}>\r\n                        \r\n                        </div>      \r\n                </div>\r\n              </GridItem>\r\n            ))}\r\n          </GridDropZone>\r\n\r\n     \r\n      \r\n        </Row>\r\n        </div>\r\n      </GridContextProvider>\r\n \r\n    </div>\r\n\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default TestUI; "],"sourceRoot":""}