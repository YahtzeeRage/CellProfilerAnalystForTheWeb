{"version":3,"sources":["webpack://gatsby-test/./src/classes/ImageProvider2.js","webpack://gatsby-test/./src/classes/ImageHandler.js","webpack://gatsby-test/./src/classes/UploadHandler.js","webpack://gatsby-test/./src/pages/old_index.js","webpack://gatsby-test/./src/jones.jpg"],"names":["ImageProvider2","options","box_dim","x","y","image_type","cords","this","canvases","brighten","canvas","ctx","imagedata","getImageData","height","width","data","color_index","ignore_pixels","max_colors","min_colors","colors_to_change","i","length","j","color_current","push","max","pixels_to_change","putImageData","ImageData","getDataURL","img_info","image","main_canvas","document","createElement","h","l","getContext","canID","color","toString","createColorCanvas","globalCompositeOperation","img_channel","drawImage","toDataURL","fillStyle","fillRect","ImageHandler","fileListObect","data_provider","getObjsToURLs","objects","urls","cur_ImageNum","ImageNumber","image_info","getImagefromFile","getCordsforCellDisplay","ip","url","getImgUrl","object","getImagesfromFile","getDataUrl","console","log","images_path","returnAllImgFileNames","Promise","all","map","image_path","file","file_handler","findFile","filename","fileReaderPromiseImage","then","makeImage","images","UserUploadFileHandler","img","Image","src","UploadHandler","fileListObject","sliceArrayByValue","array","value1","value2","index1","indexOf","index2","error","slice","basicPapaConfig","worker","skipEmptyLines","dynamicTyping","getDataHandlerandStartingTrainingSet","file_objects","getFiles","getText","text_data","column_lines","getColumnLines","dp","DataProvider","tt","TrainingTable","file_name","file_object","name","endsWith","PapaParser","papaTextfromCSV","fileReaderPromiseText","column_lines_txt","data_columns","split","e","trim","object_column_lines","image_column_lines","React","anchorEl","setAnchorEl","dataProvider","setDataProvider","trainingObject","setTrainingObject","setFileListObject","constructTileState","jones","tileState","setTileState","imageGridManager","setImageGridManager","setLastFetchState","featuresToUse","setFeaturesToUseState","fetchButtonEnabled","setFetchButtonEnabled","trainButtonEnabled","setTrainButtonEnabled","evaluateButtonEnabled","downloadButtonEnabled","setDownloadButtonEnabled","uploadButtonEnabled","setUploadButtonEnabled","handleCloseFetchDropDown","fetchType","undefined","handleFetch","disableIterationButtons","enableIterationButtons","unclassified","positive","negative","classifierManager","ClassifierManager","initTrainPromise","classedCellPairObjects","fetchUpToNCellPairsByClass","ih","dataURLS","newTileState","ImageGridManager","handleTrain","negativeIDs","item","id","positiveIDs","setClassByIndexArray","negativeCellPairs","getPairsByClass","positiveCellPairs","negativeObjectDataRows","cellPair","getRow","ObjectNumber","positiveObjectDataRows","trainingDataAddition","negativeLabels","Array","fill","positiveLabels","trainingLabelsAddition","concat","UpdatedTrainingObject","classifierType","trainingData","trainingLabels","clearedTileState","handleUpload","uploadHandler","uploadReturnObject","getObjsPerImg","trainingTable","training_data","training_table","trainingDataTable","getDataColumnsPaired","getTrainingLabels","initialTrainingData","row_object","totalFeatures","features","tempFeaturesToUse","filter","elem","includes","handleDownload","userDownloadClassifierSpecPromise","dataURLs","dataURL","idx","address","style","resize","logo","marginRight","marginLeft","onChange","sourceId","sourceIndex","targetIndex","targetId","result","move","swap","container","justify","spacing","marginBottom","key","disabled","variant","aria-controls","aria-haspopup","onClick","event","currentTarget","keepMounted","open","Boolean","onClose","component","type","hidden","webkitdirectory","mozdirectory","msdirectory","odirectory","directory","multiple","eventObject","textAlign","backgroundColor","paddingLeft","className","boxesPerRow","rowHeight","backgroundImage","userSelect","paddingRight","margin"],"mappings":"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","file":"component---src-pages-old-index-js-eb71c84b4aa3ea8f1bae.js","sourcesContent":["\r\nexport default class ImageProvider2 {\r\n    constructor(options = {box_dim : {x: 40, y: 40}, image_type : 'object', cords : {}}) { // {images_info : [{image : image channel: color} x 3] cord_x: x, cord_y: y }\r\n        this.box_dim = options.box_dim\r\n        this.image_type = options.image_type\r\n        this.cords = options.cords\r\n        this.canvases = {}\r\n\r\n    }\r\n    brighten(canvas, ctx) {\r\n        var imagedata = ctx.getImageData(0, 0, canvas.height, canvas.width)\r\n        var data = imagedata.data\r\n        var color_index = ['red','green','blue']\r\n        var ignore_pixels = [15, 15, 0]\r\n        var max_colors = [-1, -1, -1]\r\n        var min_colors = [256, 256, 256]\r\n        var colors_to_change =[[], [],[]]\r\n        for (var i = 0; i < color_index.length; i++) \r\n            colors_to_change[color_index[i]] = []\r\n        for (var i = 0; i < data.length; i += 4) {\r\n            for (var j = 0; j < color_index.length; j++) {\r\n                var color_current = data[i + j]\r\n                max_colors[j] = max_colors[j] < color_current ? color_current : max_colors[j]\r\n                min_colors[j] = min_colors[j] > color_current ? color_current : min_colors[j]\r\n                  if (color_current > ignore_pixels[j]) {\r\n                      colors_to_change[j].push(i+j)\r\n                }\r\n        } \r\n        }\r\n        var max = -1;\r\n        for (var i = 0; i < 3; i++) {\r\n            if (max_colors[i] > max)  max = max_colors[i] \r\n        } \r\n        // for (var i = 0; i < data.length; i += 4) {\r\n        //     for (var j = 0; j < color_index.length; j++) {\r\n        //         if (data[i+j] > ignore_pixels[j]) {\r\n        //             data[i+j] = (data[i+j] / max) * 255\r\n        //         }\r\n        // } \r\n        // }\r\n        for (var i = 0; i < color_index.length; i++) {\r\n        var pixels_to_change = colors_to_change[i]    \r\n        for (var j = 0; j < pixels_to_change.length ; j++) {\r\n            data[pixels_to_change[j]] = (data[pixels_to_change[j]] / max) * 255\r\n        }\r\n  }\r\n        ctx.putImageData(new ImageData(data, imagedata.width, imagedata.height), 0, 0)\r\n    }\r\n    getDataURL(img_info) {\r\n        if (this.image_type === 'image') {\r\n            this.box_dim.x = img_info[0].image.width\r\n            this.box_dim.y = img_info[0].image.height\r\n        }\r\n        var main_canvas = document.createElement(`canvas`); \r\n    \r\n        main_canvas.width = this.box_dim.h;\r\n        main_canvas.height = this.box_dim.l;  \r\n        var ctx = main_canvas.getContext('2d');   \r\n\r\n        for (var i = 0; i < img_info.length; i++) {\r\n            var canID = img_info[i].color\r\n            var canvas = document.createElement(`canvas`)\r\n            this.canvases[canID] = canvas\r\n      }\r\n      for(var i = 0; i < img_info.length; i++) {\r\n            var canID = img_info[i].color.toString()\r\n            this.createColorCanvas(img_info[i].image, canID)\r\n       }\r\n       ctx.globalCompositeOperation = 'lighter';\r\n       for (var i = 0; i < img_info.length; i++) {\r\n            var img_channel = img_info[i];\r\n            if (this.image_type === 'whole') {\r\n                ctx.drawImage(this.canvases[img_channel.color], 0, 0) \r\n            }\r\n            ctx.drawImage(this.canvases[img_channel.color], this.cords.x, this.cords.y,\r\n            this.box_dim.x, this.box_dim.y, 0, 0, main_canvas.width, main_canvas.height)\r\n       }\r\n     ctx.globalCompositeOperation = 'source-over';     \r\n    this.brighten(main_canvas, ctx)       \r\n     return main_canvas.toDataURL();\r\n }\r\n \r\n    createColorCanvas (image, color) {\r\n    /* console.log(image) */\r\n    var height = image.height;\r\n    var width =  image.width;  \r\n    // image.crossOrigin = 'Anonymous';  \r\n    this.canvases[color].width = width;\r\n    this.canvases[color].height = height;\r\n    var ctx = this.canvases[color].getContext(\"2d\");\r\n    ctx.globalCompositeOperation='source-over'; \r\n    ctx.drawImage(image,  0, 0 )\r\n    ctx.globalCompositeOperation='multiply';\r\n    ctx.fillStyle = color;\r\n    ctx.fillRect(0, 0, width ,height);  \r\n    ctx.globalCompositeOperation='source-over'; \r\n }\r\n    //from https://stackoverflow.com/questions/10521978/html5-canvas-image-contrast\r\n    // contrastImage(imgData, contrast){  //input range [-100..100]\r\n    //     var d = imgData.data;\r\n    //     contrast = (contrast/100) + 1;  //convert to decimal & shift range: [0..2]\r\n    //     var intercept = 128 * (1 - contrast);\r\n    //     for(var i=0;i<d.length;i+=4){   //r,g,b,a\r\n    //         d[i] = d[i]*contrast + intercept;\r\n    //         d[i+1] = d[i+1]*contrast + intercept;\r\n    //         d[i+2] = d[i+2]*contrast + intercept;\r\n    //     }\r\n    //     return imgData;\r\n    // }yarn \r\n};\r\n\r\nexport {ImageProvider2}\r\n\r\n\r\n\r\n","import {ImageProvider2} from './ImageProvider2';\r\nimport UserUploadFileHandler from './UserUploadFileHandler'\r\nexport default class ImageHandler {\r\n    \r\n    constructor(fileListObect, data_provider) {\r\n        this.file_handler = new UserUploadFileHandler(fileListObect)\r\n        this.data_provider = data_provider\r\n    }\r\n\r\n    getObjsToURLs = async function(objects) { // takes {ImageNumber: .. ObjectNumber: .. }\r\n        var urls = [];\r\n        for (var i = 0; i < objects.length; i++) {\r\n            var cur_ImageNum = objects[i].ImageNumber;\r\n            var image_info = [];\r\n            var key = cur_ImageNum.toString()\r\n            image_info = await this.getImagefromFile(cur_ImageNum)\r\n             var cords = this.data_provider.getCordsforCellDisplay(objects[i])\r\n             var ip = new ImageProvider2({cords: cords})\r\n             var url = await ip.getDataURL(image_info)\r\n             urls.push(url)           \r\n         }\r\n         return urls;\r\n\r\n    }\r\n    getImgUrl = async function(object) { //takes {ImageNumber:...}\r\n        var image_info = this.getImagesfromFile(object);\r\n        var ip = new ImageProvider2({image_type: 'whole'})\r\n        return ip.getDataUrl(image_info)\r\n    }\r\n    // returns array of                \r\n    getImagefromFile = async function(object) {\r\n        console.log(object)\r\n        var images_path = this.data_provider.returnAllImgFileNames(object)\r\n\r\n        var images = await Promise.all(images_path.map(image_path => {\r\n            var file = this.file_handler.findFile(image_path.filename)\r\n            return this.file_handler.fileReaderPromiseImage(file).then( image =>{\r\n                return this.makeImage(image);\r\n            })\r\n         }))\r\n        var image_info = []\r\n        for (var i = 0; i < images.length; i++) {\r\n            delete images_path.filename\r\n            images_path[i].image = images[i]\r\n        }\r\n        return images_path\r\n    }\r\n    makeImage(image) {\r\n        var img = new Image()\r\n        img.src = image\r\n        return img\r\n    }\r\n}\r\nexport {ImageHandler}","//import DataUtils from \"./DataUtils\";\r\nimport PapaParser from \"./PapaParser.js\";\r\nimport UserUploadFileHandler from \"./UserUploadFileHandler.js\";\r\nimport _ from \"lodash\";                                                                                                                                                                                                         \r\nimport DataProvider from \"./DataProvider.js\";\r\nimport TrainingTable from \"./TrainingTable.js\";\r\nimport { CollectionsOutlined } from \"@material-ui/icons\";\r\nexport default class UploadHandler {\r\n\r\n    constructor(fileListObject) {\r\n        this.fileListObject = fileListObject\r\n    }\r\n    // TODO\r\n    // getProperties(file_handler) {\r\n\r\n    // }\r\n    sliceArrayByValue = function (array, value1, value2) {\r\n        const index1 = array.indexOf(value1);\r\n        const index2 = array.indexOf(value2);\r\n      \r\n        if (value1 === -1 || value2 === -1) {\r\n            console.error(\"Values not found to slice\");\r\n            return null;\r\n        }\r\n      \r\n        return array.slice(index1, index2);\r\n      }\r\n\r\n    basicPapaConfig = {\r\n        worker: true,\r\n        skipEmptyLines: true,\r\n        dynamicTyping: true\r\n    }\r\n    getFiles() {\r\n        var file_names = [\r\n            \"example_SETUP.SQL\",\r\n            \"per_object.csv\",\r\n            \"per_image.csv\",\r\n            \"MyTrainingSet.txt\"\r\n        ]\r\n        var file_handlers = [];\r\n        var i = 0;\r\n        var file_handler = new UserUploadFileHandler(this.fileListObject)\r\n        return  file_names.map(file_name => {\r\n                var file = file_handler.findFile(file_name)\r\n                return {'file': file, 'name' : file_name};\r\n            })\r\n    }\r\n\r\n     \r\n    getText(file_objects) {\r\n        return Promise.all( file_objects.map( file_object => {\r\n            if (file_object.name.endsWith(\".csv\") || file_object.name.endsWith(\".txt\")) {\r\n                var papa_parser = new PapaParser();\r\n\r\n                return papa_parser.papaTextfromCSV(file_object);\r\n            }\r\n            else {\r\n                var file_handler = new UserUploadFileHandler(this.fileListObject)\r\n                console.log(file_object)\r\n                return file_handler.fileReaderPromiseText(file_object.file);\r\n                \r\n            }\r\n        }))\r\n    }\r\n        //return Promise.all([this.fileReaderPromiseText(fileListObject, setup_name).split('\\n').map(e=>e.trim()),\r\n    getColumnLines(column_lines_txt) {\r\n        var data_columns = [] \r\n        var column_lines = column_lines_txt.split('\\n').map(e=>e.trim())\r\n        const object_column_lines = this.sliceArrayByValue(\r\n            column_lines,\r\n            \"CREATE TABLE per_object (\", \r\n            \"PRIMARY KEY  (ImageNumber,ObjectNumber)\"\r\n        );\r\n        data_columns.push(object_column_lines.map((name)=>name.split(' ')[0]).slice(1));\r\n        const image_column_lines = this.sliceArrayByValue(\r\n            column_lines,\r\n            \"CREATE TABLE per_image (\", \r\n            \"PRIMARY KEY  (ImageNumber)\"\r\n        );\r\n        data_columns.push(image_column_lines.map((name)=>name.split(' ')[0]).slice(1));\r\n        data_columns.push(\"label imagenum objectnum x y\".split(\" \"));\r\n        return data_columns\r\n    }\r\n    getDataHandlerandStartingTrainingSet = async function() {\r\n        var data_types = [\r\n            'column_lines',\r\n            'object_data',\r\n            'image_data',\r\n            'training_data'\r\n        ]  \r\n\r\n        var data = [];\r\n        var file_objects = this.getFiles();\r\n        var text_data = await this.getText(file_objects);\r\n        var column_lines = this.getColumnLines(text_data[0]);\r\n        // console.log(text_data[1])\r\n        // console.log(column_lines[0])\r\n        var dp = new DataProvider({'object_data' : text_data[1], 'image_data' : text_data[2], \r\n                                       'object_columns' : column_lines[0], 'image_columns' : column_lines[1]})\r\n        var tt = new TrainingTable( text_data[3].slice(1) , column_lines[2])\r\n        return {'data_provider' : dp, 'training_data' : {'features' : column_lines[0],  'training_table' :  tt}}\r\n\r\n\r\n        // var image_data = text_data[2].map(data_row=>{ return _.zipObject(column_lines[1], data_row)})\r\n        // var object_data = text_data[1].map(data_row=>{ return _.zipObject(column_lines[0], data_row)})\r\n        // var training_data = text_data[3].map(data_row=>{ return _.zipObject(column_lines[2], data_row)})\r\n\r\n \r\n\r\n\r\n    }\r\n\r\n}\r\nexport {UploadHandler}\r\n","import React from 'react';\r\nimport { Row, Col, Container} from \"reactstrap\";\r\nimport {Box, Button, Grid, IconButton, Menu, MenuItem}from '@material-ui/core'; \r\nimport logo from '../CPA_newlogo.png';\r\nimport {Image, Dropdown, DropdownButton} from 'react-bootstrap';\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\r\n\r\nimport UploadHandler from '../classes/UploadHandler'\r\nimport {ClassifierManager} from '../classes/ClassifierManager'\r\nimport {ImageGridManager}  from '../classes/imGridManager'\r\nimport {ImageHandler}  from '../classes/ImageHandler'\r\nimport jones from '../jones.jpg'\r\nimport {\r\n    GridContextProvider,\r\n    GridDropZone,\r\n    GridItem,\r\n    swap,\r\n    move\r\n  } from \"react-grid-dnd\";\r\n  \r\n  import \"../dndstyles.css\";\r\n\r\n\r\n\r\nfunction TestUI(){\r\n    \r\n    \r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const [dataProvider, setDataProvider] = React.useState(null)\r\n\r\n    // var classifierManager = null;\r\n    // const [classifierManager, setClassifierManager] = React.useState(null)\r\n    const [trainingObject, setTrainingObject] = React.useState(null)\r\n    const [fileListObject, setFileListObject] = React.useState(null)\r\n    const [tileState, setTileState] = React.useState( constructTileState([jones,jones , jones]) );\r\n    const [imageGridManager, setImageGridManager] = React.useState(null)\r\n    const [lastFetchState, setLastFetchState] = React.useState(null)\r\n    const [featuresToUse, setFeaturesToUseState] = React.useState(null)\r\n\r\n    const [fetchButtonEnabled, setFetchButtonEnabled] = React.useState(false)\r\n    const [trainButtonEnabled, setTrainButtonEnabled] = React.useState(false)\r\n    const [evaluateButtonEnabled, setEvaluateButtonEnabled] = React.useState(false)\r\n    const [downloadButtonEnabled, setDownloadButtonEnabled] = React.useState(false)\r\n    const [uploadButtonEnabled, setUploadButtonEnabled] = React.useState(true)\r\n    const N = 20\r\n\r\n    const handleClickFetchDropDown = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseFetchDropDown = (fetchType) => {\r\n        setAnchorEl(null);\r\n        if (fetchType !== undefined) {\r\n            handleFetch(fetchType)\r\n        }\r\n    };\r\n\r\n    const disableIterationButtons = () => {\r\n      setFetchButtonEnabled(false)\r\n      setTrainButtonEnabled(false)\r\n      setDownloadButtonEnabled(false)\r\n    }\r\n    const enableIterationButtons = () => {\r\n      setFetchButtonEnabled(true)\r\n      setTrainButtonEnabled(true)\r\n      setDownloadButtonEnabled(true)\r\n    }\r\n\r\n    const handleFetch = async (fetchType) => {\r\n      disableIterationButtons()\r\n      const emptyTileState = { unclassified: [], positive: [], negative: []}\r\n      setTileState(emptyTileState)\r\n      const classifierManager = new ClassifierManager(dataProvider, trainingObject)\r\n      await classifierManager.initTrainPromise()\r\n      setLastFetchState(fetchType)\r\n      \r\n      var classedCellPairObjects = classifierManager.fetchUpToNCellPairsByClass(fetchType, N)\r\n      // dataProvider.getObjsPerImg(60)\r\n     // classedCellPairObjects.splice(20, 800)\r\n     // console.log(classedCellPairObjects)\r\n      classifierManager.fetchUpToNCellPairsByClass(fetchType, N)\r\n      const ih = new ImageHandler(fileListObject, dataProvider)\r\n      const dataURLS = await ih.getObjsToURLs(classedCellPairObjects)\r\n      const newTileState = constructTileState(dataURLS)\r\n      setTileState(newTileState)\r\n      setImageGridManager(new ImageGridManager(classedCellPairObjects, dataURLS))\r\n      enableIterationButtons()\r\n      return\r\n  }\r\n\r\n  const handleTrain = async () => {\r\n\r\n    disableIterationButtons()\r\n\r\n      const negativeIDs = tileState.negative.map(item => item.id)\r\n      const positiveIDs = tileState.positive.map(item => item.id)\r\n      console.log(negativeIDs, tileState)\r\n      imageGridManager.setClassByIndexArray('negative', negativeIDs)\r\n      imageGridManager.setClassByIndexArray('positive', positiveIDs)\r\n\r\n      const negativeCellPairs = imageGridManager.getPairsByClass('negative')\r\n      const positiveCellPairs = imageGridManager.getPairsByClass('positive')\r\n \r\n      const negativeObjectDataRows = negativeCellPairs.map(cellPair => dataProvider.getRow('object_data', {ImageNumber: cellPair.ImageNumber, ObjectNumber: cellPair.ObjectNumber}))\r\n      const positiveObjectDataRows = positiveCellPairs.map(cellPair => dataProvider.getRow('object_data', {ImageNumber: cellPair.ImageNumber, ObjectNumber: cellPair.ObjectNumber}))\r\n      const trainingDataAddition = [...negativeObjectDataRows, ...positiveObjectDataRows]\r\n\r\n      const negativeLabels = new Array(negativeObjectDataRows.length).fill(0)\r\n      const positiveLabels = new Array(positiveObjectDataRows.length).fill(1)\r\n      const trainingLabelsAddition = negativeLabels.concat(positiveLabels)\r\n\r\n      const UpdatedTrainingObject = {\r\n        classifierType: \"LogisticRegression\",\r\n        trainingData: [...trainingDataAddition, ...trainingObject.trainingData],\r\n        trainingLabels: [...trainingLabelsAddition, ...trainingObject.trainingLabels],\r\n        featuresToUse: featuresToUse\r\n      }\r\n      console.log(UpdatedTrainingObject)\r\n      setTrainingObject(UpdatedTrainingObject)\r\n      // const newClassifierManager = new ClassifierManager(dataProvider, UpdatedTrainingObject)\r\n      \r\n      \r\n      // setClassifierManager(newClassifierManager)\r\n\r\n      const clearedTileState = { unclassified: tileState.unclassified, positive: [], negative: []}\r\n      setTileState(clearedTileState)\r\n      console.log(\"finished train\")\r\n      enableIterationButtons()\r\n  }\r\n\r\n    const handleUpload = async (fileListObject) => {\r\n        setUploadButtonEnabled(false)\r\n        setFileListObject(fileListObject)\r\n        const uploadHandler = new UploadHandler(fileListObject)\r\n        const uploadReturnObject = await uploadHandler.getDataHandlerandStartingTrainingSet();\r\n        const dataProvider = uploadReturnObject.data_provider\r\n        console.log(dataProvider.getObjsPerImg(4))\r\n        setDataProvider(dataProvider)\r\n        const trainingTable = uploadReturnObject.training_data.training_table\r\n        const trainingDataTable = trainingTable.getDataColumnsPaired()\r\n\r\n        const trainingLabels = trainingTable.getTrainingLabels()\r\n        const initialTrainingData = trainingDataTable.map(row_object => {\r\n            const ObjectNumber = row_object['objectnum']\r\n            const ImageNumber = row_object['imagenum']\r\n            return dataProvider.getRow('object_data', {ObjectNumber, ImageNumber})\r\n        })\r\n        const totalFeatures = uploadReturnObject.training_data.features\r\n        const tempFeaturesToUse = totalFeatures.filter((elem)=>!elem.includes(\"Location\") && (elem !== \"ObjectNumber\") && (elem !== \"ImageNumber\"))\r\n        setFeaturesToUseState(tempFeaturesToUse)\r\n        console.log(\"finished data initialization\")\r\n        const initialTrainingObject = {\r\n            classifierType: \"LogisticRegression\",\r\n            trainingData: initialTrainingData,\r\n            trainingLabels: trainingLabels,\r\n            featuresToUse: tempFeaturesToUse\r\n        }\r\n        setTrainingObject(initialTrainingObject)\r\n        // console.log(\"starting initial training\")\r\n        // const newClassifierManager = new ClassifierManager(dataProvider, initialTrainingObject)\r\n        \r\n        // setClassifierManager(newClassifierManager)\r\n\r\n        setFetchButtonEnabled(true)\r\n        setTrainButtonEnabled(true)\r\n        setDownloadButtonEnabled(true)\r\n        \r\n        \r\n        console.log(\"finished upload\")\r\n    }\r\n\r\n    const handleDownload = async () => {\r\n      disableIterationButtons()\r\n      const classifierManager = new ClassifierManager(dataProvider, trainingObject)\r\n      await classifierManager.initTrainPromise()\r\n      classifierManager.userDownloadClassifierSpecPromise()\r\n      enableIterationButtons()\r\n    }\r\n\r\n    function constructTileState(dataURLs) {\r\n        return {\r\n            unclassified: dataURLs.map((dataURL, idx) => {return {id: idx, address: dataURL}}),  \r\n            positive: [],\r\n            negative: []\r\n        };\r\n    }\r\n\r\n    function onChange(sourceId, sourceIndex, targetIndex, targetId) {\r\n        if (targetId) {\r\n         \r\n          const result = move(\r\n            tileState[sourceId],\r\n            tileState[targetId],\r\n            sourceIndex,\r\n            targetIndex\r\n          );\r\n          \r\n          return setTileState({\r\n            ...tileState,\r\n            [sourceId]: result[0],\r\n            [targetId]: result[1]\r\n          });\r\n        }\r\n        console.log(sourceId, sourceIndex, targetIndex, )\r\n        if (sourceIndex !== targetIndex) {\r\n          const result = swap(tileState[sourceId], sourceIndex, tileState[sourceId].length);\r\n          return setTileState({\r\n            ...tileState,\r\n            [sourceId]: result\r\n          });\r\n        }\r\n        const result = swap(tileState[sourceId], sourceIndex, sourceIndex);\r\n        return setTileState({\r\n          ...tileState,\r\n          [sourceId]: result\r\n        });\r\n        \r\n        \r\n      }\r\n    \r\n    return (\r\n        <div style={{resize: 'horizontal'}}>\r\n    \r\n        <Row>\r\n       \r\n        \r\n        <Col>\r\n        <Image src={logo} style={{marginRight:\"40%\", height:'90px'}}></Image>\r\n        </Col>\r\n\r\n        <Col >\r\n        <IconButton style={{color: \"black\", marginLeft:\"50%\"}}> <SaveAltIcon /></IconButton> \r\n        </Col>\r\n\r\n\r\n        </Row>\r\n        <GridContextProvider onChange={onChange}>\r\n        <Row>\r\n        \r\n        <Grid container justify=\"center\" spacing={2} style={{marginBottom: 15}}>\r\n       \r\n        <Grid key={0} item>\r\n        {/* <DropdownButton variant=\"secondary\" title= \"Fetch\">\r\n        \r\n         <Dropdown.Item >Positive</Dropdown.Item>\r\n         <Dropdown.Item >Negative</Dropdown.Item>\r\n         <Dropdown.Item >Random</Dropdown.Item>\r\n        \r\n        </DropdownButton> */}\r\n            <Button disabled={!fetchButtonEnabled} variant=\"contained\" aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClickFetchDropDown}>\r\n            Fetch\r\n            </Button>\r\n            <Menu\r\n            id=\"simple-menu\"\r\n            anchorEl={anchorEl}\r\n            keepMounted\r\n            open={Boolean(anchorEl)}\r\n            onClose={handleCloseFetchDropDown}\r\n            >\r\n            <MenuItem onClick={()=>handleCloseFetchDropDown(\"random\")}>Random</MenuItem>\r\n            <MenuItem onClick={()=>handleCloseFetchDropDown(\"positive\")}>Positive</MenuItem>\r\n            <MenuItem onClick={()=>handleCloseFetchDropDown(\"negative\")}>Negative</MenuItem>\r\n            </Menu>\r\n    </Grid>\r\n\r\n\r\n        <Grid key={1} item>\r\n        <Button disabled={!trainButtonEnabled} variant=\"contained\" onClick={handleTrain}>Train</Button>\r\n        </Grid>\r\n\r\n        <Grid key={2} item>\r\n        <Button disabled={!evaluateButtonEnabled} variant=\"contained\" onClick={()=>{}}>Evaluate</Button>\r\n        </Grid>\r\n        <Grid key={3} item>\r\n        <Button disabled={!downloadButtonEnabled} variant=\"contained\" onClick={handleDownload}>Download</Button>\r\n        </Grid>\r\n        <Grid key={4} item>\r\n        <Button disabled={!uploadButtonEnabled} variant=\"contained\" component=\"label\" onClick={()=>console.log(\"Upload!\")}> \r\n            Upload\r\n            <input  type=\"file\"\r\n                    hidden webkitdirectory=\"true\"\r\n                    mozdirectory=\"true\"\r\n                    msdirectory=\"true\"\r\n                    odirectory=\"true\"\r\n                    directory=\"true\"\r\n                    multiple\r\n                    onChange = {(eventObject)=>{handleUpload(eventObject)}}   \r\n            />\r\n        </Button>\r\n        </Grid>\r\n    </Grid>\r\n    </Row>\r\n\r\n    \r\n        <div>\r\n        \r\n        <label style = {{textAlign:\"left\", backgroundColor: 'white', paddingLeft: \"10%\", marginBottom: 0.5} }>Unclassified</label>\r\n        \r\n        <div className=\"topContainer\">\r\n       \r\n        <GridDropZone\r\n             className=\"dropzone \"\r\n            id=\"unclassified\"\r\n            boxesPerRow={8}\r\n            rowHeight={70}\r\n          >\r\n             \r\n            {tileState.unclassified.map(item => (\r\n              <GridItem key={item.id}>\r\n                <div className=\"grid-item\" >\r\n                    <div className=\"grid-item-content\" style = {{backgroundImage:  `url(${item.address})`}} >\r\n                        \r\n                        </div> \r\n                </div>\r\n              </GridItem>\r\n            ))}\r\n          </GridDropZone>\r\n          </div>\r\n        \r\n        <Row>\r\n     \r\n          <label style = {{textAlign:\"left\", backgroundColor: 'white', paddingLeft: \"11%\", userSelect: \"none\", marginBottom:\"0.5%\"} }>Positive</label> \r\n    \r\n        \r\n          <label style = {{textAlign:\"left\", backgroundColor: 'white', paddingRight: \"8%\", marginBottom: 0, userSelect: \"none\", margin: \"auto\",  marginBottom:\"0.5%\"} }>Negative</label>\r\n       \r\n          </Row>\r\n         \r\n         <Row>\r\n\r\n          <GridDropZone\r\n            className=\"dropzone positive\"\r\n            id=\"positive\"\r\n            boxesPerRow={4}\r\n            rowHeight={70}\r\n          >\r\n            \r\n            {tileState.positive.map(item => (\r\n              <GridItem key={item.id}>\r\n                <div className=\"grid-item\"> \r\n                    <div className=\"grid-item-content\" style = {{backgroundImage: `url(${item.address})`}}>\r\n                         \r\n                        </div>  \r\n                </div>\r\n              </GridItem>\r\n            ))}\r\n          </GridDropZone>\r\n   \r\n      \r\n          <GridDropZone\r\n            className=\"dropzone negative\"\r\n            id=\"negative\"\r\n            boxesPerRow={4}\r\n            rowHeight={70}\r\n          >\r\n            {tileState.negative.map(item => (\r\n              <GridItem key={item.id}>\r\n                <div className=\"grid-item\">\r\n                <div className=\"grid-item-content\" style = {{backgroundImage: `url(${item.address})`}}>\r\n                        \r\n                        </div>      \r\n                </div>\r\n              </GridItem>\r\n            ))}\r\n          </GridDropZone>\r\n\r\n     \r\n      \r\n        </Row>\r\n        </div>\r\n      </GridContextProvider>\r\n \r\n    </div>\r\n\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default TestUI; ","export default __webpack_public_path__ + \"static/jones-885674426137aa7117b916008a9d4f44.jpg\";"],"sourceRoot":""}