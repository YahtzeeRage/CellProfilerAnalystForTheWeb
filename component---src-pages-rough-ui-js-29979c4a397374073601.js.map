{"version":3,"sources":["webpack://gatsby-test/./src/classes/UploadHandler.js","webpack://gatsby-test/./src/classes/ImageProvider.js","webpack://gatsby-test/./src/pages/RoughUI.js"],"names":["UploadHandler","fileListObject","sliceArrayByValue","array","value1","value2","index1","indexOf","index2","console","error","slice","basicPapaConfig","worker","skipEmptyLines","dynamicTyping","getDataHandlerandStartingTrainingSet","file_objects","this","getFiles","getText","text_data","column_lines","getColumnLines","dp","DataProvider","tt","TrainingTable","file_handler","UserUploadFileHandler","map","file_name","findFile","Promise","all","file_object","name","endsWith","PapaParser","papaTextfromCSV","log","fileReaderPromiseText","file","column_lines_txt","data_columns","split","e","trim","object_column_lines","push","image_column_lines","ImageProvider","getDataURLPromise","promise_images","cords","then","images","image","createRGB","rgb_images","tf","squeeze","color_image","createDataURL","canvas_at_index","document","createElement","width","height","ctx_at_index","getContext","temp_canvas","hasOwnProperty","drawImage","x","y","remove","toDataURL","img","resolve","reject","img_tf","newImg","Image","onload","src","React","anchorEl","setAnchorEl","dataProvider","setDataProvider","trainingObject","setTrainingObject","userUploadFileHandler","setUserUploadFileHandler","constructTileState","tileState","setTileState","imageGridManager","setImageGridManager","setLastFetchState","featuresToUse","setFeaturesToUseState","handleCloseFetchDropDown","fetchType","undefined","handleFetch","classifierManager","ClassifierManager","initTrainPromise","classedCellPairObjects","fetchUpToNCellPairsByClass","imageProvider","dataURLPromiseArray","CellPair","promiseImages","returnAllImgFileNames","ImageNumber","fileReaderPromiseImage","coords","getCordsforCellDisplay","dataURLs","newTileState","ImageGridManager","handleTrain","negativeIDs","negative","item","id","positiveIDs","positive","setClassByIndexArray","negativeCellPairs","getPairsByClass","positiveCellPairs","negativeObjectDataRows","cellPair","getRow","ObjectNumber","positiveObjectDataRows","trainingDataAddition","negativeLabels","Array","length","fill","positiveLabels","trainingLabelsAddition","concat","UpdatedTrainingObject","classifierType","trainingData","trainingLabels","clearedTileState","unclassified","handleUpload","eventObject","uploadHandler","uploadReturnObject","data_provider","trainingTable","training_data","training_table","trainingDataTable","getDataColumnsPaired","getTrainingLabels","initialTrainingData","row_object","totalFeatures","features","tempFeaturesToUse","filter","elem","includes","handleDownload","userDownloadClassifierSpecPromise","dataURL","idx","address","style","resize","Row","Col","logo","marginRight","IconButton","color","marginLeft","SaveAlt","Grid","container","justify","spacing","marginBottom","key","Button","variant","aria-controls","aria-haspopup","onClick","event","currentTarget","Menu","keepMounted","open","Boolean","onClose","MenuItem","component","type","hidden","webkitdirectory","mozdirectory","msdirectory","odirectory","directory","multiple","onChange","GridContext","sourceId","sourceIndex","targetIndex","targetId","result","move","swap","textAlign","backgroundColor","paddingLeft","className","GridDropZone","boxesPerRow","rowHeight","GridItem","backgroundImage","userSelect","paddingRight","margin"],"mappings":"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","file":"component---src-pages-rough-ui-js-29979c4a397374073601.js","sourcesContent":["//import DataUtils from \"./DataUtils\";\r\nimport PapaParser from \"./PapaParser.js\";\r\nimport UserUploadFileHandler from \"./UserUploadFileHandler.js\";\r\nimport _ from \"lodash\";                                                                                                                                                                                                         \r\nimport DataProvider from \"./DataProvider.js\";\r\nimport TrainingTable from \"./TrainingTable.js\";\r\nimport { CollectionsOutlined } from \"@material-ui/icons\";\r\nexport default class UploadHandler {\r\n\r\n    constructor(fileListObject) {\r\n        this.fileListObject = fileListObject\r\n    }\r\n    // TODO\r\n    // getProperties(file_handler) {\r\n\r\n    // }\r\n    sliceArrayByValue = function (array, value1, value2) {\r\n        const index1 = array.indexOf(value1);\r\n        const index2 = array.indexOf(value2);\r\n      \r\n        if (value1 === -1 || value2 === -1) {\r\n            console.error(\"Values not found to slice\");\r\n            return null;\r\n        }\r\n      \r\n        return array.slice(index1, index2);\r\n      }\r\n\r\n    basicPapaConfig = {\r\n        worker: true,\r\n        skipEmptyLines: true,\r\n        dynamicTyping: true\r\n    }\r\n    getFiles() {\r\n        var file_names = [\r\n            \"example_SETUP.SQL\",\r\n            \"per_object.csv\",\r\n            \"per_image.csv\",\r\n            \"MyTrainingSet.txt\"\r\n        ]\r\n        var file_handlers = [];\r\n        var i = 0;\r\n        var file_handler = new UserUploadFileHandler(this.fileListObject)\r\n        return  file_names.map(file_name => {\r\n                var file = file_handler.findFile(file_name)\r\n                return {'file': file, 'name' : file_name};\r\n            })\r\n    }\r\n\r\n     \r\n    getText(file_objects) {\r\n        return Promise.all( file_objects.map( file_object => {\r\n            if (file_object.name.endsWith(\".csv\") || file_object.name.endsWith(\".txt\")) {\r\n                var papa_parser = new PapaParser();\r\n\r\n                return papa_parser.papaTextfromCSV(file_object);\r\n            }\r\n            else {\r\n                var file_handler = new UserUploadFileHandler(this.fileListObject)\r\n                console.log(file_object)\r\n                return file_handler.fileReaderPromiseText(file_object.file);\r\n                \r\n            }\r\n        }))\r\n    }\r\n        //return Promise.all([this.fileReaderPromiseText(fileListObject, setup_name).split('\\n').map(e=>e.trim()),\r\n    getColumnLines(column_lines_txt) {\r\n        var data_columns = [] \r\n        var column_lines = column_lines_txt.split('\\n').map(e=>e.trim())\r\n        const object_column_lines = this.sliceArrayByValue(\r\n            column_lines,\r\n            \"CREATE TABLE per_object (\", \r\n            \"PRIMARY KEY  (ImageNumber,ObjectNumber)\"\r\n        );\r\n        data_columns.push(object_column_lines.map((name)=>name.split(' ')[0]).slice(1));\r\n        const image_column_lines = this.sliceArrayByValue(\r\n            column_lines,\r\n            \"CREATE TABLE per_image (\", \r\n            \"PRIMARY KEY  (ImageNumber)\"\r\n        );\r\n        data_columns.push(image_column_lines.map((name)=>name.split(' ')[0]).slice(1));\r\n        data_columns.push(\"label imagenum objectnum x y\".split(\" \"));\r\n        return data_columns\r\n    }\r\n    getDataHandlerandStartingTrainingSet = async function() {\r\n        var data_types = [\r\n            'column_lines',\r\n            'object_data',\r\n            'image_data',\r\n            'training_data'\r\n        ]  \r\n\r\n        var data = [];\r\n        var file_objects = this.getFiles();\r\n        var text_data = await this.getText(file_objects);\r\n        var column_lines = this.getColumnLines(text_data[0]);\r\n        // console.log(text_data[1])\r\n        // console.log(column_lines[0])\r\n        var dp = new DataProvider({'object_data' : text_data[1], 'image_data' : text_data[2], \r\n                                       'object_columns' : column_lines[0], 'image_columns' : column_lines[1]})\r\n        var tt = new TrainingTable( text_data[3].slice(1) , column_lines[2])\r\n        return {'data_provider' : dp, 'training_data' : {'features' : column_lines[0],  'training_table' :  tt}}\r\n\r\n\r\n        // var image_data = text_data[2].map(data_row=>{ return _.zipObject(column_lines[1], data_row)})\r\n        // var object_data = text_data[1].map(data_row=>{ return _.zipObject(column_lines[0], data_row)})\r\n        // var training_data = text_data[3].map(data_row=>{ return _.zipObject(column_lines[2], data_row)})\r\n\r\n \r\n\r\n\r\n    }\r\n\r\n}\r\nexport {UploadHandler}\r\n","\r\nimport * as tf from '@tensorflow/tfjs'\r\nexport default class ImageProvider {\r\n    constructor() {\r\n        \r\n    }\r\n\r\n\r\ngetDataURLPromise(promise_images, cords = {}) {\r\n    return Promise.all(promise_images).then(images => {\r\n        return Promise.all( images.map(image => {\r\n            return this.createRGB(image)\r\n        }))\r\n    })\r\n    .then (rgb_images => {\r\n        return tf.stack(rgb_images,2).squeeze()\r\n    })\r\n    .then(color_image => {\r\n        return this.createDataURL(color_image, cords)\r\n    })\r\n      \r\n     \r\n}\r\n\r\ncreateDataURL (color_image, cords) {\r\n    var canvas_at_index = document.createElement(`canvas`);\r\n    canvas_at_index.width = 500;\r\n    canvas_at_index.height = 600;\r\n    var ctx_at_index = canvas_at_index.getContext(\"2d\");\r\n    var temp_canvas = document.createElement('canvas');  \r\n    return tf.browser.toPixels(color_image, temp_canvas).then(()=>{\r\n            if(cords.hasOwnProperty('x') && cords.hasOwnProperty('x') )\r\n               ctx_at_index.drawImage(temp_canvas, cords.x, cords.y, 40, 40, 0, 0, canvas_at_index.width, canvas_at_index.height)\r\n            else    \r\n                ctx_at_index.drawImage(temp_canvas, cords.x, cords.y, 40, 40, 0, 0, canvas_at_index.width, canvas_at_index.height)\r\n            temp_canvas.remove();  \r\n            return canvas_at_index.toDataURL();             \r\n    })\r\n }\r\n\r\ncreateRGB(img) {\r\n    return new Promise((resolve, reject)=> {\r\n        var img_tf;\r\n        var newImg = new Image();\r\n        newImg.onload = (()=> {\r\n            img_tf = tf.browser.fromPixels(newImg, 1)\r\n            resolve(img_tf);\r\n        })\r\n    newImg.src = img\r\n    })\r\n}}\r\nexport {ImageProvider}","import React from 'react';\r\nimport { Row, Col, Container} from \"reactstrap\";\r\nimport {Box, Button, Grid, IconButton, Menu, MenuItem}from '@material-ui/core'; \r\nimport logo from '../CPA_newlogo.png';\r\nimport {Image, Dropdown, DropdownButton} from 'react-bootstrap';\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\r\n\r\nimport UploadHandler from '../classes/UploadHandler'\r\nimport {ClassifierManager} from '../classes/ClassifierManager'\r\nimport {ImageProvider} from '../classes/ImageProvider.js';\r\nimport UserUploadFileHandler from '../classes/UserUploadFileHandler'\r\nimport {Classifier} from '../classes/Classifier'\r\nimport {ImageGridManager}  from '../classes/imGridManager'\r\n\r\nimport {\r\n    GridContextProvider,\r\n    GridDropZone,\r\n    GridItem,\r\n    swap,\r\n    move\r\n  } from \"react-grid-dnd\";\r\n  \r\n  import \"../dndstyles.css\";\r\n\r\n\r\n\r\nfunction TestUI(){\r\n    \r\n    \r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const [dataProvider, setDataProvider] = React.useState(null)\r\n\r\n    // var classifierManager = null;\r\n    // const [classifierManager, setClassifierManager] = React.useState(null)\r\n    const [trainingObject, setTrainingObject] = React.useState(null)\r\n    const [userUploadFileHandler, setUserUploadFileHandler] = React.useState(null)\r\n    const [tileState, setTileState] = React.useState( constructTileState([]) );\r\n    const [imageGridManager, setImageGridManager] = React.useState(null)\r\n    const [lastFetchState, setLastFetchState] = React.useState(null)\r\n    const [featuresToUse, setFeaturesToUseState] = React.useState(null)\r\n    const N = 20\r\n\r\n    const handleClickFetchDropDown = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseFetchDropDown = (fetchType) => {\r\n        setAnchorEl(null);\r\n        if (fetchType !== undefined) {\r\n            handleFetch(fetchType)\r\n        }\r\n    };\r\n\r\n    const handleFetch = async (fetchType) => {\r\n\r\n        const classifierManager = new ClassifierManager(dataProvider, trainingObject)\r\n        await classifierManager.initTrainPromise()\r\n\r\n        setLastFetchState(fetchType)\r\n        console.log(\"fetch \" + fetchType)\r\n        const classedCellPairObjects = classifierManager.fetchUpToNCellPairsByClass(fetchType, N)\r\n        const imageProvider = new ImageProvider();\r\n        var dataURLPromiseArray = null;\r\n        if (fetchType === \"random\") {\r\n            const dataURLPromiseArray = classedCellPairObjects.map(CellPair => {\r\n                const channelFileNames = dataProvider.returnAllImgFileNames(CellPair.ImageNumber)\r\n                const channelFiles = channelFileNames.map(name => { //Alternatively, we could have this.dp.returnAllImgPromisesPerImg({'ImageNumber': 2}, fh)\r\n                    return userUploadFileHandler.findFile(name)       // and abstract from 8-17 or more\r\n                })\r\n                const promiseImages = channelFiles.map(file => {\r\n                    const promiseImage =  userUploadFileHandler.fileReaderPromiseImage(file)\r\n                    return promiseImage;    \r\n                })\r\n                return Promise.all(promiseImages)\r\n                    .then(images => {\r\n                        const coords = dataProvider.getCordsforCellDisplay(CellPair)\r\n                        return imageProvider.getDataURLPromise(images, coords);   //The only method of imageprovider. If cords is left blank, it will produce a whole image. Should be\r\n                    })                                                //static class or function\r\n            })\r\n            const dataURLs = await Promise.all(dataURLPromiseArray)\r\n            const newTileState = constructTileState(dataURLs)\r\n            setTileState(newTileState)\r\n            console.log(newTileState)\r\n            console.log(dataURLs)\r\n            setImageGridManager(new ImageGridManager(classedCellPairObjects, dataURLs))\r\n\r\n            return\r\n        } \r\n\r\n        if (fetchType === \"positive\") {\r\n          dataURLPromiseArray = classedCellPairObjects.map(CellPair => {\r\n            const channelFileNames = dataProvider.returnAllImgFileNames(CellPair.ImageNumber)\r\n            const channelFiles = channelFileNames.map(name => { //Alternatively, we could have this.dp.returnAllImgPromisesPerImg({'ImageNumber': 2}, fh)\r\n                return userUploadFileHandler.findFile(name)       // and abstract from 8-17 or more\r\n            })\r\n            const promiseImages = channelFiles.map(file => {\r\n                const promiseImage =  userUploadFileHandler.fileReaderPromiseImage(file)\r\n                return promiseImage;    \r\n            })\r\n            return Promise.all(promiseImages)\r\n                .then(images => {\r\n                    const coords = dataProvider.getCordsforCellDisplay(CellPair)\r\n                    return imageProvider.getDataURLPromise(images, coords);   //The only method of imageprovider. If cords is left blank, it will produce a whole image. Should be\r\n                })                                                //static class or function\r\n        })\r\n        \r\n        const dataURLs = await Promise.all(dataURLPromiseArray)\r\n        const newTileState = constructTileState(dataURLs)\r\n        setTileState(newTileState)\r\n        console.log(newTileState)\r\n        console.log(dataURLs)\r\n        setImageGridManager(new ImageGridManager(classedCellPairObjects, dataURLs))\r\n        return\r\n      }\r\n\r\n      if (fetchType === 'negative') {\r\n        dataURLPromiseArray = classedCellPairObjects.map(CellPair => {\r\n          const channelFileNames = dataProvider.returnAllImgFileNames(CellPair.ImageNumber)\r\n          const channelFiles = channelFileNames.map(name => { //Alternatively, we could have this.dp.returnAllImgPromisesPerImg({'ImageNumber': 2}, fh)\r\n              return userUploadFileHandler.findFile(name)       // and abstract from 8-17 or more\r\n          })\r\n          const promiseImages = channelFiles.map(file => {\r\n              const promiseImage =  userUploadFileHandler.fileReaderPromiseImage(file)\r\n              return promiseImage;    \r\n          })\r\n          return Promise.all(promiseImages)\r\n              .then(images => {\r\n                  const coords = dataProvider.getCordsforCellDisplay(CellPair)\r\n                  return imageProvider.getDataURLPromise(images, coords);   //The only method of imageprovider. If cords is left blank, it will produce a whole image. Should be\r\n              })                                                //static class or function\r\n      })\r\n      \r\n      const dataURLs = await Promise.all(dataURLPromiseArray)\r\n      const newTileState = constructTileState(dataURLs)\r\n      setTileState(newTileState)\r\n      console.log(newTileState)\r\n      console.log(dataURLs)\r\n      setImageGridManager(new ImageGridManager(classedCellPairObjects, dataURLs))\r\n      return\r\n    }\r\n\r\n  }\r\n\r\n  const handleTrain = async () => {\r\n      const negativeIDs = tileState.negative.map(item => item.id)\r\n      const positiveIDs = tileState.positive.map(item => item.id)\r\n      console.log(negativeIDs, tileState)\r\n      imageGridManager.setClassByIndexArray('negative', negativeIDs)\r\n      imageGridManager.setClassByIndexArray('positive', positiveIDs)\r\n\r\n      const negativeCellPairs = imageGridManager.getPairsByClass('negative')\r\n      const positiveCellPairs = imageGridManager.getPairsByClass('positive')\r\n \r\n      const negativeObjectDataRows = negativeCellPairs.map(cellPair => dataProvider.getRow('object_data', {ImageNumber: cellPair.ImageNumber, ObjectNumber: cellPair.ObjectNumber}))\r\n      const positiveObjectDataRows = positiveCellPairs.map(cellPair => dataProvider.getRow('object_data', {ImageNumber: cellPair.ImageNumber, ObjectNumber: cellPair.ObjectNumber}))\r\n      const trainingDataAddition = [...negativeObjectDataRows, ...positiveObjectDataRows]\r\n\r\n      const negativeLabels = new Array(negativeObjectDataRows.length).fill(0)\r\n      const positiveLabels = new Array(positiveObjectDataRows.length).fill(1)\r\n      const trainingLabelsAddition = negativeLabels.concat(positiveLabels)\r\n\r\n      const UpdatedTrainingObject = {\r\n        classifierType: \"LogisticRegression\",\r\n        trainingData: [...trainingDataAddition, ...trainingObject.trainingData],\r\n        trainingLabels: [...trainingLabelsAddition, ...trainingObject.trainingLabels],\r\n        featuresToUse: featuresToUse\r\n      }\r\n      console.log(UpdatedTrainingObject)\r\n      setTrainingObject(UpdatedTrainingObject)\r\n      // const newClassifierManager = new ClassifierManager(dataProvider, UpdatedTrainingObject)\r\n      \r\n      \r\n      // setClassifierManager(newClassifierManager)\r\n\r\n      const clearedTileState = { unclassified: tileState.unclassified, positive: [], negative: []}\r\n      setTileState(clearedTileState)\r\n      console.log(\"finished train\")\r\n    \r\n  }\r\n\r\n    const handleUpload = async (eventObject) => {\r\n\r\n        const userUploadFileHandler = new UserUploadFileHandler(eventObject)\r\n        setUserUploadFileHandler(userUploadFileHandler)\r\n\r\n        const uploadHandler = new UploadHandler(eventObject)\r\n        const uploadReturnObject = await uploadHandler.getDataHandlerandStartingTrainingSet();\r\n\r\n        const dataProvider = uploadReturnObject.data_provider\r\n        setDataProvider(dataProvider)\r\n        const trainingTable = uploadReturnObject.training_data.training_table\r\n        const trainingDataTable = trainingTable.getDataColumnsPaired()\r\n\r\n        const trainingLabels = trainingTable.getTrainingLabels()\r\n        const initialTrainingData = trainingDataTable.map(row_object => {\r\n            const ObjectNumber = row_object['objectnum']\r\n            const ImageNumber = row_object['imagenum']\r\n            return dataProvider.getRow('object_data', {ObjectNumber, ImageNumber})\r\n        })\r\n        const totalFeatures = uploadReturnObject.training_data.features\r\n        const tempFeaturesToUse = totalFeatures.filter((elem)=>!elem.includes(\"Location\") && (elem !== \"ObjectNumber\") && (elem !== \"ImageNumber\"))\r\n        setFeaturesToUseState(tempFeaturesToUse)\r\n        console.log(\"finished data initialization\")\r\n        const initialTrainingObject = {\r\n            classifierType: \"LogisticRegression\",\r\n            trainingData: initialTrainingData,\r\n            trainingLabels: trainingLabels,\r\n            featuresToUse: tempFeaturesToUse\r\n        }\r\n        setTrainingObject(initialTrainingObject)\r\n        // console.log(\"starting initial training\")\r\n        // const newClassifierManager = new ClassifierManager(dataProvider, initialTrainingObject)\r\n        \r\n        // setClassifierManager(newClassifierManager)\r\n\r\n        \r\n\r\n        console.log(\"finished upload\")\r\n    }\r\n\r\n    const handleDownload = async () => {\r\n      const classifierManager = new ClassifierManager(dataProvider, trainingObject)\r\n      await classifierManager.initTrainPromise()\r\n      classifierManager.userDownloadClassifierSpecPromise()\r\n    }\r\n\r\n    function constructTileState(dataURLs) {\r\n        return {\r\n            unclassified: dataURLs.map((dataURL, idx) => {return {id: idx, address: dataURL}}),  \r\n            positive: [],\r\n            negative: []\r\n        };\r\n    }\r\n\r\n    function onChange(sourceId, sourceIndex, targetIndex, targetId) {\r\n        if (targetId) {\r\n          const result = move(\r\n            tileState[sourceId],\r\n            tileState[targetId],\r\n            sourceIndex,\r\n            targetIndex\r\n          );\r\n          return setTileState({\r\n            ...tileState,\r\n            [sourceId]: result[0],\r\n            [targetId]: result[1]\r\n          });\r\n        }\r\n    \r\n        const result = swap(tileState[sourceId], sourceIndex, targetIndex);\r\n        return setTileState({\r\n          ...tileState,\r\n          [sourceId]: result\r\n        });\r\n      }\r\n    \r\n    return (\r\n        <div style={{resize: 'horizontal'}}>\r\n    \r\n        <Row>\r\n       \r\n        \r\n        <Col>\r\n        <Image src={logo} style={{marginRight:\"40%\", height:'90px'}}></Image>\r\n        </Col>\r\n\r\n        <Col >\r\n        <IconButton style={{color: \"black\", marginLeft:\"50%\"}}> <SaveAltIcon /></IconButton> \r\n        </Col>\r\n\r\n\r\n        </Row>\r\n        <Row>\r\n        \r\n        <Grid container justify=\"center\" spacing={2} style={{marginBottom: 15}}>\r\n       \r\n        <Grid key={0} item>\r\n        {/* <DropdownButton variant=\"secondary\" title= \"Fetch\">\r\n        \r\n         <Dropdown.Item >Positive</Dropdown.Item>\r\n         <Dropdown.Item >Negative</Dropdown.Item>\r\n         <Dropdown.Item >Random</Dropdown.Item>\r\n        \r\n        </DropdownButton> */}\r\n            <Button variant=\"contained\" aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClickFetchDropDown}>\r\n            Fetch\r\n            </Button>\r\n            <Menu\r\n            id=\"simple-menu\"\r\n            anchorEl={anchorEl}\r\n            keepMounted\r\n            open={Boolean(anchorEl)}\r\n            onClose={handleCloseFetchDropDown}\r\n            >\r\n            <MenuItem onClick={()=>handleCloseFetchDropDown(\"random\")}>Random</MenuItem>\r\n            <MenuItem onClick={()=>handleCloseFetchDropDown(\"positive\")}>Positive</MenuItem>\r\n            <MenuItem onClick={()=>handleCloseFetchDropDown(\"negative\")}>Negative</MenuItem>\r\n            </Menu>\r\n    </Grid>\r\n\r\n\r\n        <Grid key={1} item>\r\n        <Button variant=\"contained\" onClick={handleTrain}>Train</Button>\r\n        </Grid>\r\n\r\n        <Grid key={2} item>\r\n        <Button variant=\"contained\" onClick={()=>{}}>Evaluate</Button>\r\n        </Grid>\r\n        <Grid key={3} item>\r\n        <Button variant=\"contained\" onClick={handleDownload}>Download</Button>\r\n        </Grid>\r\n        <Grid key={4} item>\r\n        <Button variant=\"contained\" component=\"label\" onClick={()=>console.log(\"Upload!\")}> \r\n            Upload\r\n            <input  type=\"file\"\r\n                    hidden webkitdirectory=\"true\"\r\n                    mozdirectory=\"true\"\r\n                    msdirectory=\"true\"\r\n                    odirectory=\"true\"\r\n                    directory=\"true\"\r\n                    multiple\r\n                    onChange = {(eventObject)=>{handleUpload(eventObject)}}   \r\n            />\r\n        </Button>\r\n        </Grid>\r\n    </Grid>\r\n    </Row>\r\n\r\n    <GridContextProvider onChange={onChange}>\r\n        <div>\r\n        \r\n        <label style = {{textAlign:\"left\", backgroundColor: 'white', paddingLeft: \"10%\", marginBottom: 0.5} }>Unclassified</label>\r\n        \r\n        <div className=\"topContainer\">\r\n       \r\n        <GridDropZone\r\n             className=\"dropzone \"\r\n            id=\"unclassified\"\r\n            boxesPerRow={8}\r\n            rowHeight={70}\r\n          >\r\n             \r\n            {tileState.unclassified.map(item => (\r\n              <GridItem key={item.id}>\r\n                <div className=\"grid-item\" >\r\n                    <div className=\"grid-item-content\" style = {{backgroundImage:  `url(${item.address})`}} >\r\n                        \r\n                        </div> \r\n                </div>\r\n              </GridItem>\r\n            ))}\r\n          </GridDropZone>\r\n          </div>\r\n        \r\n        <Row>\r\n     \r\n          <label style = {{textAlign:\"left\", backgroundColor: 'white', paddingLeft: \"11%\", userSelect: \"none\", marginBottom:\"0.5%\"} }>Positive</label> \r\n    \r\n        \r\n          <label style = {{textAlign:\"left\", backgroundColor: 'white', paddingRight: \"8%\", marginBottom: 0, userSelect: \"none\", margin: \"auto\",  marginBottom:\"0.5%\"} }>Negative</label>\r\n       \r\n          </Row>\r\n         \r\n         <Row>\r\n\r\n          <GridDropZone\r\n            className=\"dropzone positive\"\r\n            id=\"positive\"\r\n            boxesPerRow={4}\r\n            rowHeight={70}\r\n          >\r\n            \r\n            {tileState.positive.map(item => (\r\n              <GridItem key={item.id}>\r\n                <div className=\"grid-item\"> \r\n                    <div className=\"grid-item-content\" style = {{backgroundImage: `url(${item.address})`}}>\r\n                         \r\n                        </div>  \r\n                </div>\r\n              </GridItem>\r\n            ))}\r\n          </GridDropZone>\r\n   \r\n      \r\n          <GridDropZone\r\n            className=\"dropzone negative\"\r\n            id=\"negative\"\r\n            boxesPerRow={4}\r\n            rowHeight={70}\r\n          >\r\n            {tileState.negative.map(item => (\r\n              <GridItem key={item.id}>\r\n                <div className=\"grid-item\">\r\n                <div className=\"grid-item-content\" style = {{backgroundImage: `url(${item.address})`}}>\r\n                        \r\n                        </div>      \r\n                </div>\r\n              </GridItem>\r\n            ))}\r\n          </GridDropZone>\r\n\r\n     \r\n      \r\n        </Row>\r\n        </div>\r\n      </GridContextProvider>\r\n \r\n    </div>\r\n\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default TestUI; "],"sourceRoot":""}