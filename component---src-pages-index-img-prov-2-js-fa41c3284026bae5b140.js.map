{"version":3,"sources":["webpack://gatsby-test/./src/classes/ImageHandler.js","webpack://gatsby-test/./src/classes/ImageProvider2.js","webpack://gatsby-test/./src/pages/indexImgProv2.js"],"names":["ImageHandler","fileListObect","data_provider","getObjsToURLs","objects","urls","i","length","cur_ImageNum","ImageNumber","image_info","key","toString","this","getImagefromFile","images_seen","cords","getCordsforCellDisplay","ip","ImageProvider2","getDataURL","url","push","getImgUrl","object","images","getImagesfromFile","getDataUrl","console","log","images_path","returnAllImgFileNames","Promise","all","map","image_path","file","file_handler","findFile","filename","fileReaderPromiseImage","then","image","makeImage","UserUploadFileHandler","img","Image","src","img_info","box_dim","image_type","canvases","setDimensionsofImg","h","l","width","height","main_canvas","document","createElement","ctx","getContext","canID","color","canvas","createColorCanvas","globalCompositeOperation","img_channel","drawImage","x","y","toDataURL","fillStyle","fillRect","React","anchorEl","setAnchorEl","dataProvider","setDataProvider","trainingObject","setTrainingObject","fileListObject","setFileListObject","constructTileState","tileState","setTileState","imageGridManager","setImageGridManager","setLastFetchState","featuresToUse","setFeaturesToUseState","fetchButtonEnabled","setFetchButtonEnabled","trainButtonEnabled","setTrainButtonEnabled","evaluateButtonEnabled","downloadButtonEnabled","setDownloadButtonEnabled","uploadButtonEnabled","setUploadButtonEnabled","handleCloseFetchDropDown","fetchType","undefined","handleFetch","disableIterationButtons","enableIterationButtons","time","unclassified","positive","negative","classifierManager","ClassifierManager","initTrainPromise","classedCellPairObjects","fetchUpToNCellPairsByClass","ih","dataURLS","newTileState","ImageGridManager","timeEnd","handleTrain","negativeIDs","item","id","positiveIDs","setClassByIndexArray","negativeCellPairs","getPairsByClass","positiveCellPairs","negativeObjectDataRows","cellPair","getRow","ObjectNumber","positiveObjectDataRows","trainingDataAddition","negativeLabels","Array","fill","positiveLabels","trainingLabelsAddition","concat","UpdatedTrainingObject","classifierType","trainingData","trainingLabels","clearedTileState","handleUpload","uploadHandler","UploadHandler","getDataHandlerandStartingTrainingSet","uploadReturnObject","trainingTable","training_data","training_table","trainingDataTable","getDataColumnsPaired","getTrainingLabels","initialTrainingData","row_object","totalFeatures","features","tempFeaturesToUse","filter","elem","includes","handleDownload","userDownloadClassifierSpecPromise","dataURLs","dataURL","idx","address","style","resize","logo","marginRight","marginLeft","container","justify","spacing","marginBottom","disabled","variant","aria-controls","aria-haspopup","onClick","event","currentTarget","keepMounted","open","Boolean","onClose","component","type","hidden","webkitdirectory","mozdirectory","msdirectory","odirectory","directory","multiple","onChange","eventObject","sourceId","sourceIndex","targetIndex","targetId","result","move","swap","textAlign","backgroundColor","paddingLeft","className","boxesPerRow","rowHeight","backgroundImage","userSelect","paddingRight","margin"],"mappings":"wMAEqBA,E,WACjB,WAAYC,EAAeC,GAAgB,KAK3CC,cAL0C,mCAK1B,WAAeC,GAAf,qFACRC,EAAO,GACFC,EAAI,EAFD,YAEIA,EAAIF,EAAQG,QAFhB,wBAGJC,EAAeJ,EAAQE,GAAGG,YAC1BC,EAAa,GAORC,EAAMH,EAAaI,WAXpB,SAYgBC,KAAKC,iBAAiBN,GAZtC,cAYHE,EAZG,OAaHG,KAAKE,YAAYJ,GAAOD,EAExBM,EAAQH,KAAKX,cAAce,uBAAuBb,EAAQE,IAC1DY,EAAK,IAAIC,IAAeT,EAAYM,GAhBjC,UAiBSE,EAAGE,aAjBZ,QAiBHC,EAjBG,OAkBPhB,EAAKiB,KAAKD,GAlBH,QAEwBf,IAFxB,gDAoBJD,GApBI,iDAL0B,2DA4B1CkB,UA5B0C,mCA4B9B,WAAeC,GAAf,gFACJC,EAASZ,KAAKa,kBAAkBF,GAChCN,EAAK,IAAIC,IAAeM,GAFpB,kBAGDP,EAAGS,cAHF,gDA5B8B,2DAkC1Cb,iBAlC0C,mCAkCvB,WAAeU,GAAf,yFACfI,QAAQC,IAAIL,GACRM,EAAcjB,KAAKX,cAAc6B,sBAAsBP,GAF5C,SAIIQ,QAAQC,IAAIH,EAAYI,KAAI,SAAAC,GAC3C,IAAIC,EAAO,EAAKC,aAAaC,SAASH,EAAWI,UACjD,OAAO,EAAKF,aAAaG,uBAAuBJ,GAAMK,MAAM,SAAAC,GACxD,OAAO,EAAKC,UAAUD,UAPf,OAWf,IAPIjB,EAJW,OAUE,GACRnB,EAAI,EAAGA,EAAImB,EAAOlB,OAAQD,WACxBwB,EAAYS,SACnBT,EAAYxB,GAAGoC,MAAQjB,EAAOnB,GAbnB,yBAeRwB,GAfQ,gDAlCuB,sDACtCjB,KAAKwB,aAAe,IAAIO,IAAsB3C,GAC9CY,KAAKX,cAAgBA,EACrBW,KAAKE,YAAc,G,mBAgDvB4B,UAAA,SAAUD,GACN,IAAIG,EAAM,IAAIC,MAEd,OADAD,EAAIE,IAAML,EACHG,G,4ECvDM1B,E,WACjB,WAAY6B,EAAUhC,EAAYiC,EAAcC,QAAuB,IAAjDlC,MAAQ,SAAyC,IAArCiC,MAAU,SAA2B,IAAvBC,MAAa,UACzDrC,KAAKmC,SAAWA,EAChBnC,KAAKoC,QAAUA,EACfpC,KAAKqC,WAAaA,EAClBrC,KAAKG,MAAQA,EACbH,KAAKsC,SAAW,G,2BAGpBC,mBAAA,WAC4B,WAApBvC,KAAKqC,aACLrC,KAAKoC,QAAQI,EAAI,GACjBxC,KAAKoC,QAAQK,EAAI,IAEG,UAApBzC,KAAKqC,aACLrC,KAAKoC,QAAQK,EAAIzC,KAAKmC,SAAS,GAAGN,MAAMa,MACxC1C,KAAKoC,QAAQI,EAAIxC,KAAKmC,SAAS,GAAGN,MAAMc,S,EAGhDpC,WAAA,WACIP,KAAKuC,qBACL,IAAIK,EAAcC,SAASC,cAAT,UAElBF,EAAYF,MAAQ1C,KAAKmC,SAAS,GAAGN,MAAMa,MAC3CE,EAAYD,OAAS3C,KAAKmC,SAAS,GAAGN,MAAMc,OAG5C,IAFA,IAAII,EAAMH,EAAYI,WAAW,MAExBvD,EAAI,EAAGA,EAAIO,KAAKmC,SAASzC,OAAQD,IAAK,CAC3C,IAAIwD,EAAQjD,KAAKmC,SAAS1C,GAAGyD,MACzBC,EAASN,SAASC,cAAT,UACb9C,KAAKsC,SAASW,GAASE,EAG7B,IAAQ1D,EAAI,EAAGA,EAAIO,KAAKmC,SAASzC,OAAQD,IAAK,CACpCwD,EAAQjD,KAAKmC,SAAS1C,GAAGyD,MAAMnD,WACnCC,KAAKoD,kBAAkBpD,KAAKmC,SAAS1C,GAAGoC,MAAOoB,GAEpDF,EAAIM,yBAA2B,UAC/B,IAAS5D,EAAI,EAAGA,EAAIO,KAAKmC,SAASzC,OAAQD,IAAK,CAC1C,IAAI6D,EAActD,KAAKmC,SAAS1C,GAChCsD,EAAIQ,UAAUvD,KAAKsC,SAASgB,EAAYJ,OAAQlD,KAAKG,MAAMqD,EAAGxD,KAAKG,MAAMsD,EACzEzD,KAAKoC,QAAQI,EAAGxC,KAAKoC,QAAQK,EAAG,EAAG,EAAGG,EAAYF,MAAOE,EAAYD,QAI5E,OADAI,EAAIM,yBAA2B,cACxBT,EAAYc,a,EAYpBN,kBAAA,SAAmBvB,EAAOqB,GAE1B,IAAIP,EAASd,EAAMc,OACfD,EAASb,EAAMa,MAEnB1C,KAAKsC,SAASY,GAAOR,MAAQA,EAC7B1C,KAAKsC,SAASY,GAAOP,OAASA,EAC9B,IAAII,EAAM/C,KAAKsC,SAASY,GAAOF,WAAW,MAC1CD,EAAIM,yBAAyB,cAC7BN,EAAIQ,UAAU1B,EAAQ,EAAG,GACzBkB,EAAIM,yBAAyB,WAC7BN,EAAIY,UAAYT,EAChBH,EAAIa,SAAS,EAAG,EAAGlB,EAAOC,GAC1BI,EAAIM,yBAAyB,e,8UC4SjC,UAxVA,WAAkB,IAAD,IAGmBQ,WAAe,MAAxCC,EAHM,KAGIC,EAHJ,OAI2BF,WAAe,MAAhDG,EAJM,KAIQC,EAJR,OAQ+BJ,WAAe,MAApDK,EARM,KAQUC,EARV,OAS+BN,WAAe,MAApDO,EATM,KASUC,EATV,OAUqBR,WAAgBS,GAAmB,KAA9DC,EAVM,KAUKC,EAVL,OAWmCX,WAAe,MAAxDY,EAXM,KAWYC,EAXZ,OAY+Bb,WAAe,MAApCc,GAZV,aAakCd,WAAe,MAAvDe,EAbM,KAaSC,EAbT,OAeuChB,YAAe,GAA5DiB,EAfM,KAecC,EAfd,OAgBuClB,YAAe,GAA5DmB,EAhBM,KAgBcC,EAhBd,QAiB6CpB,YAAe,GAAlEqB,GAjBM,gBAkB6CrB,YAAe,IAAlEsB,GAlBM,MAkBiBC,GAlBjB,SAmByCvB,YAAe,GAA9DwB,GAnBM,MAmBeC,GAnBf,MA0BPC,GAA2B,SAACC,GAC9BzB,EAAY,WACM0B,IAAdD,GACAE,GAAYF,IAIdG,GAA0B,WAC9BZ,GAAsB,GACtBE,GAAsB,GACtBG,IAAyB,IAErBQ,GAAyB,WAC7Bb,GAAsB,GACtBE,GAAsB,GACtBG,IAAyB,IAGrBM,GAAW,mCAAG,WAAOF,GAAP,sFAClBzE,QAAQ8E,KAAK,kBACbF,KAEAnB,EADuB,CAAEsB,aAAc,GAAIC,SAAU,GAAIC,SAAU,KAE7DC,EAAoB,IAAIC,IAAkBlC,EAAcE,GAL5C,SAMZ+B,EAAkBE,mBANN,cAOlBxB,EAAkBa,GACZY,EAAyBH,EAAkBI,2BAA2Bb,EAhCpE,IAiCc,IAAIlF,IACpBgG,EAAK,IAAInH,IAAaiF,EAAgBJ,GAV1B,UAWKsC,EAAGhH,cAAc8G,GAXtB,eAWZG,EAXY,OAYZC,EAAelC,GAAmBiC,GACxC/B,EAAagC,GACb9B,EAAoB,IAAI+B,IAAiBL,EAAwBG,IACjEX,KAEA7E,QAAQ2F,QAAQ,kBAjBE,+DAAH,sDAqBbC,GAAW,mCAAG,0GAElBhB,KAEQiB,EAAcrC,EAAUyB,SAAS3E,KAAI,SAAAwF,GAAI,OAAIA,EAAKC,MAClDC,EAAcxC,EAAUwB,SAAS1E,KAAI,SAAAwF,GAAI,OAAIA,EAAKC,MACxD/F,QAAQC,IAAI4F,EAAarC,GACzBE,EAAiBuC,qBAAqB,WAAYJ,GAClDnC,EAAiBuC,qBAAqB,WAAYD,GAE5CE,EAAoBxC,EAAiByC,gBAAgB,YACrDC,EAAoB1C,EAAiByC,gBAAgB,YAErDE,EAAyBH,EAAkB5F,KAAI,SAAAgG,GAAQ,OAAIrD,EAAasD,OAAO,cAAe,CAAC1H,YAAayH,EAASzH,YAAa2H,aAAcF,EAASE,kBACzJC,EAAyBL,EAAkB9F,KAAI,SAAAgG,GAAQ,OAAIrD,EAAasD,OAAO,cAAe,CAAC1H,YAAayH,EAASzH,YAAa2H,aAAcF,EAASE,kBACzJE,EAfU,kBAeiBL,IAfjB,OAe4CI,IAEtDE,EAAiB,IAAIC,MAAMP,EAAuB1H,QAAQkI,KAAK,GAC/DC,EAAiB,IAAIF,MAAMH,EAAuB9H,QAAQkI,KAAK,GAC/DE,EAAyBJ,EAAeK,OAAOF,GAE/CG,EAAwB,CAC5BC,eAAgB,qBAChBC,aAAa,GAAD,eAAMT,IAAN,OAA+BvD,EAAegE,eAC1DC,eAAe,GAAD,eAAML,IAAN,OAAiC5D,EAAeiE,iBAC9DvD,cAAeA,GAEjB7D,QAAQC,IAAIgH,GACZ7D,EAAkB6D,GAMZI,EAAmB,CAAEtC,aAAcvB,EAAUuB,aAAcC,SAAU,GAAIC,SAAU,IACzFxB,EAAa4D,GACbrH,QAAQC,IAAI,kBACZ4E,KArCgB,4CAAH,qDAwCTyC,GAAY,mCAAG,WAAOjE,GAAP,8FACjBkB,IAAuB,GACvBjB,EAAkBD,GACZkE,EAAgB,IAAIC,IAAcnE,GAHvB,SAIgBkE,EAAcE,uCAJ9B,OAIXC,EAJW,OAMXzE,EAAeyE,EAAmBpJ,cACxC4E,EAAgBD,GACV0E,EAAgBD,EAAmBE,cAAcC,eACjDC,EAAoBH,EAAcI,uBAElCX,EAAiBO,EAAcK,oBAC/BC,EAAsBH,EAAkBxH,KAAI,SAAA4H,GAC9C,IAAM1B,EAAe0B,EAAU,UACzBrJ,EAAcqJ,EAAU,SAC9B,OAAOjF,EAAasD,OAAO,cAAe,CAACC,eAAc3H,mBAEvDsJ,EAAgBT,EAAmBE,cAAcQ,SACjDC,EAAoBF,EAAcG,QAAO,SAACC,GAAD,OAASA,EAAKC,SAAS,aAAyB,iBAATD,GAAsC,gBAATA,KACnHzE,EAAsBuE,GACtBrI,QAAQC,IAAI,gCAOZmD,EAN8B,CAC1B8D,eAAgB,qBAChBC,aAAcc,EACdb,eAAgBA,EAChBvD,cAAewE,IAQnBrE,GAAsB,GACtBE,GAAsB,GACtBG,IAAyB,GAGzBrE,QAAQC,IAAI,mBAtCK,4CAAH,sDAyCZwI,GAAc,mCAAG,2FACrB7D,KACMM,EAAoB,IAAIC,IAAkBlC,EAAcE,GAFzC,SAGf+B,EAAkBE,mBAHH,OAIrBF,EAAkBwD,oCAClB7D,KALqB,2CAAH,qDAQpB,SAAStB,GAAmBoF,GACxB,MAAO,CACH5D,aAAc4D,EAASrI,KAAI,SAACsI,EAASC,GAAS,MAAO,CAAC9C,GAAI8C,EAAKC,QAASF,MACxE5D,SAAU,GACVC,SAAU,IA0BlB,OACI,uBAAK8D,MAAO,CAACC,OAAQ,eAErB,gBAAC,IAAD,KAGA,gBAAC,IAAD,KACA,gBAAC,IAAD,CAAO7H,IAAK8H,IAAMF,MAAO,CAACG,YAAY,MAAOtH,OAAO,WAGpD,gBAAC,IAAD,KACA,gBAAC,IAAD,CAAYmH,MAAO,CAAC5G,MAAO,QAASgH,WAAW,QAA/C,IAAwD,gBAAC,IAAD,SAKxD,gBAAC,IAAD,KAEA,gBAAC,IAAD,CAAMC,WAAS,EAACC,QAAQ,SAASC,QAAS,EAAGP,MAAO,CAACQ,aAAc,KAEnE,gBAAC,IAAD,CAAMxK,IAAK,EAAG+G,MAAI,GAQd,gBAAC,IAAD,CAAQ0D,UAAWzF,EAAoB0F,QAAQ,YAAYC,gBAAc,cAAcC,gBAAc,OAAOC,QA9LnF,SAACC,GAC9B7G,EAAY6G,EAAMC,iBA6Ld,SAGA,gBAAC,IAAD,CACA/D,GAAG,cACHhD,SAAUA,EACVgH,aAAW,EACXC,KAAMC,QAAQlH,GACdmH,QAAS1F,IAET,gBAAC,IAAD,CAAUoF,QAAS,kBAAIpF,GAAyB,YAAhD,UACA,gBAAC,IAAD,CAAUoF,QAAS,kBAAIpF,GAAyB,cAAhD,YACA,gBAAC,IAAD,CAAUoF,QAAS,kBAAIpF,GAAyB,cAAhD,cAKJ,gBAAC,IAAD,CAAMzF,IAAK,EAAG+G,MAAI,GAClB,gBAAC,IAAD,CAAQ0D,UAAWvF,EAAoBwF,QAAQ,YAAYG,QAAShE,IAApE,UAGA,gBAAC,IAAD,CAAM7G,IAAK,EAAG+G,MAAI,GAClB,gBAAC,IAAD,CAAQ0D,UAAWrF,GAAuBsF,QAAQ,YAAYG,QAAS,cAAvE,aAEA,gBAAC,IAAD,CAAM7K,IAAK,EAAG+G,MAAI,GAClB,gBAAC,IAAD,CAAQ0D,UAAWpF,GAAuBqF,QAAQ,YAAYG,QAASnB,IAAvE,aAEA,gBAAC,IAAD,CAAM1J,IAAK,EAAG+G,MAAI,GAClB,gBAAC,IAAD,CAAQ0D,UAAWlF,GAAqBmF,QAAQ,YAAYU,UAAU,QAAQP,QAAS,kBAAI5J,QAAQC,IAAI,aAAvG,SAEI,yBAAQmK,KAAK,OACLC,QAAM,EAACC,gBAAgB,OACvBC,aAAa,OACbC,YAAY,OACZC,WAAW,OACXC,UAAU,OACVC,UAAQ,EACRC,SAAY,SAACC,GAAevD,GAAauD,UAOzD,gBAAC,IAAD,CAAqBD,SA9FrB,SAAkBE,EAAUC,EAAaC,EAAaC,GAAW,IAAD,EAC5D,GAAIA,EAAU,CAAC,IAAD,EACNC,GAASC,OACb3H,EAAUsH,GACVtH,EAAUyH,GACVF,EACAC,GAEF,OAAOvH,EAAa,OAAD,UACdD,IADc,MAEhBsH,GAAWI,EAAO,GAFF,EAGhBD,GAAWC,EAAO,GAHF,KAOrB,IAAMA,GAASE,OAAK5H,EAAUsH,GAAWC,EAAaC,GACtD,OAAOvH,EAAa,OAAD,UACdD,IADc,MAEhBsH,GAAWI,EAFK,OA+EnB,2BAEA,yBAAOnC,MAAS,CAACsC,UAAU,OAAQC,gBAAiB,QAASC,YAAa,MAAOhC,aAAc,KAA/F,gBAEA,uBAAKiC,UAAU,gBAEf,gBAAC,IAAD,CACKA,UAAU,YACXzF,GAAG,eACH0F,YAAa,EACbC,UAAW,IAGVlI,EAAUuB,aAAazE,KAAI,SAAAwF,GAAI,OAC9B,gBAAC,IAAD,CAAU/G,IAAK+G,EAAKC,IAClB,uBAAKyF,UAAU,aACX,uBAAKA,UAAU,oBAAoBzC,MAAS,CAAC4C,gBAAgB,OAAS7F,EAAKgD,QAAf,cASxE,gBAAC,IAAD,KAEE,yBAAOC,MAAS,CAACsC,UAAU,OAAQC,gBAAiB,QAASC,YAAa,MAAOK,WAAY,OAAQrC,aAAa,SAAlH,YAGA,yBAAOR,OAAK,GAAKsC,UAAU,OAAQC,gBAAiB,QAASO,aAAc,KAAMtC,aAAc,EAAGqC,WAAY,OAAQE,OAAQ,QAAlH,eAAwI,OAAxI,IAAZ,aAID,gBAAC,IAAD,KAEC,gBAAC,IAAD,CACEN,UAAU,oBACVzF,GAAG,WACH0F,YAAa,EACbC,UAAW,IAGVlI,EAAUwB,SAAS1E,KAAI,SAAAwF,GAAI,OAC1B,gBAAC,IAAD,CAAU/G,IAAK+G,EAAKC,IAClB,uBAAKyF,UAAU,aACX,uBAAKA,UAAU,oBAAoBzC,MAAS,CAAC4C,gBAAgB,OAAQ7F,EAAKgD,QAAd,aAStE,gBAAC,IAAD,CACE0C,UAAU,oBACVzF,GAAG,WACH0F,YAAa,EACbC,UAAW,IAEVlI,EAAUyB,SAAS3E,KAAI,SAAAwF,GAAI,OAC1B,gBAAC,IAAD,CAAU/G,IAAK+G,EAAKC,IAClB,uBAAKyF,UAAU,aACf,uBAAKA,UAAU,oBAAoBzC,MAAS,CAAC4C,gBAAgB,OAAQ7F,EAAKgD,QAAd","file":"component---src-pages-index-img-prov-2-js-fa41c3284026bae5b140.js","sourcesContent":["import {ImageProvider2} from './ImageProvider2';\r\nimport UserUploadFileHandler from './UserUploadFileHandler'\r\nexport default class ImageHandler {\r\n    constructor(fileListObect, data_provider) {\r\n        this.file_handler = new UserUploadFileHandler(fileListObect)\r\n        this.data_provider = data_provider\r\n        this.images_seen = {};\r\n    }\r\n    getObjsToURLs = async function(objects) { // takes {ImageNumber: .. ObjectNumber: .. }\r\n        var urls = [];\r\n        for (var i = 0; i < objects.length; i++) {\r\n            var cur_ImageNum = objects[i].ImageNumber;\r\n            var image_info = [];\r\n            //if image is already seen, needs to be fixed to take care of the canvas\r\n            //objects\r\n            // if (this.images_seen.hasOwnProperty(cur_ImageNum.toString())) {\r\n            //      image_info = Object.assign({}, this.images_seen[cur_ImageNum.toString()]);\r\n            //  }\r\n           //  else {\r\n                 var key = cur_ImageNum.toString()\r\n                 image_info = await this.getImagefromFile(cur_ImageNum)\r\n                 this.images_seen[key] = image_info\r\n           //  }\r\n             var cords = this.data_provider.getCordsforCellDisplay(objects[i])\r\n             var ip = new ImageProvider2(image_info, cords)\r\n             var url = await ip.getDataURL()\r\n             urls.push(url)           \r\n         }\r\n         return urls;\r\n\r\n    }\r\n    getImgUrl = async function(object) { //takes {ImageNumber:...}\r\n        var images = this.getImagesfromFile(object);\r\n        var ip = new ImageProvider2(images)\r\n        return ip.getDataUrl()\r\n    }\r\n    // returns array of                \r\n    getImagefromFile = async function(object) {\r\n        console.log(object)\r\n        var images_path = this.data_provider.returnAllImgFileNames(object)\r\n\r\n        var images = await Promise.all(images_path.map(image_path => {\r\n            var file = this.file_handler.findFile(image_path.filename)\r\n            return this.file_handler.fileReaderPromiseImage(file).then( image =>{\r\n                return this.makeImage(image);\r\n            })\r\n         }))\r\n        var image_info = []\r\n        for (var i = 0; i < images.length; i++) {\r\n            delete images_path.filename\r\n            images_path[i].image = images[i]\r\n        }\r\n        return images_path\r\n    }\r\n    makeImage(image) {\r\n        var img = new Image()\r\n        img.src = image\r\n        return img\r\n    }\r\n}\r\nexport {ImageHandler}","\r\n\r\nexport default class ImageProvider2 {\r\n    constructor(img_info, cords = {}, box_dim = {}, image_type = 'object') { // {images_info : [{image : image channel: color} x 3] cord_x: x, cord_y: y }\r\n        this.img_info = img_info\r\n        this.box_dim = box_dim\r\n        this.image_type = image_type\r\n        this.cords = cords\r\n        this.canvases = {}\r\n\r\n    }\r\n    setDimensionsofImg() {\r\n        if (this.image_type === 'object') {  // if no cords\r\n            this.box_dim.h = 40;\r\n            this.box_dim.l = 40\r\n        }\r\n        if (this.image_type === 'image') {\r\n            this.box_dim.l = this.img_info[0].image.width\r\n            this.box_dim.h = this.img_info[0].image.height\r\n        }\r\n    }\r\n    getDataURL() {\r\n        this.setDimensionsofImg()\r\n        var main_canvas = document.createElement(`canvas`); \r\n    \r\n        main_canvas.width = this.img_info[0].image.width;\r\n        main_canvas.height = this.img_info[0].image.height;  \r\n        var ctx = main_canvas.getContext('2d');   \r\n\r\n        for (var i = 0; i < this.img_info.length; i++) {\r\n            var canID = this.img_info[i].color\r\n            var canvas = document.createElement(`canvas`)\r\n            this.canvases[canID] = canvas\r\n      }\r\n\r\n      for(var i = 0; i < this.img_info.length; i++) {\r\n            var canID = this.img_info[i].color.toString()\r\n            this.createColorCanvas(this.img_info[i].image, canID)\r\n       }\r\n       ctx.globalCompositeOperation = 'lighter';\r\n       for (var i = 0; i < this.img_info.length; i++) {\r\n            var img_channel = this.img_info[i];\r\n            ctx.drawImage(this.canvases[img_channel.color], this.cords.x, this.cords.y,\r\n            this.box_dim.h, this.box_dim.l, 0, 0, main_canvas.width, main_canvas.height)\r\n     \r\n       }\r\n     ctx.globalCompositeOperation = 'source-over';              \r\n     return main_canvas.toDataURL();\r\n }\r\n \r\n    // initialzeCanvases() {     \r\n    //     return this.images_info.map(image_info => { //images_info = [{image : image, channel: color, cord_x: x, cord_y: y, canvas: canvas}] {}}\r\n    //         var canvas = document.getElementById(\"canvas\");\r\n    //         var canvas_obj = {'canvas': canvas} \r\n    //         var a = Object.assign(image_info, canvas_obj);    \r\n    //         console.log(a)\r\n    //         return a;\r\n    //     })\r\n    // }\r\n    createColorCanvas (image, color) {\r\n    /* console.log(image) */\r\n    var height = image.height;\r\n    var width =  image.width;  \r\n    // image.crossOrigin = 'Anonymous';  \r\n    this.canvases[color].width = width;\r\n    this.canvases[color].height = height;\r\n    var ctx = this.canvases[color].getContext(\"2d\");\r\n    ctx.globalCompositeOperation='source-over'; \r\n    ctx.drawImage(image,  0, 0 )\r\n    ctx.globalCompositeOperation='multiply';\r\n    ctx.fillStyle = color;\r\n    ctx.fillRect(0, 0, width ,height);  \r\n    ctx.globalCompositeOperation='source-over'; \r\n    // var imagedata = ctx.getImageData(this.cords.x, this.cords.y, 40, 40)\r\n    // var data = imagedata.data\r\n    // var max = -1\r\n    // var obj = {}\r\n    // for (var i = 0; i < data.length; i += 4) {\r\n    //     if (data[i] > max) max = data[i]\r\n    //     if (!(color === 'red' && data[i] > 20)) \r\n    //         obj[key] = data[i]\r\n\r\n    // }\r\n    // for (var key in obj) {\r\n    //     var index = parseInt(key)\r\n    //     data[key] = ((data[key]) / max) * 255 \r\n    // }\r\n    // ctx.putImageData(new ImageData(data, 40, 40), this.cords.x, this.cords.y)\r\n }\r\n    //from https://stackoverflow.com/questions/10521978/html5-canvas-image-contrast\r\n    // contrastImage(imgData, contrast){  //input range [-100..100]\r\n    //     var d = imgData.data;\r\n    //     contrast = (contrast/100) + 1;  //convert to decimal & shift range: [0..2]\r\n    //     var intercept = 128 * (1 - contrast);\r\n    //     for(var i=0;i<d.length;i+=4){   //r,g,b,a\r\n    //         d[i] = d[i]*contrast + intercept;\r\n    //         d[i+1] = d[i+1]*contrast + intercept;\r\n    //         d[i+2] = d[i+2]*contrast + intercept;\r\n    //     }\r\n    //     return imgData;\r\n    // }yarn \r\n};\r\n\r\nexport {ImageProvider2}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { Row, Col, Container} from \"reactstrap\";\r\nimport {Box, Button, Grid, IconButton, Menu, MenuItem}from '@material-ui/core'; \r\nimport logo from '../CPA_newlogo.png';\r\nimport {Image, Dropdown, DropdownButton} from 'react-bootstrap';\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\r\n\r\nimport UploadHandler from '../classes/UploadHandler'\r\nimport {ClassifierManager} from '../classes/ClassifierManager'\r\nimport {ImageProvider2} from '../classes/ImageProvider2.js';\r\nimport UserUploadFileHandler from '../classes/UserUploadFileHandler'\r\nimport {Classifier} from '../classes/Classifier'\r\nimport {ImageGridManager}  from '../classes/imGridManager'\r\nimport {ImageHandler}  from '../classes/ImageHandler'\r\n\r\nimport {\r\n    GridContextProvider,\r\n    GridDropZone,\r\n    GridItem,\r\n    swap,\r\n    move\r\n  } from \"react-grid-dnd\";\r\n  \r\n  import \"../dndstyles.css\";\r\n\r\n\r\n\r\nfunction TestUI(){\r\n    \r\n    \r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const [dataProvider, setDataProvider] = React.useState(null)\r\n\r\n    // var classifierManager = null;\r\n    // const [classifierManager, setClassifierManager] = React.useState(null)\r\n    const [trainingObject, setTrainingObject] = React.useState(null)\r\n    const [fileListObject, setFileListObject] = React.useState(null)\r\n    const [tileState, setTileState] = React.useState( constructTileState([]) );\r\n    const [imageGridManager, setImageGridManager] = React.useState(null)\r\n    const [lastFetchState, setLastFetchState] = React.useState(null)\r\n    const [featuresToUse, setFeaturesToUseState] = React.useState(null)\r\n\r\n    const [fetchButtonEnabled, setFetchButtonEnabled] = React.useState(false)\r\n    const [trainButtonEnabled, setTrainButtonEnabled] = React.useState(false)\r\n    const [evaluateButtonEnabled, setEvaluateButtonEnabled] = React.useState(false)\r\n    const [downloadButtonEnabled, setDownloadButtonEnabled] = React.useState(false)\r\n    const [uploadButtonEnabled, setUploadButtonEnabled] = React.useState(true)\r\n    const N = 20\r\n\r\n    const handleClickFetchDropDown = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseFetchDropDown = (fetchType) => {\r\n        setAnchorEl(null);\r\n        if (fetchType !== undefined) {\r\n            handleFetch(fetchType)\r\n        }\r\n    };\r\n\r\n    const disableIterationButtons = () => {\r\n      setFetchButtonEnabled(false)\r\n      setTrainButtonEnabled(false)\r\n      setDownloadButtonEnabled(false)\r\n    }\r\n    const enableIterationButtons = () => {\r\n      setFetchButtonEnabled(true)\r\n      setTrainButtonEnabled(true)\r\n      setDownloadButtonEnabled(true)\r\n    }\r\n\r\n    const handleFetch = async (fetchType) => {\r\n      console.time('ImageProvider2')\r\n      disableIterationButtons()\r\n      const emptyTileState = { unclassified: [], positive: [], negative: []}\r\n      setTileState(emptyTileState)\r\n      const classifierManager = new ClassifierManager(dataProvider, trainingObject)\r\n      await classifierManager.initTrainPromise()\r\n      setLastFetchState(fetchType)\r\n      const classedCellPairObjects = classifierManager.fetchUpToNCellPairsByClass(fetchType, N)\r\n      const imageProvider = new ImageProvider2();\r\n      const ih = new ImageHandler(fileListObject, dataProvider)\r\n      const dataURLS = await ih.getObjsToURLs(classedCellPairObjects)\r\n      const newTileState = constructTileState(dataURLS)\r\n      setTileState(newTileState)\r\n      setImageGridManager(new ImageGridManager(classedCellPairObjects, dataURLS))\r\n      enableIterationButtons()\r\n    \r\n      console.timeEnd('ImageProvider2')\r\n      return\r\n  }\r\n\r\n  const handleTrain = async () => {\r\n\r\n    disableIterationButtons()\r\n\r\n      const negativeIDs = tileState.negative.map(item => item.id)\r\n      const positiveIDs = tileState.positive.map(item => item.id)\r\n      console.log(negativeIDs, tileState)\r\n      imageGridManager.setClassByIndexArray('negative', negativeIDs)\r\n      imageGridManager.setClassByIndexArray('positive', positiveIDs)\r\n\r\n      const negativeCellPairs = imageGridManager.getPairsByClass('negative')\r\n      const positiveCellPairs = imageGridManager.getPairsByClass('positive')\r\n \r\n      const negativeObjectDataRows = negativeCellPairs.map(cellPair => dataProvider.getRow('object_data', {ImageNumber: cellPair.ImageNumber, ObjectNumber: cellPair.ObjectNumber}))\r\n      const positiveObjectDataRows = positiveCellPairs.map(cellPair => dataProvider.getRow('object_data', {ImageNumber: cellPair.ImageNumber, ObjectNumber: cellPair.ObjectNumber}))\r\n      const trainingDataAddition = [...negativeObjectDataRows, ...positiveObjectDataRows]\r\n\r\n      const negativeLabels = new Array(negativeObjectDataRows.length).fill(0)\r\n      const positiveLabels = new Array(positiveObjectDataRows.length).fill(1)\r\n      const trainingLabelsAddition = negativeLabels.concat(positiveLabels)\r\n\r\n      const UpdatedTrainingObject = {\r\n        classifierType: \"LogisticRegression\",\r\n        trainingData: [...trainingDataAddition, ...trainingObject.trainingData],\r\n        trainingLabels: [...trainingLabelsAddition, ...trainingObject.trainingLabels],\r\n        featuresToUse: featuresToUse\r\n      }\r\n      console.log(UpdatedTrainingObject)\r\n      setTrainingObject(UpdatedTrainingObject)\r\n      // const newClassifierManager = new ClassifierManager(dataProvider, UpdatedTrainingObject)\r\n      \r\n      \r\n      // setClassifierManager(newClassifierManager)\r\n\r\n      const clearedTileState = { unclassified: tileState.unclassified, positive: [], negative: []}\r\n      setTileState(clearedTileState)\r\n      console.log(\"finished train\")\r\n      enableIterationButtons()\r\n  }\r\n\r\n    const handleUpload = async (fileListObject) => {\r\n        setUploadButtonEnabled(false)\r\n        setFileListObject(fileListObject)\r\n        const uploadHandler = new UploadHandler(fileListObject)\r\n        const uploadReturnObject = await uploadHandler.getDataHandlerandStartingTrainingSet();\r\n\r\n        const dataProvider = uploadReturnObject.data_provider\r\n        setDataProvider(dataProvider)\r\n        const trainingTable = uploadReturnObject.training_data.training_table\r\n        const trainingDataTable = trainingTable.getDataColumnsPaired()\r\n\r\n        const trainingLabels = trainingTable.getTrainingLabels()\r\n        const initialTrainingData = trainingDataTable.map(row_object => {\r\n            const ObjectNumber = row_object['objectnum']\r\n            const ImageNumber = row_object['imagenum']\r\n            return dataProvider.getRow('object_data', {ObjectNumber, ImageNumber})\r\n        })\r\n        const totalFeatures = uploadReturnObject.training_data.features\r\n        const tempFeaturesToUse = totalFeatures.filter((elem)=>!elem.includes(\"Location\") && (elem !== \"ObjectNumber\") && (elem !== \"ImageNumber\"))\r\n        setFeaturesToUseState(tempFeaturesToUse)\r\n        console.log(\"finished data initialization\")\r\n        const initialTrainingObject = {\r\n            classifierType: \"LogisticRegression\",\r\n            trainingData: initialTrainingData,\r\n            trainingLabels: trainingLabels,\r\n            featuresToUse: tempFeaturesToUse\r\n        }\r\n        setTrainingObject(initialTrainingObject)\r\n        // console.log(\"starting initial training\")\r\n        // const newClassifierManager = new ClassifierManager(dataProvider, initialTrainingObject)\r\n        \r\n        // setClassifierManager(newClassifierManager)\r\n\r\n        setFetchButtonEnabled(true)\r\n        setTrainButtonEnabled(true)\r\n        setDownloadButtonEnabled(true)\r\n        \r\n        \r\n        console.log(\"finished upload\")\r\n    }\r\n\r\n    const handleDownload = async () => {\r\n      disableIterationButtons()\r\n      const classifierManager = new ClassifierManager(dataProvider, trainingObject)\r\n      await classifierManager.initTrainPromise()\r\n      classifierManager.userDownloadClassifierSpecPromise()\r\n      enableIterationButtons()\r\n    }\r\n\r\n    function constructTileState(dataURLs) {\r\n        return {\r\n            unclassified: dataURLs.map((dataURL, idx) => {return {id: idx, address: dataURL}}),  \r\n            positive: [],\r\n            negative: []\r\n        };\r\n    }\r\n\r\n    function onChange(sourceId, sourceIndex, targetIndex, targetId) {\r\n        if (targetId) {\r\n          const result = move(\r\n            tileState[sourceId],\r\n            tileState[targetId],\r\n            sourceIndex,\r\n            targetIndex\r\n          );\r\n          return setTileState({\r\n            ...tileState,\r\n            [sourceId]: result[0],\r\n            [targetId]: result[1]\r\n          });\r\n        }\r\n    \r\n        const result = swap(tileState[sourceId], sourceIndex, targetIndex);\r\n        return setTileState({\r\n          ...tileState,\r\n          [sourceId]: result\r\n        });\r\n      }\r\n    \r\n    return (\r\n        <div style={{resize: 'horizontal'}}>\r\n    \r\n        <Row>\r\n       \r\n        \r\n        <Col>\r\n        <Image src={logo} style={{marginRight:\"40%\", height:'90px'}}></Image>\r\n        </Col>\r\n\r\n        <Col >\r\n        <IconButton style={{color: \"black\", marginLeft:\"50%\"}}> <SaveAltIcon /></IconButton> \r\n        </Col>\r\n\r\n\r\n        </Row>\r\n        <Row>\r\n        \r\n        <Grid container justify=\"center\" spacing={2} style={{marginBottom: 15}}>\r\n       \r\n        <Grid key={0} item>\r\n        {/* <DropdownButton variant=\"secondary\" title= \"Fetch\">\r\n        \r\n         <Dropdown.Item >Positive</Dropdown.Item>\r\n         <Dropdown.Item >Negative</Dropdown.Item>\r\n         <Dropdown.Item >Random</Dropdown.Item>\r\n        \r\n        </DropdownButton> */}\r\n            <Button disabled={!fetchButtonEnabled} variant=\"contained\" aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClickFetchDropDown}>\r\n            Fetch\r\n            </Button>\r\n            <Menu\r\n            id=\"simple-menu\"\r\n            anchorEl={anchorEl}\r\n            keepMounted\r\n            open={Boolean(anchorEl)}\r\n            onClose={handleCloseFetchDropDown}\r\n            >\r\n            <MenuItem onClick={()=>handleCloseFetchDropDown(\"random\")}>Random</MenuItem>\r\n            <MenuItem onClick={()=>handleCloseFetchDropDown(\"positive\")}>Positive</MenuItem>\r\n            <MenuItem onClick={()=>handleCloseFetchDropDown(\"negative\")}>Negative</MenuItem>\r\n            </Menu>\r\n    </Grid>\r\n\r\n\r\n        <Grid key={1} item>\r\n        <Button disabled={!trainButtonEnabled} variant=\"contained\" onClick={handleTrain}>Train</Button>\r\n        </Grid>\r\n\r\n        <Grid key={2} item>\r\n        <Button disabled={!evaluateButtonEnabled} variant=\"contained\" onClick={()=>{}}>Evaluate</Button>\r\n        </Grid>\r\n        <Grid key={3} item>\r\n        <Button disabled={!downloadButtonEnabled} variant=\"contained\" onClick={handleDownload}>Download</Button>\r\n        </Grid>\r\n        <Grid key={4} item>\r\n        <Button disabled={!uploadButtonEnabled} variant=\"contained\" component=\"label\" onClick={()=>console.log(\"Upload!\")}> \r\n            Upload\r\n            <input  type=\"file\"\r\n                    hidden webkitdirectory=\"true\"\r\n                    mozdirectory=\"true\"\r\n                    msdirectory=\"true\"\r\n                    odirectory=\"true\"\r\n                    directory=\"true\"\r\n                    multiple\r\n                    onChange = {(eventObject)=>{handleUpload(eventObject)}}   \r\n            />\r\n        </Button>\r\n        </Grid>\r\n    </Grid>\r\n    </Row>\r\n\r\n    <GridContextProvider onChange={onChange}>\r\n        <div>\r\n        \r\n        <label style = {{textAlign:\"left\", backgroundColor: 'white', paddingLeft: \"10%\", marginBottom: 0.5} }>Unclassified</label>\r\n        \r\n        <div className=\"topContainer\">\r\n       \r\n        <GridDropZone\r\n             className=\"dropzone \"\r\n            id=\"unclassified\"\r\n            boxesPerRow={8}\r\n            rowHeight={70}\r\n          >\r\n             \r\n            {tileState.unclassified.map(item => (\r\n              <GridItem key={item.id}>\r\n                <div className=\"grid-item\" >\r\n                    <div className=\"grid-item-content\" style = {{backgroundImage:  `url(${item.address})`}} >\r\n                        \r\n                        </div> \r\n                </div>\r\n              </GridItem>\r\n            ))}\r\n          </GridDropZone>\r\n          </div>\r\n        \r\n        <Row>\r\n     \r\n          <label style = {{textAlign:\"left\", backgroundColor: 'white', paddingLeft: \"11%\", userSelect: \"none\", marginBottom:\"0.5%\"} }>Positive</label> \r\n    \r\n        \r\n          <label style = {{textAlign:\"left\", backgroundColor: 'white', paddingRight: \"8%\", marginBottom: 0, userSelect: \"none\", margin: \"auto\",  marginBottom:\"0.5%\"} }>Negative</label>\r\n       \r\n          </Row>\r\n         \r\n         <Row>\r\n\r\n          <GridDropZone\r\n            className=\"dropzone positive\"\r\n            id=\"positive\"\r\n            boxesPerRow={4}\r\n            rowHeight={70}\r\n          >\r\n            \r\n            {tileState.positive.map(item => (\r\n              <GridItem key={item.id}>\r\n                <div className=\"grid-item\"> \r\n                    <div className=\"grid-item-content\" style = {{backgroundImage: `url(${item.address})`}}>\r\n                         \r\n                        </div>  \r\n                </div>\r\n              </GridItem>\r\n            ))}\r\n          </GridDropZone>\r\n   \r\n      \r\n          <GridDropZone\r\n            className=\"dropzone negative\"\r\n            id=\"negative\"\r\n            boxesPerRow={4}\r\n            rowHeight={70}\r\n          >\r\n            {tileState.negative.map(item => (\r\n              <GridItem key={item.id}>\r\n                <div className=\"grid-item\">\r\n                <div className=\"grid-item-content\" style = {{backgroundImage: `url(${item.address})`}}>\r\n                        \r\n                        </div>      \r\n                </div>\r\n              </GridItem>\r\n            ))}\r\n          </GridDropZone>\r\n\r\n     \r\n      \r\n        </Row>\r\n        </div>\r\n      </GridContextProvider>\r\n \r\n    </div>\r\n\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default TestUI; "],"sourceRoot":""}