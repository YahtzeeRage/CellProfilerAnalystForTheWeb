{"version":3,"sources":["webpack://gatsby-test/./src/pages/RoughUI.js"],"names":["React","anchorEl","setAnchorEl","dataProvider","setDataProvider","trainingObject","setTrainingObject","userUploadFileHandler","setUserUploadFileHandler","constructTileState","tileState","setTileState","imageGridManager","setImageGridManager","setLastFetchState","featuresToUse","setFeaturesToUseState","handleCloseFetchDropDown","fetchType","undefined","handleFetch","classifierManager","ClassifierManager","initTrainPromise","console","log","classedCellPairObjects","fetchUpToNCellPairsByClass","imageProvider","ImageProvider","dataURLPromiseArray","map","CellPair","promiseImages","returnAllImgFileNames","ImageNumber","name","findFile","file","fileReaderPromiseImage","Promise","all","then","images","coords","getCordsforCellDisplay","getDataURLPromise","dataURLs","newTileState","ImageGridManager","handleTrain","negativeIDs","negative","item","id","positiveIDs","positive","setClassByIndexArray","negativeCellPairs","getPairsByClass","positiveCellPairs","negativeObjectDataRows","cellPair","getRow","ObjectNumber","positiveObjectDataRows","trainingDataAddition","negativeLabels","Array","length","fill","positiveLabels","trainingLabelsAddition","concat","UpdatedTrainingObject","classifierType","trainingData","trainingLabels","clearedTileState","unclassified","handleUpload","eventObject","UserUploadFileHandler","uploadHandler","UploadHandler","getDataHandlerandStartingTrainingSet","uploadReturnObject","data_provider","trainingTable","training_data","training_table","trainingDataTable","getDataColumnsPaired","getTrainingLabels","initialTrainingData","row_object","totalFeatures","features","tempFeaturesToUse","filter","elem","includes","handleDownload","userDownloadClassifierSpecPromise","dataURL","idx","address","style","resize","src","logo","marginRight","height","color","marginLeft","container","justify","spacing","marginBottom","key","variant","aria-controls","aria-haspopup","onClick","event","currentTarget","keepMounted","open","Boolean","onClose","component","type","hidden","webkitdirectory","mozdirectory","msdirectory","odirectory","directory","multiple","onChange","sourceId","sourceIndex","targetIndex","targetId","result","move","swap","textAlign","backgroundColor","paddingLeft","className","boxesPerRow","rowHeight","backgroundImage","userSelect","paddingRight","margin"],"mappings":"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","file":"component---src-pages-rough-ui-js-a87dd037e54261a2e915.js","sourcesContent":["import React from 'react';\nimport { Row, Col, Container} from \"reactstrap\";\nimport {Box, Button, Grid, IconButton, Menu, MenuItem}from '@material-ui/core'; \nimport logo from '../CPA_newlogo.png';\nimport {Image, Dropdown, DropdownButton} from 'react-bootstrap';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\n\nimport UploadHandler from '../classes/UploadHandler'\nimport {ClassifierManager} from '../classes/ClassifierManager'\nimport {ImageProvider} from '../classes/ImageProvider.js';\nimport UserUploadFileHandler from '../classes/UserUploadFileHandler'\nimport {Classifier} from '../classes/Classifier'\nimport {ImageGridManager}  from '../classes/imGridManager'\n\nimport {\n    GridContextProvider,\n    GridDropZone,\n    GridItem,\n    swap,\n    move\n  } from \"react-grid-dnd\";\n  \n  import \"../dndstyles.css\";\n\n\n\nfunction TestUI(){\n    \n    \n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const [dataProvider, setDataProvider] = React.useState(null)\n\n    // var classifierManager = null;\n    // const [classifierManager, setClassifierManager] = React.useState(null)\n    const [trainingObject, setTrainingObject] = React.useState(null)\n    const [userUploadFileHandler, setUserUploadFileHandler] = React.useState(null)\n    const [tileState, setTileState] = React.useState( constructTileState([]) );\n    const [imageGridManager, setImageGridManager] = React.useState(null)\n    const [lastFetchState, setLastFetchState] = React.useState(null)\n    const [featuresToUse, setFeaturesToUseState] = React.useState(null)\n    const N = 20\n\n    const handleClickFetchDropDown = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleCloseFetchDropDown = (fetchType) => {\n        setAnchorEl(null);\n        if (fetchType !== undefined) {\n            handleFetch(fetchType)\n        }\n    };\n\n    const handleFetch = async (fetchType) => {\n\n        const classifierManager = new ClassifierManager(dataProvider, trainingObject)\n        await classifierManager.initTrainPromise()\n\n        setLastFetchState(fetchType)\n        console.log(\"fetch \" + fetchType)\n        const classedCellPairObjects = classifierManager.fetchUpToNCellPairsByClass(fetchType, N)\n        const imageProvider = new ImageProvider();\n        var dataURLPromiseArray = null;\n        if (fetchType === \"random\") {\n            const dataURLPromiseArray = classedCellPairObjects.map(CellPair => {\n                const channelFileNames = dataProvider.returnAllImgFileNames(CellPair.ImageNumber)\n                const channelFiles = channelFileNames.map(name => { //Alternatively, we could have this.dp.returnAllImgPromisesPerImg({'ImageNumber': 2}, fh)\n                    return userUploadFileHandler.findFile(name)       // and abstract from 8-17 or more\n                })\n                const promiseImages = channelFiles.map(file => {\n                    const promiseImage =  userUploadFileHandler.fileReaderPromiseImage(file)\n                    return promiseImage;    \n                })\n                return Promise.all(promiseImages)\n                    .then(images => {\n                        const coords = dataProvider.getCordsforCellDisplay(CellPair)\n                        return imageProvider.getDataURLPromise(images, coords);   //The only method of imageprovider. If cords is left blank, it will produce a whole image. Should be\n                    })                                                //static class or function\n            })\n            const dataURLs = await Promise.all(dataURLPromiseArray)\n            const newTileState = constructTileState(dataURLs)\n            setTileState(newTileState)\n            console.log(newTileState)\n            console.log(dataURLs)\n            setImageGridManager(new ImageGridManager(classedCellPairObjects, dataURLs))\n\n            return\n        } \n\n        if (fetchType === \"positive\") {\n          dataURLPromiseArray = classedCellPairObjects.map(CellPair => {\n            const channelFileNames = dataProvider.returnAllImgFileNames(CellPair.ImageNumber)\n            const channelFiles = channelFileNames.map(name => { //Alternatively, we could have this.dp.returnAllImgPromisesPerImg({'ImageNumber': 2}, fh)\n                return userUploadFileHandler.findFile(name)       // and abstract from 8-17 or more\n            })\n            const promiseImages = channelFiles.map(file => {\n                const promiseImage =  userUploadFileHandler.fileReaderPromiseImage(file)\n                return promiseImage;    \n            })\n            return Promise.all(promiseImages)\n                .then(images => {\n                    const coords = dataProvider.getCordsforCellDisplay(CellPair)\n                    return imageProvider.getDataURLPromise(images, coords);   //The only method of imageprovider. If cords is left blank, it will produce a whole image. Should be\n                })                                                //static class or function\n        })\n        \n        const dataURLs = await Promise.all(dataURLPromiseArray)\n        const newTileState = constructTileState(dataURLs)\n        setTileState(newTileState)\n        console.log(newTileState)\n        console.log(dataURLs)\n        setImageGridManager(new ImageGridManager(classedCellPairObjects, dataURLs))\n        return\n      }\n\n      if (fetchType === 'negative') {\n        dataURLPromiseArray = classedCellPairObjects.map(CellPair => {\n          const channelFileNames = dataProvider.returnAllImgFileNames(CellPair.ImageNumber)\n          const channelFiles = channelFileNames.map(name => { //Alternatively, we could have this.dp.returnAllImgPromisesPerImg({'ImageNumber': 2}, fh)\n              return userUploadFileHandler.findFile(name)       // and abstract from 8-17 or more\n          })\n          const promiseImages = channelFiles.map(file => {\n              const promiseImage =  userUploadFileHandler.fileReaderPromiseImage(file)\n              return promiseImage;    \n          })\n          return Promise.all(promiseImages)\n              .then(images => {\n                  const coords = dataProvider.getCordsforCellDisplay(CellPair)\n                  return imageProvider.getDataURLPromise(images, coords);   //The only method of imageprovider. If cords is left blank, it will produce a whole image. Should be\n              })                                                //static class or function\n      })\n      \n      const dataURLs = await Promise.all(dataURLPromiseArray)\n      const newTileState = constructTileState(dataURLs)\n      setTileState(newTileState)\n      console.log(newTileState)\n      console.log(dataURLs)\n      setImageGridManager(new ImageGridManager(classedCellPairObjects, dataURLs))\n      return\n    }\n\n  }\n\n  const handleTrain = async () => {\n      const negativeIDs = tileState.negative.map(item => item.id)\n      const positiveIDs = tileState.positive.map(item => item.id)\n      console.log(negativeIDs, tileState)\n      imageGridManager.setClassByIndexArray('negative', negativeIDs)\n      imageGridManager.setClassByIndexArray('positive', positiveIDs)\n\n      const negativeCellPairs = imageGridManager.getPairsByClass('negative')\n      const positiveCellPairs = imageGridManager.getPairsByClass('positive')\n \n      const negativeObjectDataRows = negativeCellPairs.map(cellPair => dataProvider.getRow('object_data', {ImageNumber: cellPair.ImageNumber, ObjectNumber: cellPair.ObjectNumber}))\n      const positiveObjectDataRows = positiveCellPairs.map(cellPair => dataProvider.getRow('object_data', {ImageNumber: cellPair.ImageNumber, ObjectNumber: cellPair.ObjectNumber}))\n      const trainingDataAddition = [...negativeObjectDataRows, ...positiveObjectDataRows]\n\n      const negativeLabels = new Array(negativeObjectDataRows.length).fill(0)\n      const positiveLabels = new Array(positiveObjectDataRows.length).fill(1)\n      const trainingLabelsAddition = negativeLabels.concat(positiveLabels)\n\n      const UpdatedTrainingObject = {\n        classifierType: \"LogisticRegression\",\n        trainingData: [...trainingDataAddition, ...trainingObject.trainingData],\n        trainingLabels: [...trainingLabelsAddition, ...trainingObject.trainingLabels],\n        featuresToUse: featuresToUse\n      }\n      console.log(UpdatedTrainingObject)\n      setTrainingObject(UpdatedTrainingObject)\n      // const newClassifierManager = new ClassifierManager(dataProvider, UpdatedTrainingObject)\n      \n      \n      // setClassifierManager(newClassifierManager)\n\n      const clearedTileState = { unclassified: tileState.unclassified, positive: [], negative: []}\n      setTileState(clearedTileState)\n      console.log(\"finished train\")\n    \n  }\n\n    const handleUpload = async (eventObject) => {\n\n        const userUploadFileHandler = new UserUploadFileHandler(eventObject)\n        setUserUploadFileHandler(userUploadFileHandler)\n\n        const uploadHandler = new UploadHandler(eventObject)\n        const uploadReturnObject = await uploadHandler.getDataHandlerandStartingTrainingSet();\n\n        const dataProvider = uploadReturnObject.data_provider\n        setDataProvider(dataProvider)\n        const trainingTable = uploadReturnObject.training_data.training_table\n        const trainingDataTable = trainingTable.getDataColumnsPaired()\n\n        const trainingLabels = trainingTable.getTrainingLabels()\n        const initialTrainingData = trainingDataTable.map(row_object => {\n            const ObjectNumber = row_object['objectnum']\n            const ImageNumber = row_object['imagenum']\n            return dataProvider.getRow('object_data', {ObjectNumber, ImageNumber})\n        })\n        const totalFeatures = uploadReturnObject.training_data.features\n        const tempFeaturesToUse = totalFeatures.filter((elem)=>!elem.includes(\"Location\") && (elem !== \"ObjectNumber\") && (elem !== \"ImageNumber\"))\n        setFeaturesToUseState(tempFeaturesToUse)\n        console.log(\"finished data initialization\")\n        const initialTrainingObject = {\n            classifierType: \"LogisticRegression\",\n            trainingData: initialTrainingData,\n            trainingLabels: trainingLabels,\n            featuresToUse: tempFeaturesToUse\n        }\n        setTrainingObject(initialTrainingObject)\n        // console.log(\"starting initial training\")\n        // const newClassifierManager = new ClassifierManager(dataProvider, initialTrainingObject)\n        \n        // setClassifierManager(newClassifierManager)\n\n        \n\n        console.log(\"finished upload\")\n    }\n\n    const handleDownload = async () => {\n      const classifierManager = new ClassifierManager(dataProvider, trainingObject)\n      await classifierManager.initTrainPromise()\n      classifierManager.userDownloadClassifierSpecPromise()\n    }\n\n    function constructTileState(dataURLs) {\n        return {\n            unclassified: dataURLs.map((dataURL, idx) => {return {id: idx, address: dataURL}}),  \n            positive: [],\n            negative: []\n        };\n    }\n\n    function onChange(sourceId, sourceIndex, targetIndex, targetId) {\n        if (targetId) {\n          const result = move(\n            tileState[sourceId],\n            tileState[targetId],\n            sourceIndex,\n            targetIndex\n          );\n          return setTileState({\n            ...tileState,\n            [sourceId]: result[0],\n            [targetId]: result[1]\n          });\n        }\n    \n        const result = swap(tileState[sourceId], sourceIndex, targetIndex);\n        return setTileState({\n          ...tileState,\n          [sourceId]: result\n        });\n      }\n    \n    return (\n        <div style={{resize: 'horizontal'}}>\n    \n        <Row>\n       \n        \n        <Col>\n        <Image src={logo} style={{marginRight:\"40%\", height:'90px'}}></Image>\n        </Col>\n\n        <Col >\n        <IconButton style={{color: \"black\", marginLeft:\"50%\"}}> <SaveAltIcon /></IconButton> \n        </Col>\n\n\n        </Row>\n        <Row>\n        \n        <Grid container justify=\"center\" spacing={2} style={{marginBottom: 15}}>\n       \n        <Grid key={0} item>\n        {/* <DropdownButton variant=\"secondary\" title= \"Fetch\">\n        \n         <Dropdown.Item >Positive</Dropdown.Item>\n         <Dropdown.Item >Negative</Dropdown.Item>\n         <Dropdown.Item >Random</Dropdown.Item>\n        \n        </DropdownButton> */}\n            <Button variant=\"contained\" aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClickFetchDropDown}>\n            Fetch\n            </Button>\n            <Menu\n            id=\"simple-menu\"\n            anchorEl={anchorEl}\n            keepMounted\n            open={Boolean(anchorEl)}\n            onClose={handleCloseFetchDropDown}\n            >\n            <MenuItem onClick={()=>handleCloseFetchDropDown(\"random\")}>Random</MenuItem>\n            <MenuItem onClick={()=>handleCloseFetchDropDown(\"positive\")}>Positive</MenuItem>\n            <MenuItem onClick={()=>handleCloseFetchDropDown(\"negative\")}>Negative</MenuItem>\n            </Menu>\n    </Grid>\n\n\n        <Grid key={1} item>\n        <Button variant=\"contained\" onClick={handleTrain}>Train</Button>\n        </Grid>\n\n        <Grid key={2} item>\n        <Button variant=\"contained\" onClick={()=>{}}>Evaluate</Button>\n        </Grid>\n        <Grid key={3} item>\n        <Button variant=\"contained\" onClick={handleDownload}>Download</Button>\n        </Grid>\n        <Grid key={4} item>\n        <Button variant=\"contained\" component=\"label\" onClick={()=>console.log(\"Upload!\")}> \n            Upload\n            <input  type=\"file\"\n                    hidden webkitdirectory=\"true\"\n                    mozdirectory=\"true\"\n                    msdirectory=\"true\"\n                    odirectory=\"true\"\n                    directory=\"true\"\n                    multiple\n                    onChange = {(eventObject)=>{handleUpload(eventObject)}}   \n            />\n        </Button>\n        </Grid>\n    </Grid>\n    </Row>\n\n    <GridContextProvider onChange={onChange}>\n        <div>\n        \n        <label style = {{textAlign:\"left\", backgroundColor: 'white', paddingLeft: \"10%\", marginBottom: 0.5} }>Unclassified</label>\n        \n        <div className=\"topContainer\">\n       \n        <GridDropZone\n             className=\"dropzone \"\n            id=\"unclassified\"\n            boxesPerRow={8}\n            rowHeight={70}\n          >\n             \n            {tileState.unclassified.map(item => (\n              <GridItem key={item.id}>\n                <div className=\"grid-item\" >\n                    <div className=\"grid-item-content\" style = {{backgroundImage:  `url(${item.address})`}} >\n                        \n                        </div> \n                </div>\n              </GridItem>\n            ))}\n          </GridDropZone>\n          </div>\n        \n        <Row>\n     \n          <label style = {{textAlign:\"left\", backgroundColor: 'white', paddingLeft: \"11%\", userSelect: \"none\", marginBottom:\"0.5%\"} }>Positive</label> \n    \n        \n          <label style = {{textAlign:\"left\", backgroundColor: 'white', paddingRight: \"8%\", marginBottom: 0, userSelect: \"none\", margin: \"auto\",  marginBottom:\"0.5%\"} }>Negative</label>\n       \n          </Row>\n         \n         <Row>\n\n          <GridDropZone\n            className=\"dropzone positive\"\n            id=\"positive\"\n            boxesPerRow={4}\n            rowHeight={70}\n          >\n            \n            {tileState.positive.map(item => (\n              <GridItem key={item.id}>\n                <div className=\"grid-item\"> \n                    <div className=\"grid-item-content\" style = {{backgroundImage: `url(${item.address})`}}>\n                         \n                        </div>  \n                </div>\n              </GridItem>\n            ))}\n          </GridDropZone>\n   \n      \n          <GridDropZone\n            className=\"dropzone negative\"\n            id=\"negative\"\n            boxesPerRow={4}\n            rowHeight={70}\n          >\n            {tileState.negative.map(item => (\n              <GridItem key={item.id}>\n                <div className=\"grid-item\">\n                <div className=\"grid-item-content\" style = {{backgroundImage: `url(${item.address})`}}>\n                        \n                        </div>      \n                </div>\n              </GridItem>\n            ))}\n          </GridDropZone>\n\n     \n      \n        </Row>\n        </div>\n      </GridContextProvider>\n \n    </div>\n\n    );\n}\n\n\n\n\n\nexport default TestUI; "],"sourceRoot":""}