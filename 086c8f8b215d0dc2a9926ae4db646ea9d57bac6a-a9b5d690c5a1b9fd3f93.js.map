{"version":3,"sources":["webpack://gatsby-test/./node_modules/assertion-error/index.js","webpack://gatsby-test/./node_modules/chai/index.js","webpack://gatsby-test/./node_modules/chai/lib/chai.js","webpack://gatsby-test/./node_modules/chai/lib/chai/assertion.js","webpack://gatsby-test/./node_modules/chai/lib/chai/config.js","webpack://gatsby-test/./node_modules/chai/lib/chai/core/assertions.js","webpack://gatsby-test/./node_modules/chai/lib/chai/interface/assert.js","webpack://gatsby-test/./node_modules/chai/lib/chai/interface/expect.js","webpack://gatsby-test/./node_modules/chai/lib/chai/interface/should.js","webpack://gatsby-test/./node_modules/chai/lib/chai/utils/addChainableMethod.js","webpack://gatsby-test/./node_modules/chai/lib/chai/utils/addLengthGuard.js","webpack://gatsby-test/./node_modules/chai/lib/chai/utils/addMethod.js","webpack://gatsby-test/./node_modules/chai/lib/chai/utils/addProperty.js","webpack://gatsby-test/./node_modules/chai/lib/chai/utils/compareByInspect.js","webpack://gatsby-test/./node_modules/chai/lib/chai/utils/expectTypes.js","webpack://gatsby-test/./node_modules/chai/lib/chai/utils/flag.js","webpack://gatsby-test/./node_modules/chai/lib/chai/utils/getActual.js","webpack://gatsby-test/./node_modules/chai/lib/chai/utils/getEnumerableProperties.js","webpack://gatsby-test/./node_modules/chai/lib/chai/utils/getMessage.js","webpack://gatsby-test/./node_modules/chai/lib/chai/utils/getOperator.js","webpack://gatsby-test/./node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js","webpack://gatsby-test/./node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js","webpack://gatsby-test/./node_modules/chai/lib/chai/utils/getProperties.js","webpack://gatsby-test/./node_modules/chai/lib/chai/utils/index.js","webpack://gatsby-test/./node_modules/chai/lib/chai/utils/inspect.js","webpack://gatsby-test/./node_modules/chai/lib/chai/utils/isNaN.js","webpack://gatsby-test/./node_modules/chai/lib/chai/utils/isProxyEnabled.js","webpack://gatsby-test/./node_modules/chai/lib/chai/utils/objDisplay.js","webpack://gatsby-test/./node_modules/chai/lib/chai/utils/overwriteChainableMethod.js","webpack://gatsby-test/./node_modules/chai/lib/chai/utils/overwriteMethod.js","webpack://gatsby-test/./node_modules/chai/lib/chai/utils/overwriteProperty.js","webpack://gatsby-test/./node_modules/chai/lib/chai/utils/proxify.js","webpack://gatsby-test/./node_modules/chai/lib/chai/utils/test.js","webpack://gatsby-test/./node_modules/chai/lib/chai/utils/transferFlags.js","webpack://gatsby-test/./node_modules/check-error/index.js","webpack://gatsby-test/./node_modules/deep-eql/index.js","webpack://gatsby-test/./node_modules/get-func-name/index.js","webpack://gatsby-test/./node_modules/pathval/index.js","webpack://gatsby-test/./node_modules/type-detect/type-detect.js","webpack://gatsby-test/./src/classes/Classifier.js","webpack://gatsby-test/./node_modules/chai/index.mjs","webpack://gatsby-test/./src/classes/PapaParser.js","webpack://gatsby-test/./src/classes/ImageTable.js","webpack://gatsby-test/./src/classes/ObjectTable.js","webpack://gatsby-test/./src/classes/DataProvider.js","webpack://gatsby-test/./src/classes/TrainingTable.js","webpack://gatsby-test/./src/classes/DataTables.js","webpack://gatsby-test/./src/classes/UploadHandler.js","webpack://gatsby-test/./src/classes/UserUploadFileHandler.js","webpack://gatsby-test/./node_modules/lodash/_LazyWrapper.js","webpack://gatsby-test/./node_modules/lodash/_LodashWrapper.js","webpack://gatsby-test/./node_modules/lodash/_apply.js","webpack://gatsby-test/./node_modules/lodash/_arrayEach.js","webpack://gatsby-test/./node_modules/lodash/_arrayEvery.js","webpack://gatsby-test/./node_modules/lodash/_arrayIncludes.js","webpack://gatsby-test/./node_modules/lodash/_arrayIncludesWith.js","webpack://gatsby-test/./node_modules/lodash/_baseCreate.js","webpack://gatsby-test/./node_modules/lodash/_baseDifference.js","webpack://gatsby-test/./node_modules/lodash/_baseEach.js","webpack://gatsby-test/./node_modules/lodash/_baseEvery.js","webpack://gatsby-test/./node_modules/lodash/_baseFlatten.js","webpack://gatsby-test/./node_modules/lodash/_baseFor.js","webpack://gatsby-test/./node_modules/lodash/_baseForOwn.js","webpack://gatsby-test/./node_modules/lodash/_baseHas.js","webpack://gatsby-test/./node_modules/lodash/_baseIndexOf.js","webpack://gatsby-test/./node_modules/lodash/_baseIsNaN.js","webpack://gatsby-test/./node_modules/lodash/_baseLodash.js","webpack://gatsby-test/./node_modules/lodash/_baseRest.js","webpack://gatsby-test/./node_modules/lodash/_baseSetData.js","webpack://gatsby-test/./node_modules/lodash/_baseSetToString.js","webpack://gatsby-test/./node_modules/lodash/_baseZipObject.js","webpack://gatsby-test/./node_modules/lodash/_composeArgs.js","webpack://gatsby-test/./node_modules/lodash/_composeArgsRight.js","webpack://gatsby-test/./node_modules/lodash/_copyArray.js","webpack://gatsby-test/./node_modules/lodash/_countHolders.js","webpack://gatsby-test/./node_modules/lodash/_createBaseEach.js","webpack://gatsby-test/./node_modules/lodash/_createBaseFor.js","webpack://gatsby-test/./node_modules/lodash/_createBind.js","webpack://gatsby-test/./node_modules/lodash/_createCtor.js","webpack://gatsby-test/./node_modules/lodash/_createCurry.js","webpack://gatsby-test/./node_modules/lodash/_createHybrid.js","webpack://gatsby-test/./node_modules/lodash/_createPartial.js","webpack://gatsby-test/./node_modules/lodash/_createRecurry.js","webpack://gatsby-test/./node_modules/lodash/_createWrap.js","webpack://gatsby-test/./node_modules/lodash/_getData.js","webpack://gatsby-test/./node_modules/lodash/_getFuncName.js","webpack://gatsby-test/./node_modules/lodash/_getHolder.js","webpack://gatsby-test/./node_modules/lodash/_getWrapDetails.js","webpack://gatsby-test/./node_modules/lodash/_insertWrapDetails.js","webpack://gatsby-test/./node_modules/lodash/_isFlattenable.js","webpack://gatsby-test/./node_modules/lodash/_isIterateeCall.js","webpack://gatsby-test/./node_modules/lodash/_isLaziable.js","webpack://gatsby-test/./node_modules/lodash/_mergeData.js","webpack://gatsby-test/./node_modules/lodash/_metaMap.js","webpack://gatsby-test/./node_modules/lodash/_overRest.js","webpack://gatsby-test/./node_modules/lodash/_realNames.js","webpack://gatsby-test/./node_modules/lodash/_reorder.js","webpack://gatsby-test/./node_modules/lodash/_replaceHolders.js","webpack://gatsby-test/./node_modules/lodash/_setData.js","webpack://gatsby-test/./node_modules/lodash/_setToString.js","webpack://gatsby-test/./node_modules/lodash/_setWrapToString.js","webpack://gatsby-test/./node_modules/lodash/_shortOut.js","webpack://gatsby-test/./node_modules/lodash/_strictIndexOf.js","webpack://gatsby-test/./node_modules/lodash/_updateWrapDetails.js","webpack://gatsby-test/./node_modules/lodash/_wrapperClone.js","webpack://gatsby-test/./node_modules/lodash/constant.js","webpack://gatsby-test/./node_modules/lodash/difference.js","webpack://gatsby-test/./node_modules/lodash/every.js","webpack://gatsby-test/./node_modules/lodash/has.js","webpack://gatsby-test/./node_modules/lodash/isArrayLikeObject.js","webpack://gatsby-test/./node_modules/lodash/noop.js","webpack://gatsby-test/./node_modules/lodash/partial.js","webpack://gatsby-test/./node_modules/lodash/wrapperLodash.js","webpack://gatsby-test/./node_modules/lodash/zipObject.js"],"names":["exclude","excludes","slice","call","arguments","excludeProps","res","obj","Object","keys","forEach","key","indexOf","args","i","length","AssertionError","message","_props","ssf","props","extend","this","showDiff","Error","captureStackTrace","e","stack","module","exports","prototype","create","name","constructor","toJSON","used","version","util","use","fn","push","config","assertion","core","expect","should","assert","_chai","flag","Assertion","msg","ssfi","lockSsfi","proxify","defineProperty","get","console","warn","includeStack","set","value","addProperty","addMethod","addChainableMethod","chainingBehavior","overwriteProperty","overwriteMethod","overwriteChainableMethod","expr","negateMsg","expected","_actual","ok","test","undefined","getMessage","actual","getActual","assertionErrorObjectProperties","operator","getOperator","val","truncateThreshold","useProxy","proxyExcludedKeys","chai","_","an","type","toLowerCase","article","charAt","SameValueZero","a","b","isNaN","includeChainingBehavior","include","objType","flagMsg","negate","isDeep","descriptor","included","has","isEql","eql","item","some","firstErr","numErrs","prop","propAssertion","transferFlags","property","err","checkError","compatibleConstructor","inspect","assertExist","checkArguments","assertEqual","prevLockSsfi","_obj","assertEql","assertAbove","n","errorMessage","doLength","msgPrefix","nType","shouldThrow","to","have","itemsCount","size","assertLeast","assertBelow","assertMost","assertInstanceOf","target","isInstanceOf","TypeError","getName","assertProperty","isNested","isOwn","nameType","hasProperty","pathInfo","getPathInfo","hasOwnProperty","exists","assertOwnProperty","apply","assertOwnPropertyDescriptor","actualDescriptor","getOwnPropertyDescriptor","assertLengthChain","assertLength","assertMatch","re","exec","assertKeys","str","keysType","deepStr","mixedArgsMsg","Array","getOwnEnumerableProperties","map","String","len","any","all","expectedKey","actualKey","every","last","pop","join","sort","compareByInspect","assertThrows","errorLike","errMsgMatcher","caughtErr","is","RegExp","everyArgIsUndefined","everyArgIsDefined","Boolean","errorLikeFail","errMsgMatcherFail","errorLikeString","getConstructorName","toString","compatibleInstance","placeholder","compatibleMessage","respondTo","method","itself","context","satisfy","matcher","result","objDisplay","closeTo","delta","Math","abs","assertChanges","subject","initial","final","msgObj","assertIncreases","assertDecreases","chain","trim","start","finish","startType","finishType","range","toUTCString","subset","be","failMsg","failNegateMsg","contains","ordered","cmp","superset","elem","idx","matchIdx","splice","elem2","isSubsetOf","list","possibility","expression","behavior","realDelta","isExtensible","isSealed","isFrozen","isFinite","express","errmsg","fail","isOk","isNotOk","not","equal","act","exp","notEqual","strictEqual","notStrictEqual","deepEqual","deepStrictEqual","notDeepEqual","isAbove","abv","above","isAtLeast","atlst","least","isBelow","blw","below","isAtMost","atmst","most","isTrue","isNotTrue","isFalse","isNotFalse","isNull","isNotNull","NaN","isNotNaN","exist","notExists","isUndefined","isDefined","isFunction","isNotFunction","isObject","isNotObject","isArray","isNotArray","isString","isNotString","isNumber","isNotNumber","finite","isBoolean","isNotBoolean","typeOf","notTypeOf","instanceOf","notInstanceOf","inc","notInclude","deepInclude","deep","notDeepInclude","nestedInclude","nested","notNestedInclude","deepNestedInclude","notDeepNestedInclude","ownInclude","own","notOwnInclude","deepOwnInclude","notDeepOwnInclude","match","notMatch","notProperty","propertyVal","notPropertyVal","deepPropertyVal","notDeepPropertyVal","ownProperty","notOwnProperty","ownPropertyVal","notOwnPropertyVal","deepOwnPropertyVal","notDeepOwnPropertyVal","nestedProperty","notNestedProperty","nestedPropertyVal","notNestedPropertyVal","deepNestedPropertyVal","notDeepNestedPropertyVal","lengthOf","hasAnyKeys","hasAllKeys","containsAllKeys","contain","doesNotHaveAnyKeys","doesNotHaveAllKeys","hasAnyDeepKeys","hasAllDeepKeys","containsAllDeepKeys","doesNotHaveAnyDeepKeys","doesNotHaveAllDeepKeys","throws","assertErr","throw","doesNotThrow","val2","approximately","sameMembers","set1","set2","same","members","notSameMembers","sameDeepMembers","notSameDeepMembers","sameOrderedMembers","notSameOrderedMembers","sameDeepOrderedMembers","notSameDeepOrderedMembers","includeMembers","notIncludeMembers","includeDeepMembers","notIncludeDeepMembers","includeOrderedMembers","notIncludeOrderedMembers","includeDeepOrderedMembers","notIncludeDeepOrderedMembers","oneOf","inList","changes","change","changesBy","tmpMsg","by","doesNotChange","changesButNotBy","but","increases","increase","increasesBy","doesNotIncrease","increasesButNotBy","decreases","decrease","decreasesBy","doesNotDecrease","doesNotDecreaseBy","decreasesButNotBy","ifError","extensible","isNotExtensible","sealed","isNotSealed","frozen","isNotFrozen","isEmpty","empty","isNotEmpty","alias","as","loadShould","enumerable","configurable","writable","shouldGetter","Number","Symbol","BigInt","valueOf","val1","errt","errs","Throw","Should","addLengthGuard","canSetPrototype","setPrototypeOf","testFn","excludeNames","getOwnPropertyNames","filter","propDesc","Function","ctx","chainableBehavior","__methods","chainableMethodWrapper","newAssertion","asserterName","pd","fnLengthDesc","assertionName","isChainable","methodWrapper","isProxyEnabled","getter","propertyGetter","types","t","index","art","flags","__flags","object","replace","objectType","isObjectType","getOwnEnumerablePropertySymbols","concat","getOwnPropertySymbols","sym","proto","getPrototypeOf","pathval","expectTypes","getProperties","getEnumerableProperties","showHidden","depth","colors","formatValue","seen","stylize","recurseTimes","ret","primitive","simple","JSON","stringify","Infinity","formatPrimitive","HTMLElement","nodeType","nodeName","outerHTML","document","xmlVersion","XMLSerializer","serializeToString","container","createElementNS","appendChild","cloneNode","html","innerHTML","nameSuffix","visibleKeys","isError","isRegExp","isDate","Date","formatError","ar","output","base","array","typedArray","braces","objectToString","l","formatProperty","formatArray","formatTypedArray","reduce","prev","cur","reduceToSingleString","propDescriptor","split","line","substr","d","o","Proxy","Reflect","_chainingBehavior","_method","_super","overwritingMethodWrapper","origLockSsfi","_get","overwritingPropertyGetter","builtins","nonChainableMethodName","proxyGetter","suggestion","suggestionDistance","dist","strA","strB","cap","memo","fill","j","ch","charCodeAt","min","stringDistanceCapped","includeAll","functionNameMatch","getFunctionName","constructorFn","thrown","errMatcher","comparisonString","constructorName","FakeMap","_key","random","now","MemoizeMap","WeakMap","memoizeCompare","leftHandOperand","rightHandOperand","memoizeMap","isPrimitive","leftHandMap","memoizeSet","options","comparator","extensiveDeepEqual","simpleResult","simpleEqual","memoize","memoizeResultLeft","memoizeResultRight","comparatorResult","leftHandType","iterableEqual","regexpEqual","getGeneratorEntries","generatorEqual","Uint8Array","buffer","entriesEqual","leftHandKeys","getEnumerableKeys","rightHandKeys","keysEqual","leftHandEntries","getIteratorEntries","rightHandEntries","objectEqual","extensiveDeepEqualByType","leftHandItems","rightHandItems","iterator","hasIteratorFunction","iteratorError","generator","generatorResult","next","accumulator","done","aFunc","parsePath","path","mArr","parseFloat","p","internalGetPathValue","parsed","pathDepth","temporaryValue","part","info","parent","getPathValue","setPathValue","tempObj","propName","propVal","internalSetPathValue","promiseExists","Promise","globalObject","self","g","symbolExists","mapExists","Map","setExists","Set","weakMapExists","weakSetExists","WeakSet","dataViewExists","DataView","symbolIteratorExists","symbolToStringTagExists","toStringTag","setEntriesExists","entries","mapEntriesExists","setIteratorPrototype","mapIteratorPrototype","arrayIteratorExists","arrayIteratorPrototype","stringIteratorExists","stringIteratorPrototype","toStringLeftSliceLength","toStringRightSliceLength","typeDetect","typeofObj","window","location","navigator","mimeTypes","plugins","tagName","stringTag","objPrototype","factory","Classifier","ClassifierOptions","classifierType","featuresToUse","trainingData","trainingLabels","numberFeatures","model","createLogisticRegressionModel","test_feature_preconditions","trainPromise","number_epochs","resolve","reject","tf_batched_dataset","createBasicDataset","basicTrainPromise","predict_tf","test_data","true_labels","createBasicTestset","tf_dataset","tf_labels","predict","argMax","arraySync","getTrainingDataConfusionMatrixPromise","tf_predict_labels","tf_true_labels","tfvis","confusionMatrixDataURLPromise","predict_data","tick_labels","canvasElement","print","then","confusionMatrix","log","values","tickLabels","toDataURL","DownloadModelPromise","save","hasMultiple","feature_names","norm2DArray","data","labels","batchSize","accum","currVal","X","data_row","feature_name","feature_value","normed_X","Y","label","outcome","from","tf","dataSync","xs","ys","shuffle","batch","feature_count","add","units","activation","inputShape","kernelRegularizer","l1","optimizer","compile","loss","metrics","training_dataset","render_containers","lossContainer","accContainer","trainLogs","fitDataset","epochs","callbacks","onEpochEnd","epoch","logs","onTrainEnd","PapaParser","basicPapaConfig","worker","skipEmptyLines","dynamicTyping","file_config_options","fastMode","error","delimiter","comments","Papa","file","complete","notify","strMsg","x","debugPrint","onEndMsg","papaTextfromCSV","file_object","file_for_papa","option","assign","ImageTable","image_lines","column_lines","image_column","image_mapped","imageNumber","img_index","ImageNumber","find","search_obj","findIndex","indexTableGetRow","getSize","row","getColumnLines","ObjectTable","object_lines","object_column","object_mapped","imgs_size","obj_index","ObjectNumber","img","returnObjsPerImg","firstObjinImg","index_key","parseInt","DataProvider","uniform_data","testConstructorInputPreconditions","object_data","object_columns","image_data","image_columns","includes","returnAllImgFileNames","channel","getValue","file_lookup","color","getObjsPerImg","objsInImg","count","getToolTip","getNRandomObjs","num_of_objs","rand_objs","floor","getRow","getAllObjRowsIn2DArray","objs","getCordsforCellDisplay","cords","cellinObj","cellx","celly","max","y","TrainingTable","data_lines","training_lines","getTrainingLabels","data_table","row_object","indexTable","getDataColumnsPaired","UploadHandler","fileListObject","sliceArrayByValue","value1","value2","index1","index2","getDataHandlerandStartingTrainingSet","file_objects","getFiles","getText","text_data","dp","tt","file_handler","UserUploadFileHandler","file_name","findFile","endsWith","fileReaderPromiseText","column_lines_txt","data_columns","object_column_lines","image_column_lines","fileIndex","files","file_result","fr","FileReader","onload","readAsText","findAllFiles","file_names","fileReaderPromiseImage","readAsDataURL","baseCreate","baseLodash","LazyWrapper","__wrapped__","__actions__","__dir__","__filtered__","__iteratees__","__takeCount__","__views__","LodashWrapper","chainAll","__chain__","__index__","__values__","func","thisArg","iteratee","predicate","baseIndexOf","objectCreate","SetCache","arrayIncludes","arrayIncludesWith","arrayMap","baseUnary","cacheHas","isCommon","valuesLength","outer","computed","valuesIndex","baseForOwn","baseEach","createBaseEach","collection","arrayPush","isFlattenable","baseFlatten","isStrict","baseFor","createBaseFor","baseFindIndex","baseIsNaN","strictIndexOf","fromIndex","identity","overRest","setToString","metaMap","baseSetData","constant","baseSetToString","string","assignFunc","valsLength","nativeMax","partials","holders","isCurried","argsIndex","argsLength","holdersLength","leftIndex","leftLength","rangeLength","isUncurried","holdersIndex","rightIndex","rightLength","offset","source","isArrayLike","eachFunc","fromRight","iterable","keysFunc","createCtor","root","bitmask","isBind","Ctor","wrapper","thisBinding","createHybrid","createRecurry","getHolder","replaceHolders","arity","composeArgs","composeArgsRight","countHolders","reorder","partialsRight","holdersRight","argPos","ary","isAry","isBindKey","isFlip","holdersCount","newHolders","reverse","isLaziable","setData","setWrapToString","wrapFunc","isCurry","newData","createBind","createCurry","createPartial","getData","mergeData","toInteger","noop","realNames","otherFunc","reWrapDetails","reSplitDetails","reWrapComment","details","lastIndex","isArguments","spreadableSymbol","isConcatSpreadable","eq","isIndex","getFuncName","lodash","funcName","other","PLACEHOLDER","WRAP_ARY_FLAG","nativeMin","srcBitmask","newBitmask","isCombo","transform","otherArgs","copyArray","indexes","arrLength","oldArray","resIndex","shortOut","getWrapDetails","insertWrapDetails","updateWrapDetails","reference","nativeNow","lastCalled","stamp","remaining","arrayEach","wrapFlags","pair","clone","baseDifference","baseRest","isArrayLikeObject","difference","arrayEvery","baseEvery","baseIteratee","isIterateeCall","guard","baseHas","hasPath","isObjectLike","createWrap","partial","wrapperClone","assignValue","baseZipObject"],"mappings":"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","file":"086c8f8b215d0dc2a9926ae4db646ea9d57bac6a-a9b5d690c5a1b9fd3f93.js","sourcesContent":["/*!\n * assertion-error\n * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>\n * MIT Licensed\n */\n\n/*!\n * Return a function that will copy properties from\n * one object to another excluding any originally\n * listed. Returned function will create a new `{}`.\n *\n * @param {String} excluded properties ...\n * @return {Function}\n */\nfunction exclude() {\n  var excludes = [].slice.call(arguments);\n\n  function excludeProps(res, obj) {\n    Object.keys(obj).forEach(function (key) {\n      if (!~excludes.indexOf(key)) res[key] = obj[key];\n    });\n  }\n\n  return function extendExclude() {\n    var args = [].slice.call(arguments),\n        i = 0,\n        res = {};\n\n    for (; i < args.length; i++) {\n      excludeProps(res, args[i]);\n    }\n\n    return res;\n  };\n}\n\n;\n/*!\n * Primary Exports\n */\n\nmodule.exports = AssertionError;\n/**\n * ### AssertionError\n *\n * An extension of the JavaScript `Error` constructor for\n * assertion and validation scenarios.\n *\n * @param {String} message\n * @param {Object} properties to include (optional)\n * @param {callee} start stack function (optional)\n */\n\nfunction AssertionError(message, _props, ssf) {\n  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON'),\n      props = extend(_props || {}); // default values\n\n  this.message = message || 'Unspecified AssertionError';\n  this.showDiff = false; // copy from properties\n\n  for (var key in props) {\n    this[key] = props[key];\n  } // capture stack trace\n\n\n  ssf = ssf || AssertionError;\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, ssf);\n  } else {\n    try {\n      throw new Error();\n    } catch (e) {\n      this.stack = e.stack;\n    }\n  }\n}\n/*!\n * Inherit from Error.prototype\n */\n\n\nAssertionError.prototype = Object.create(Error.prototype);\n/*!\n * Statically set name\n */\n\nAssertionError.prototype.name = 'AssertionError';\n/*!\n * Ensure correct constructor\n */\n\nAssertionError.prototype.constructor = AssertionError;\n/**\n * Allow errors to be converted to JSON for static transfer.\n *\n * @param {Boolean} include stack (default: `true`)\n * @return {Object} object that can be `JSON.stringify`\n */\n\nAssertionError.prototype.toJSON = function (stack) {\n  var extend = exclude('constructor', 'toJSON', 'stack'),\n      props = extend({\n    name: this.name\n  }, this); // include stack if exists and not turned off\n\n  if (false !== stack && this.stack) {\n    props.stack = this.stack;\n  }\n\n  return props;\n};","module.exports = require('./lib/chai');","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nvar used = [];\n/*!\n * Chai version\n */\n\nexports.version = '4.3.3';\n/*!\n * Assertion Error\n */\n\nexports.AssertionError = require('assertion-error');\n/*!\n * Utils for plugins (not exported)\n */\n\nvar util = require('./chai/utils');\n/**\n * # .use(function)\n *\n * Provides a way to extend the internals of Chai.\n *\n * @param {Function}\n * @returns {this} for chaining\n * @api public\n */\n\n\nexports.use = function (fn) {\n  if (!~used.indexOf(fn)) {\n    fn(exports, util);\n    used.push(fn);\n  }\n\n  return exports;\n};\n/*!\n * Utility Functions\n */\n\n\nexports.util = util;\n/*!\n * Configuration\n */\n\nvar config = require('./chai/config');\n\nexports.config = config;\n/*!\n * Primary `Assertion` prototype\n */\n\nvar assertion = require('./chai/assertion');\n\nexports.use(assertion);\n/*!\n * Core Assertions\n */\n\nvar core = require('./chai/core/assertions');\n\nexports.use(core);\n/*!\n * Expect interface\n */\n\nvar expect = require('./chai/interface/expect');\n\nexports.use(expect);\n/*!\n * Should interface\n */\n\nvar should = require('./chai/interface/should');\n\nexports.use(should);\n/*!\n * Assert interface\n */\n\nvar assert = require('./chai/interface/assert');\n\nexports.use(assert);","/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nvar config = require('./config');\n\nmodule.exports = function (_chai, util) {\n  /*!\n   * Module dependencies.\n   */\n  var AssertionError = _chai.AssertionError,\n      flag = util.flag;\n  /*!\n   * Module export.\n   */\n\n  _chai.Assertion = Assertion;\n  /*!\n   * Assertion Constructor\n   *\n   * Creates object for chaining.\n   *\n   * `Assertion` objects contain metadata in the form of flags. Three flags can\n   * be assigned during instantiation by passing arguments to this constructor:\n   *\n   * - `object`: This flag contains the target of the assertion. For example, in\n   *   the assertion `expect(numKittens).to.equal(7);`, the `object` flag will\n   *   contain `numKittens` so that the `equal` assertion can reference it when\n   *   needed.\n   *\n   * - `message`: This flag contains an optional custom error message to be\n   *   prepended to the error message that's generated by the assertion when it\n   *   fails.\n   *\n   * - `ssfi`: This flag stands for \"start stack function indicator\". It\n   *   contains a function reference that serves as the starting point for\n   *   removing frames from the stack trace of the error that's created by the\n   *   assertion when it fails. The goal is to provide a cleaner stack trace to\n   *   end users by removing Chai's internal functions. Note that it only works\n   *   in environments that support `Error.captureStackTrace`, and only when\n   *   `Chai.config.includeStack` hasn't been set to `false`.\n   *\n   * - `lockSsfi`: This flag controls whether or not the given `ssfi` flag\n   *   should retain its current value, even as assertions are chained off of\n   *   this object. This is usually set to `true` when creating a new assertion\n   *   from within another assertion. It's also temporarily set to `true` before\n   *   an overwritten assertion gets called by the overwriting assertion.\n   *\n   * @param {Mixed} obj target of the assertion\n   * @param {String} msg (optional) custom error message\n   * @param {Function} ssfi (optional) starting point for removing stack frames\n   * @param {Boolean} lockSsfi (optional) whether or not the ssfi flag is locked\n   * @api private\n   */\n\n  function Assertion(obj, msg, ssfi, lockSsfi) {\n    flag(this, 'ssfi', ssfi || Assertion);\n    flag(this, 'lockSsfi', lockSsfi);\n    flag(this, 'object', obj);\n    flag(this, 'message', msg);\n    return util.proxify(this);\n  }\n\n  Object.defineProperty(Assertion, 'includeStack', {\n    get: function get() {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      return config.includeStack;\n    },\n    set: function set(value) {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      config.includeStack = value;\n    }\n  });\n  Object.defineProperty(Assertion, 'showDiff', {\n    get: function get() {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      return config.showDiff;\n    },\n    set: function set(value) {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      config.showDiff = value;\n    }\n  });\n\n  Assertion.addProperty = function (name, fn) {\n    util.addProperty(this.prototype, name, fn);\n  };\n\n  Assertion.addMethod = function (name, fn) {\n    util.addMethod(this.prototype, name, fn);\n  };\n\n  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {\n    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  Assertion.overwriteProperty = function (name, fn) {\n    util.overwriteProperty(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteMethod = function (name, fn) {\n    util.overwriteMethod(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {\n    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n  /**\n   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)\n   *\n   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n   *\n   * @name assert\n   * @param {Philosophical} expression to be tested\n   * @param {String|Function} message or function that returns message to display if expression fails\n   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n   * @param {Mixed} expected value (remember to check for negation)\n   * @param {Mixed} actual (optional) will default to `this.obj`\n   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails\n   * @api private\n   */\n\n\n  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {\n    var ok = util.test(this, arguments);\n    if (false !== showDiff) showDiff = true;\n    if (undefined === expected && undefined === _actual) showDiff = false;\n    if (true !== config.showDiff) showDiff = false;\n\n    if (!ok) {\n      msg = util.getMessage(this, arguments);\n      var actual = util.getActual(this, arguments);\n      var assertionErrorObjectProperties = {\n        actual: actual,\n        expected: expected,\n        showDiff: showDiff\n      };\n      var operator = util.getOperator(this, arguments);\n\n      if (operator) {\n        assertionErrorObjectProperties.operator = operator;\n      }\n\n      throw new AssertionError(msg, assertionErrorObjectProperties, config.includeStack ? this.assert : flag(this, 'ssfi'));\n    }\n  };\n  /*!\n   * ### ._obj\n   *\n   * Quick reference to stored `actual` value for plugin developers.\n   *\n   * @api private\n   */\n\n\n  Object.defineProperty(Assertion.prototype, '_obj', {\n    get: function get() {\n      return flag(this, 'object');\n    },\n    set: function set(val) {\n      flag(this, 'object', val);\n    }\n  });\n};","module.exports = {\n  /**\n   * ### config.includeStack\n   *\n   * User configurable property, influences whether stack trace\n   * is included in Assertion error message. Default of false\n   * suppresses stack trace in the error message.\n   *\n   *     chai.config.includeStack = true;  // enable stack on error\n   *\n   * @param {Boolean}\n   * @api public\n   */\n  includeStack: false,\n\n  /**\n   * ### config.showDiff\n   *\n   * User configurable property, influences whether or not\n   * the `showDiff` flag should be included in the thrown\n   * AssertionErrors. `false` will always be `false`; `true`\n   * will be true when the assertion has requested a diff\n   * be shown.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n  showDiff: true,\n\n  /**\n   * ### config.truncateThreshold\n   *\n   * User configurable property, sets length threshold for actual and\n   * expected values in assertion errors. If this threshold is exceeded, for\n   * example for large data structures, the value is replaced with something\n   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.\n   *\n   * Set it to zero if you want to disable truncating altogether.\n   *\n   * This is especially userful when doing assertions on arrays: having this\n   * set to a reasonable large value makes the failure messages readily\n   * inspectable.\n   *\n   *     chai.config.truncateThreshold = 0;  // disable truncating\n   *\n   * @param {Number}\n   * @api public\n   */\n  truncateThreshold: 40,\n\n  /**\n   * ### config.useProxy\n   *\n   * User configurable property, defines if chai will use a Proxy to throw\n   * an error when a non-existent property is read, which protects users\n   * from typos when using property-based assertions.\n   *\n   * Set it to false if you want to disable this feature.\n   *\n   *     chai.config.useProxy = false;  // disable use of Proxy\n   *\n   * This feature is automatically disabled regardless of this config value\n   * in environments that don't support proxies.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n  useProxy: true,\n\n  /**\n   * ### config.proxyExcludedKeys\n   *\n   * User configurable property, defines which properties should be ignored\n   * instead of throwing an error if they do not exist on the assertion.\n   * This is only applied if the environment Chai is running in supports proxies and\n   * if the `useProxy` configuration setting is enabled.\n   * By default, `then` and `inspect` will not throw an error if they do not exist on the\n   * assertion object because the `.inspect` property is read by `util.inspect` (for example, when\n   * using `console.log` on the assertion object) and `.then` is necessary for promise type-checking.\n   *\n   *     // By default these keys will not throw an error if they do not exist on the assertion object\n   *     chai.config.proxyExcludedKeys = ['then', 'inspect'];\n   *\n   * @param {Array}\n   * @api public\n   */\n  proxyExcludedKeys: ['then', 'catch', 'inspect', 'toJSON']\n};","/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nmodule.exports = function (chai, _) {\n  var Assertion = chai.Assertion,\n      AssertionError = chai.AssertionError,\n      flag = _.flag;\n  /**\n   * ### Language Chains\n   *\n   * The following are provided as chainable getters to improve the readability\n   * of your assertions.\n   *\n   * **Chains**\n   *\n   * - to\n   * - be\n   * - been\n   * - is\n   * - that\n   * - which\n   * - and\n   * - has\n   * - have\n   * - with\n   * - at\n   * - of\n   * - same\n   * - but\n   * - does\n   * - still\n   * - also\n   *\n   * @name language chains\n   * @namespace BDD\n   * @api public\n   */\n\n  ['to', 'be', 'been', 'is', 'and', 'has', 'have', 'with', 'that', 'which', 'at', 'of', 'same', 'but', 'does', 'still', \"also\"].forEach(function (chain) {\n    Assertion.addProperty(chain);\n  });\n  /**\n   * ### .not\n   *\n   * Negates all assertions that follow in the chain.\n   *\n   *     expect(function () {}).to.not.throw();\n   *     expect({a: 1}).to.not.have.property('b');\n   *     expect([1, 2]).to.be.an('array').that.does.not.include(3);\n   *\n   * Just because you can negate any assertion with `.not` doesn't mean you\n   * should. With great power comes great responsibility. It's often best to\n   * assert that the one expected output was produced, rather than asserting\n   * that one of countless unexpected outputs wasn't produced. See individual\n   * assertions for specific guidance.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.equal(1); // Not recommended\n   *\n   * @name not\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('not', function () {\n    flag(this, 'negate', true);\n  });\n  /**\n   * ### .deep\n   *\n   * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property`\n   * assertions that follow in the chain to use deep equality instead of strict\n   * (`===`) equality. See the `deep-eql` project page for info on the deep\n   * equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) equals `{a: 1}`\n   *     expect({a: 1}).to.deep.equal({a: 1});\n   *     expect({a: 1}).to.not.equal({a: 1});\n   *\n   *     // Target array deeply (but not strictly) includes `{a: 1}`\n   *     expect([{a: 1}]).to.deep.include({a: 1});\n   *     expect([{a: 1}]).to.not.include({a: 1});\n   *\n   *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n   *\n   *     // Target array deeply (but not strictly) has member `{a: 1}`\n   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n   *\n   *     // Target set deeply (but not strictly) has key `{a: 1}`\n   *     expect(new Set([{a: 1}])).to.have.deep.keys([{a: 1}]);\n   *     expect(new Set([{a: 1}])).to.not.have.keys([{a: 1}]);\n   *\n   *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n   *\n   * @name deep\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('deep', function () {\n    flag(this, 'deep', true);\n  });\n  /**\n   * ### .nested\n   *\n   * Enables dot- and bracket-notation in all `.property` and `.include`\n   * assertions that follow in the chain.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n   *     expect({'.a': {'[b]': 'x'}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 'x'});\n   *\n   * `.nested` cannot be combined with `.own`.\n   *\n   * @name nested\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('nested', function () {\n    flag(this, 'nested', true);\n  });\n  /**\n   * ### .own\n   *\n   * Causes all `.property` and `.include` assertions that follow in the chain\n   * to ignore inherited properties.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.have.own.property('a');\n   *     expect({a: 1}).to.have.property('b');\n   *     expect({a: 1}).to.not.have.own.property('b');\n   *\n   *     expect({a: 1}).to.own.include({a: 1});\n   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n   *\n   * `.own` cannot be combined with `.nested`.\n   *\n   * @name own\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('own', function () {\n    flag(this, 'own', true);\n  });\n  /**\n   * ### .ordered\n   *\n   * Causes all `.members` assertions that follow in the chain to require that\n   * members be in the same order.\n   *\n   *     expect([1, 2]).to.have.ordered.members([1, 2])\n   *       .but.not.have.ordered.members([2, 1]);\n   *\n   * When `.include` and `.ordered` are combined, the ordering begins at the\n   * start of both arrays.\n   *\n   *     expect([1, 2, 3]).to.include.ordered.members([1, 2])\n   *       .but.not.include.ordered.members([2, 3]);\n   *\n   * @name ordered\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ordered', function () {\n    flag(this, 'ordered', true);\n  });\n  /**\n   * ### .any\n   *\n   * Causes all `.keys` assertions that follow in the chain to only require that\n   * the target have at least one of the given keys. This is the opposite of\n   * `.all`, which requires that the target have all of the given keys.\n   *\n   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n   *\n   * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n   *\n   * @name any\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('any', function () {\n    flag(this, 'any', true);\n    flag(this, 'all', false);\n  });\n  /**\n   * ### .all\n   *\n   * Causes all `.keys` assertions that follow in the chain to require that the\n   * target have all of the given keys. This is the opposite of `.any`, which\n   * only requires that the target have at least one of the given keys.\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *\n   * Note that `.all` is used by default when neither `.all` nor `.any` are\n   * added earlier in the chain. However, it's often best to add `.all` anyway\n   * because it improves readability.\n   *\n   * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n   *\n   * @name all\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('all', function () {\n    flag(this, 'all', true);\n    flag(this, 'any', false);\n  });\n  /**\n   * ### .a(type[, msg])\n   *\n   * Asserts that the target's type is equal to the given string `type`. Types\n   * are case insensitive. See the `type-detect` project page for info on the\n   * type detection algorithm: https://github.com/chaijs/type-detect.\n   *\n   *     expect('foo').to.be.a('string');\n   *     expect({a: 1}).to.be.an('object');\n   *     expect(null).to.be.a('null');\n   *     expect(undefined).to.be.an('undefined');\n   *     expect(new Error).to.be.an('error');\n   *     expect(Promise.resolve()).to.be.a('promise');\n   *     expect(new Float32Array).to.be.a('float32array');\n   *     expect(Symbol()).to.be.a('symbol');\n   *\n   * `.a` supports objects that have a custom type set via `Symbol.toStringTag`.\n   *\n   *     var myObj = {\n   *       [Symbol.toStringTag]: 'myCustomType'\n   *     };\n   *\n   *     expect(myObj).to.be.a('myCustomType').but.not.an('object');\n   *\n   * It's often best to use `.a` to check a target's type before making more\n   * assertions on the same target. That way, you avoid unexpected behavior from\n   * any assertion that does different things based on the target's type.\n   *\n   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n   *     expect([]).to.be.an('array').that.is.empty;\n   *\n   * Add `.not` earlier in the chain to negate `.a`. However, it's often best to\n   * assert that the target is the expected type, rather than asserting that it\n   * isn't one of many unexpected types.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.an('array'); // Not recommended\n   *\n   * `.a` accepts an optional `msg` argument which is a custom error message to\n   * show when the assertion fails. The message can also be given as the second\n   * argument to `expect`.\n   *\n   *     expect(1).to.be.a('string', 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.a('string');\n   *\n   * `.a` can also be used as a language chain to improve the readability of\n   * your assertions.\n   *\n   *     expect({b: 2}).to.have.a.property('b');\n   *\n   * The alias `.an` can be used interchangeably with `.a`.\n   *\n   * @name a\n   * @alias an\n   * @param {String} type\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function an(type, msg) {\n    if (msg) flag(this, 'message', msg);\n    type = type.toLowerCase();\n    var obj = flag(this, 'object'),\n        article = ~['a', 'e', 'i', 'o', 'u'].indexOf(type.charAt(0)) ? 'an ' : 'a ';\n    this.assert(type === _.type(obj).toLowerCase(), 'expected #{this} to be ' + article + type, 'expected #{this} not to be ' + article + type);\n  }\n\n  Assertion.addChainableMethod('an', an);\n  Assertion.addChainableMethod('a', an);\n  /**\n   * ### .include(val[, msg])\n   *\n   * When the target is a string, `.include` asserts that the given string `val`\n   * is a substring of the target.\n   *\n   *     expect('foobar').to.include('foo');\n   *\n   * When the target is an array, `.include` asserts that the given `val` is a\n   * member of the target.\n   *\n   *     expect([1, 2, 3]).to.include(2);\n   *\n   * When the target is an object, `.include` asserts that the given object\n   * `val`'s properties are a subset of the target's properties.\n   *\n   *     expect({a: 1, b: 2, c: 3}).to.include({a: 1, b: 2});\n   *\n   * When the target is a Set or WeakSet, `.include` asserts that the given `val` is a\n   * member of the target. SameValueZero equality algorithm is used.\n   *\n   *     expect(new Set([1, 2])).to.include(2);\n   *\n   * When the target is a Map, `.include` asserts that the given `val` is one of\n   * the values of the target. SameValueZero equality algorithm is used.\n   *\n   *     expect(new Map([['a', 1], ['b', 2]])).to.include(2);\n   *\n   * Because `.include` does different things based on the target's type, it's\n   * important to check the target's type before using `.include`. See the `.a`\n   * doc for info on testing a target's type.\n   *\n   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n   *\n   * By default, strict (`===`) equality is used to compare array members and\n   * object properties. Add `.deep` earlier in the chain to use deep equality\n   * instead (WeakSet targets are not supported). See the `deep-eql` project\n   * page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target array deeply (but not strictly) includes `{a: 1}`\n   *     expect([{a: 1}]).to.deep.include({a: 1});\n   *     expect([{a: 1}]).to.not.include({a: 1});\n   *\n   *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n   *\n   * By default, all of the target's properties are searched when working with\n   * objects. This includes properties that are inherited and/or non-enumerable.\n   * Add `.own` earlier in the chain to exclude the target's inherited\n   * properties from the search.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.own.include({a: 1});\n   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n   *\n   * Note that a target object is always only searched for `val`'s own\n   * enumerable properties.\n   *\n   * `.deep` and `.own` can be combined.\n   *\n   *     expect({a: {b: 2}}).to.deep.own.include({a: {b: 2}});\n   *\n   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n   * referencing nested properties.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 2}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 2});\n   *\n   * `.deep` and `.nested` can be combined.\n   *\n   *     expect({a: {b: [{c: 3}]}}).to.deep.nested.include({'a.b[0]': {c: 3}});\n   *\n   * `.own` and `.nested` cannot be combined.\n   *\n   * Add `.not` earlier in the chain to negate `.include`.\n   *\n   *     expect('foobar').to.not.include('taco');\n   *     expect([1, 2, 3]).to.not.include(4);\n   *\n   * However, it's dangerous to negate `.include` when the target is an object.\n   * The problem is that it creates uncertain expectations by asserting that the\n   * target object doesn't have all of `val`'s key/value pairs but may or may\n   * not have some of them. It's often best to identify the exact output that's\n   * expected, and then write an assertion that only accepts that exact output.\n   *\n   * When the target object isn't even expected to have `val`'s keys, it's\n   * often best to assert exactly that.\n   *\n   *     expect({c: 3}).to.not.have.any.keys('a', 'b'); // Recommended\n   *     expect({c: 3}).to.not.include({a: 1, b: 2}); // Not recommended\n   *\n   * When the target object is expected to have `val`'s keys, it's often best to\n   * assert that each of the properties has its expected value, rather than\n   * asserting that each property doesn't have one of many unexpected values.\n   *\n   *     expect({a: 3, b: 4}).to.include({a: 3, b: 4}); // Recommended\n   *     expect({a: 3, b: 4}).to.not.include({a: 1, b: 2}); // Not recommended\n   *\n   * `.include` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2, 3]).to.include(4, 'nooo why fail??');\n   *     expect([1, 2, 3], 'nooo why fail??').to.include(4);\n   *\n   * `.include` can also be used as a language chain, causing all `.members` and\n   * `.keys` assertions that follow in the chain to require the target to be a\n   * superset of the expected set, rather than an identical set. Note that\n   * `.members` ignores duplicates in the subset when `.include` is added.\n   *\n   *     // Target object's keys are a superset of ['a', 'b'] but not identical\n   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n   *\n   *     // Target array is a superset of [1, 2] but not identical\n   *     expect([1, 2, 3]).to.include.members([1, 2]);\n   *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n   *\n   *     // Duplicates in the subset are ignored\n   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n   *\n   * Note that adding `.any` earlier in the chain causes the `.keys` assertion\n   * to ignore `.include`.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1}).to.include.any.keys('a', 'b');\n   *     expect({a: 1}).to.have.any.keys('a', 'b');\n   *\n   * The aliases `.includes`, `.contain`, and `.contains` can be used\n   * interchangeably with `.include`.\n   *\n   * @name include\n   * @alias contain\n   * @alias includes\n   * @alias contains\n   * @param {Mixed} val\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function SameValueZero(a, b) {\n    return _.isNaN(a) && _.isNaN(b) || a === b;\n  }\n\n  function includeChainingBehavior() {\n    flag(this, 'contains', true);\n  }\n\n  function include(val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var obj = flag(this, 'object'),\n        objType = _.type(obj).toLowerCase(),\n        flagMsg = flag(this, 'message'),\n        negate = flag(this, 'negate'),\n        ssfi = flag(this, 'ssfi'),\n        isDeep = flag(this, 'deep'),\n        descriptor = isDeep ? 'deep ' : '';\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n    var included = false;\n\n    switch (objType) {\n      case 'string':\n        included = obj.indexOf(val) !== -1;\n        break;\n\n      case 'weakset':\n        if (isDeep) {\n          throw new AssertionError(flagMsg + 'unable to use .deep.include with WeakSet', undefined, ssfi);\n        }\n\n        included = obj.has(val);\n        break;\n\n      case 'map':\n        var isEql = isDeep ? _.eql : SameValueZero;\n        obj.forEach(function (item) {\n          included = included || isEql(item, val);\n        });\n        break;\n\n      case 'set':\n        if (isDeep) {\n          obj.forEach(function (item) {\n            included = included || _.eql(item, val);\n          });\n        } else {\n          included = obj.has(val);\n        }\n\n        break;\n\n      case 'array':\n        if (isDeep) {\n          included = obj.some(function (item) {\n            return _.eql(item, val);\n          });\n        } else {\n          included = obj.indexOf(val) !== -1;\n        }\n\n        break;\n\n      default:\n        // This block is for asserting a subset of properties in an object.\n        // `_.expectTypes` isn't used here because `.include` should work with\n        // objects with a custom `@@toStringTag`.\n        if (val !== Object(val)) {\n          throw new AssertionError(flagMsg + 'the given combination of arguments (' + objType + ' and ' + _.type(val).toLowerCase() + ')' + ' is invalid for this assertion. ' + 'You can use an array, a map, an object, a set, a string, ' + 'or a weakset instead of a ' + _.type(val).toLowerCase(), undefined, ssfi);\n        }\n\n        var props = Object.keys(val),\n            firstErr = null,\n            numErrs = 0;\n        props.forEach(function (prop) {\n          var propAssertion = new Assertion(obj);\n\n          _.transferFlags(this, propAssertion, true);\n\n          flag(propAssertion, 'lockSsfi', true);\n\n          if (!negate || props.length === 1) {\n            propAssertion.property(prop, val[prop]);\n            return;\n          }\n\n          try {\n            propAssertion.property(prop, val[prop]);\n          } catch (err) {\n            if (!_.checkError.compatibleConstructor(err, AssertionError)) {\n              throw err;\n            }\n\n            if (firstErr === null) firstErr = err;\n            numErrs++;\n          }\n        }, this); // When validating .not.include with multiple properties, we only want\n        // to throw an assertion error if all of the properties are included,\n        // in which case we throw the first property assertion error that we\n        // encountered.\n\n        if (negate && props.length > 1 && numErrs === props.length) {\n          throw firstErr;\n        }\n\n        return;\n    } // Assert inclusion in collection or substring in a string.\n\n\n    this.assert(included, 'expected #{this} to ' + descriptor + 'include ' + _.inspect(val), 'expected #{this} to not ' + descriptor + 'include ' + _.inspect(val));\n  }\n\n  Assertion.addChainableMethod('include', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contain', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contains', include, includeChainingBehavior);\n  Assertion.addChainableMethod('includes', include, includeChainingBehavior);\n  /**\n   * ### .ok\n   *\n   * Asserts that the target is a truthy value (considered `true` in boolean context).\n   * However, it's often best to assert that the target is strictly (`===`) or\n   * deeply equal to its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.ok; // Not recommended\n   *\n   *     expect(true).to.be.true; // Recommended\n   *     expect(true).to.be.ok; // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.ok`.\n   *\n   *     expect(0).to.equal(0); // Recommended\n   *     expect(0).to.not.be.ok; // Not recommended\n   *\n   *     expect(false).to.be.false; // Recommended\n   *     expect(false).to.not.be.ok; // Not recommended\n   *\n   *     expect(null).to.be.null; // Recommended\n   *     expect(null).to.not.be.ok; // Not recommended\n   *\n   *     expect(undefined).to.be.undefined; // Recommended\n   *     expect(undefined).to.not.be.ok; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(false, 'nooo why fail??').to.be.ok;\n   *\n   * @name ok\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ok', function () {\n    this.assert(flag(this, 'object'), 'expected #{this} to be truthy', 'expected #{this} to be falsy');\n  });\n  /**\n   * ### .true\n   *\n   * Asserts that the target is strictly (`===`) equal to `true`.\n   *\n   *     expect(true).to.be.true;\n   *\n   * Add `.not` earlier in the chain to negate `.true`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `true`.\n   *\n   *     expect(false).to.be.false; // Recommended\n   *     expect(false).to.not.be.true; // Not recommended\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.true; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(false, 'nooo why fail??').to.be.true;\n   *\n   * @name true\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('true', function () {\n    this.assert(true === flag(this, 'object'), 'expected #{this} to be true', 'expected #{this} to be false', flag(this, 'negate') ? false : true);\n  });\n  /**\n   * ### .false\n   *\n   * Asserts that the target is strictly (`===`) equal to `false`.\n   *\n   *     expect(false).to.be.false;\n   *\n   * Add `.not` earlier in the chain to negate `.false`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to `false`.\n   *\n   *     expect(true).to.be.true; // Recommended\n   *     expect(true).to.not.be.false; // Not recommended\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.false; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(true, 'nooo why fail??').to.be.false;\n   *\n   * @name false\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('false', function () {\n    this.assert(false === flag(this, 'object'), 'expected #{this} to be false', 'expected #{this} to be true', flag(this, 'negate') ? true : false);\n  });\n  /**\n   * ### .null\n   *\n   * Asserts that the target is strictly (`===`) equal to `null`.\n   *\n   *     expect(null).to.be.null;\n   *\n   * Add `.not` earlier in the chain to negate `.null`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `null`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.null; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.null;\n   *\n   * @name null\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('null', function () {\n    this.assert(null === flag(this, 'object'), 'expected #{this} to be null', 'expected #{this} not to be null');\n  });\n  /**\n   * ### .undefined\n   *\n   * Asserts that the target is strictly (`===`) equal to `undefined`.\n   *\n   *     expect(undefined).to.be.undefined;\n   *\n   * Add `.not` earlier in the chain to negate `.undefined`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to `undefined`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.undefined; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.undefined;\n   *\n   * @name undefined\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('undefined', function () {\n    this.assert(undefined === flag(this, 'object'), 'expected #{this} to be undefined', 'expected #{this} not to be undefined');\n  });\n  /**\n   * ### .NaN\n   *\n   * Asserts that the target is exactly `NaN`.\n   *\n   *     expect(NaN).to.be.NaN;\n   *\n   * Add `.not` earlier in the chain to negate `.NaN`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `NaN`.\n   *\n   *     expect('foo').to.equal('foo'); // Recommended\n   *     expect('foo').to.not.be.NaN; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.NaN;\n   *\n   * @name NaN\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('NaN', function () {\n    this.assert(_.isNaN(flag(this, 'object')), 'expected #{this} to be NaN', 'expected #{this} not to be NaN');\n  });\n  /**\n   * ### .exist\n   *\n   * Asserts that the target is not strictly (`===`) equal to either `null` or\n   * `undefined`. However, it's often best to assert that the target is equal to\n   * its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.exist; // Not recommended\n   *\n   *     expect(0).to.equal(0); // Recommended\n   *     expect(0).to.exist; // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.exist`.\n   *\n   *     expect(null).to.be.null; // Recommended\n   *     expect(null).to.not.exist; // Not recommended\n   *\n   *     expect(undefined).to.be.undefined; // Recommended\n   *     expect(undefined).to.not.exist; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(null, 'nooo why fail??').to.exist;\n   *\n   * The alias `.exists` can be used interchangeably with `.exist`.\n   *\n   * @name exist\n   * @alias exists\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertExist() {\n    var val = flag(this, 'object');\n    this.assert(val !== null && val !== undefined, 'expected #{this} to exist', 'expected #{this} to not exist');\n  }\n\n  Assertion.addProperty('exist', assertExist);\n  Assertion.addProperty('exists', assertExist);\n  /**\n   * ### .empty\n   *\n   * When the target is a string or array, `.empty` asserts that the target's\n   * `length` property is strictly (`===`) equal to `0`.\n   *\n   *     expect([]).to.be.empty;\n   *     expect('').to.be.empty;\n   *\n   * When the target is a map or set, `.empty` asserts that the target's `size`\n   * property is strictly equal to `0`.\n   *\n   *     expect(new Set()).to.be.empty;\n   *     expect(new Map()).to.be.empty;\n   *\n   * When the target is a non-function object, `.empty` asserts that the target\n   * doesn't have any own enumerable properties. Properties with Symbol-based\n   * keys are excluded from the count.\n   *\n   *     expect({}).to.be.empty;\n   *\n   * Because `.empty` does different things based on the target's type, it's\n   * important to check the target's type before using `.empty`. See the `.a`\n   * doc for info on testing a target's type.\n   *\n   *     expect([]).to.be.an('array').that.is.empty;\n   *\n   * Add `.not` earlier in the chain to negate `.empty`. However, it's often\n   * best to assert that the target contains its expected number of values,\n   * rather than asserting that it's not empty.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.not.be.empty; // Not recommended\n   *\n   *     expect(new Set([1, 2, 3])).to.have.property('size', 3); // Recommended\n   *     expect(new Set([1, 2, 3])).to.not.be.empty; // Not recommended\n   *\n   *     expect(Object.keys({a: 1})).to.have.lengthOf(1); // Recommended\n   *     expect({a: 1}).to.not.be.empty; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect([1, 2, 3], 'nooo why fail??').to.be.empty;\n   *\n   * @name empty\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('empty', function () {\n    var val = flag(this, 'object'),\n        ssfi = flag(this, 'ssfi'),\n        flagMsg = flag(this, 'message'),\n        itemsCount;\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    switch (_.type(val).toLowerCase()) {\n      case 'array':\n      case 'string':\n        itemsCount = val.length;\n        break;\n\n      case 'map':\n      case 'set':\n        itemsCount = val.size;\n        break;\n\n      case 'weakmap':\n      case 'weakset':\n        throw new AssertionError(flagMsg + '.empty was passed a weak collection', undefined, ssfi);\n\n      case 'function':\n        var msg = flagMsg + '.empty was passed a function ' + _.getName(val);\n\n        throw new AssertionError(msg.trim(), undefined, ssfi);\n\n      default:\n        if (val !== Object(val)) {\n          throw new AssertionError(flagMsg + '.empty was passed non-string primitive ' + _.inspect(val), undefined, ssfi);\n        }\n\n        itemsCount = Object.keys(val).length;\n    }\n\n    this.assert(0 === itemsCount, 'expected #{this} to be empty', 'expected #{this} not to be empty');\n  });\n  /**\n   * ### .arguments\n   *\n   * Asserts that the target is an `arguments` object.\n   *\n   *     function test () {\n   *       expect(arguments).to.be.arguments;\n   *     }\n   *\n   *     test();\n   *\n   * Add `.not` earlier in the chain to negate `.arguments`. However, it's often\n   * best to assert which type the target is expected to be, rather than\n   * asserting that it’s not an `arguments` object.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.arguments; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({}, 'nooo why fail??').to.be.arguments;\n   *\n   * The alias `.Arguments` can be used interchangeably with `.arguments`.\n   *\n   * @name arguments\n   * @alias Arguments\n   * @namespace BDD\n   * @api public\n   */\n\n  function checkArguments() {\n    var obj = flag(this, 'object'),\n        type = _.type(obj);\n\n    this.assert('Arguments' === type, 'expected #{this} to be arguments but got ' + type, 'expected #{this} to not be arguments');\n  }\n\n  Assertion.addProperty('arguments', checkArguments);\n  Assertion.addProperty('Arguments', checkArguments);\n  /**\n   * ### .equal(val[, msg])\n   *\n   * Asserts that the target is strictly (`===`) equal to the given `val`.\n   *\n   *     expect(1).to.equal(1);\n   *     expect('foo').to.equal('foo');\n   *\n   * Add `.deep` earlier in the chain to use deep equality instead. See the\n   * `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) equals `{a: 1}`\n   *     expect({a: 1}).to.deep.equal({a: 1});\n   *     expect({a: 1}).to.not.equal({a: 1});\n   *\n   *     // Target array deeply (but not strictly) equals `[1, 2]`\n   *     expect([1, 2]).to.deep.equal([1, 2]);\n   *     expect([1, 2]).to.not.equal([1, 2]);\n   *\n   * Add `.not` earlier in the chain to negate `.equal`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to one of countless unexpected values.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.equal(2); // Not recommended\n   *\n   * `.equal` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.equal(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.equal(2);\n   *\n   * The aliases `.equals` and `eq` can be used interchangeably with `.equal`.\n   *\n   * @name equal\n   * @alias equals\n   * @alias eq\n   * @param {Mixed} val\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEqual(val, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n\n    if (flag(this, 'deep')) {\n      var prevLockSsfi = flag(this, 'lockSsfi');\n      flag(this, 'lockSsfi', true);\n      this.eql(val);\n      flag(this, 'lockSsfi', prevLockSsfi);\n    } else {\n      this.assert(val === obj, 'expected #{this} to equal #{exp}', 'expected #{this} to not equal #{exp}', val, this._obj, true);\n    }\n  }\n\n  Assertion.addMethod('equal', assertEqual);\n  Assertion.addMethod('equals', assertEqual);\n  Assertion.addMethod('eq', assertEqual);\n  /**\n   * ### .eql(obj[, msg])\n   *\n   * Asserts that the target is deeply equal to the given `obj`. See the\n   * `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object is deeply (but not strictly) equal to {a: 1}\n   *     expect({a: 1}).to.eql({a: 1}).but.not.equal({a: 1});\n   *\n   *     // Target array is deeply (but not strictly) equal to [1, 2]\n   *     expect([1, 2]).to.eql([1, 2]).but.not.equal([1, 2]);\n   *\n   * Add `.not` earlier in the chain to negate `.eql`. However, it's often best\n   * to assert that the target is deeply equal to its expected value, rather\n   * than not deeply equal to one of countless unexpected values.\n   *\n   *     expect({a: 1}).to.eql({a: 1}); // Recommended\n   *     expect({a: 1}).to.not.eql({b: 2}); // Not recommended\n   *\n   * `.eql` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect({a: 1}).to.eql({b: 2}, 'nooo why fail??');\n   *     expect({a: 1}, 'nooo why fail??').to.eql({b: 2});\n   *\n   * The alias `.eqls` can be used interchangeably with `.eql`.\n   *\n   * The `.deep.equal` assertion is almost identical to `.eql` but with one\n   * difference: `.deep.equal` causes deep equality comparisons to also be used\n   * for any other assertions that follow in the chain.\n   *\n   * @name eql\n   * @alias eqls\n   * @param {Mixed} obj\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEql(obj, msg) {\n    if (msg) flag(this, 'message', msg);\n    this.assert(_.eql(obj, flag(this, 'object')), 'expected #{this} to deeply equal #{exp}', 'expected #{this} to not deeply equal #{exp}', obj, this._obj, true);\n  }\n\n  Assertion.addMethod('eql', assertEql);\n  Assertion.addMethod('eqls', assertEql);\n  /**\n   * ### .above(n[, msg])\n   *\n   * Asserts that the target is a number or a date greater than the given number or date `n` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.above(1); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.above(2); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.above(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.above`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(1).to.not.be.above(2); // Not recommended\n   *\n   * `.above` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.above(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.above(2);\n   *\n   * The aliases `.gt` and `.greaterThan` can be used interchangeably with\n   * `.above`.\n   *\n   * @name above\n   * @alias gt\n   * @alias greaterThan\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertAbove(n, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var obj = flag(this, 'object'),\n        doLength = flag(this, 'doLength'),\n        flagMsg = flag(this, 'message'),\n        msgPrefix = flagMsg ? flagMsg + ': ' : '',\n        ssfi = flag(this, 'ssfi'),\n        objType = _.type(obj).toLowerCase(),\n        nType = _.type(n).toLowerCase(),\n        errorMessage,\n        shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && objType === 'date' && nType !== 'date') {\n      errorMessage = msgPrefix + 'the argument to above must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to above must be a number';\n    } else if (!doLength && objType !== 'date' && objType !== 'number') {\n      var printObj = objType === 'string' ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length',\n          itemsCount;\n\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n\n      this.assert(itemsCount > n, 'expected #{this} to have a ' + descriptor + ' above #{exp} but got #{act}', 'expected #{this} to not have a ' + descriptor + ' above #{exp}', n, itemsCount);\n    } else {\n      this.assert(obj > n, 'expected #{this} to be above #{exp}', 'expected #{this} to be at most #{exp}', n);\n    }\n  }\n\n  Assertion.addMethod('above', assertAbove);\n  Assertion.addMethod('gt', assertAbove);\n  Assertion.addMethod('greaterThan', assertAbove);\n  /**\n   * ### .least(n[, msg])\n   *\n   * Asserts that the target is a number or a date greater than or equal to the given\n   * number or date `n` respectively. However, it's often best to assert that the target is equal to\n   * its expected value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.at.least(1); // Not recommended\n   *     expect(2).to.be.at.least(2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than or equal to the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.at.least(2); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.at.least(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.least`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.at.least(2); // Not recommended\n   *\n   * `.least` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.at.least(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.at.least(2);\n   *\n   * The aliases `.gte` and `.greaterThanOrEqual` can be used interchangeably with\n   * `.least`.\n   *\n   * @name least\n   * @alias gte\n   * @alias greaterThanOrEqual\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLeast(n, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var obj = flag(this, 'object'),\n        doLength = flag(this, 'doLength'),\n        flagMsg = flag(this, 'message'),\n        msgPrefix = flagMsg ? flagMsg + ': ' : '',\n        ssfi = flag(this, 'ssfi'),\n        objType = _.type(obj).toLowerCase(),\n        nType = _.type(n).toLowerCase(),\n        errorMessage,\n        shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && objType === 'date' && nType !== 'date') {\n      errorMessage = msgPrefix + 'the argument to least must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to least must be a number';\n    } else if (!doLength && objType !== 'date' && objType !== 'number') {\n      var printObj = objType === 'string' ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length',\n          itemsCount;\n\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n\n      this.assert(itemsCount >= n, 'expected #{this} to have a ' + descriptor + ' at least #{exp} but got #{act}', 'expected #{this} to have a ' + descriptor + ' below #{exp}', n, itemsCount);\n    } else {\n      this.assert(obj >= n, 'expected #{this} to be at least #{exp}', 'expected #{this} to be below #{exp}', n);\n    }\n  }\n\n  Assertion.addMethod('least', assertLeast);\n  Assertion.addMethod('gte', assertLeast);\n  Assertion.addMethod('greaterThanOrEqual', assertLeast);\n  /**\n   * ### .below(n[, msg])\n   *\n   * Asserts that the target is a number or a date less than the given number or date `n` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.below(2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is less than the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.below(4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.length(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.below(4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.below`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.be.below(1); // Not recommended\n   *\n   * `.below` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(2).to.be.below(1, 'nooo why fail??');\n   *     expect(2, 'nooo why fail??').to.be.below(1);\n   *\n   * The aliases `.lt` and `.lessThan` can be used interchangeably with\n   * `.below`.\n   *\n   * @name below\n   * @alias lt\n   * @alias lessThan\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertBelow(n, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var obj = flag(this, 'object'),\n        doLength = flag(this, 'doLength'),\n        flagMsg = flag(this, 'message'),\n        msgPrefix = flagMsg ? flagMsg + ': ' : '',\n        ssfi = flag(this, 'ssfi'),\n        objType = _.type(obj).toLowerCase(),\n        nType = _.type(n).toLowerCase(),\n        errorMessage,\n        shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && objType === 'date' && nType !== 'date') {\n      errorMessage = msgPrefix + 'the argument to below must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to below must be a number';\n    } else if (!doLength && objType !== 'date' && objType !== 'number') {\n      var printObj = objType === 'string' ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length',\n          itemsCount;\n\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n\n      this.assert(itemsCount < n, 'expected #{this} to have a ' + descriptor + ' below #{exp} but got #{act}', 'expected #{this} to not have a ' + descriptor + ' below #{exp}', n, itemsCount);\n    } else {\n      this.assert(obj < n, 'expected #{this} to be below #{exp}', 'expected #{this} to be at least #{exp}', n);\n    }\n  }\n\n  Assertion.addMethod('below', assertBelow);\n  Assertion.addMethod('lt', assertBelow);\n  Assertion.addMethod('lessThan', assertBelow);\n  /**\n   * ### .most(n[, msg])\n   *\n   * Asserts that the target is a number or a date less than or equal to the given number\n   * or date `n` respectively. However, it's often best to assert that the target is equal to its\n   * expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.at.most(2); // Not recommended\n   *     expect(1).to.be.at.most(1); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is less than or equal to the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.at.most(4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.at.most(4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.most`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.be.at.most(1); // Not recommended\n   *\n   * `.most` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(2).to.be.at.most(1, 'nooo why fail??');\n   *     expect(2, 'nooo why fail??').to.be.at.most(1);\n   *\n   * The aliases `.lte` and `.lessThanOrEqual` can be used interchangeably with\n   * `.most`.\n   *\n   * @name most\n   * @alias lte\n   * @alias lessThanOrEqual\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertMost(n, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var obj = flag(this, 'object'),\n        doLength = flag(this, 'doLength'),\n        flagMsg = flag(this, 'message'),\n        msgPrefix = flagMsg ? flagMsg + ': ' : '',\n        ssfi = flag(this, 'ssfi'),\n        objType = _.type(obj).toLowerCase(),\n        nType = _.type(n).toLowerCase(),\n        errorMessage,\n        shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && objType === 'date' && nType !== 'date') {\n      errorMessage = msgPrefix + 'the argument to most must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to most must be a number';\n    } else if (!doLength && objType !== 'date' && objType !== 'number') {\n      var printObj = objType === 'string' ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length',\n          itemsCount;\n\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n\n      this.assert(itemsCount <= n, 'expected #{this} to have a ' + descriptor + ' at most #{exp} but got #{act}', 'expected #{this} to have a ' + descriptor + ' above #{exp}', n, itemsCount);\n    } else {\n      this.assert(obj <= n, 'expected #{this} to be at most #{exp}', 'expected #{this} to be above #{exp}', n);\n    }\n  }\n\n  Assertion.addMethod('most', assertMost);\n  Assertion.addMethod('lte', assertMost);\n  Assertion.addMethod('lessThanOrEqual', assertMost);\n  /**\n   * ### .within(start, finish[, msg])\n   *\n   * Asserts that the target is a number or a date greater than or equal to the given\n   * number or date `start`, and less than or equal to the given number or date `finish` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.within(1, 3); // Not recommended\n   *     expect(2).to.be.within(2, 3); // Not recommended\n   *     expect(2).to.be.within(1, 2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than or equal to the given number `start`, and less\n   * than or equal to the given number `finish`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.within(2, 4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.within(2, 4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.within`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.within(2, 4); // Not recommended\n   *\n   * `.within` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(4).to.be.within(1, 3, 'nooo why fail??');\n   *     expect(4, 'nooo why fail??').to.be.within(1, 3);\n   *\n   * @name within\n   * @param {Number} start lower bound inclusive\n   * @param {Number} finish upper bound inclusive\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('within', function (start, finish, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var obj = flag(this, 'object'),\n        doLength = flag(this, 'doLength'),\n        flagMsg = flag(this, 'message'),\n        msgPrefix = flagMsg ? flagMsg + ': ' : '',\n        ssfi = flag(this, 'ssfi'),\n        objType = _.type(obj).toLowerCase(),\n        startType = _.type(start).toLowerCase(),\n        finishType = _.type(finish).toLowerCase(),\n        errorMessage,\n        shouldThrow = true,\n        range = startType === 'date' && finishType === 'date' ? start.toUTCString() + '..' + finish.toUTCString() : start + '..' + finish;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && objType === 'date' && (startType !== 'date' || finishType !== 'date')) {\n      errorMessage = msgPrefix + 'the arguments to within must be dates';\n    } else if ((startType !== 'number' || finishType !== 'number') && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the arguments to within must be numbers';\n    } else if (!doLength && objType !== 'date' && objType !== 'number') {\n      var printObj = objType === 'string' ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length',\n          itemsCount;\n\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n\n      this.assert(itemsCount >= start && itemsCount <= finish, 'expected #{this} to have a ' + descriptor + ' within ' + range, 'expected #{this} to not have a ' + descriptor + ' within ' + range);\n    } else {\n      this.assert(obj >= start && obj <= finish, 'expected #{this} to be within ' + range, 'expected #{this} to not be within ' + range);\n    }\n  });\n  /**\n   * ### .instanceof(constructor[, msg])\n   *\n   * Asserts that the target is an instance of the given `constructor`.\n   *\n   *     function Cat () { }\n   *\n   *     expect(new Cat()).to.be.an.instanceof(Cat);\n   *     expect([1, 2]).to.be.an.instanceof(Array);\n   *\n   * Add `.not` earlier in the chain to negate `.instanceof`.\n   *\n   *     expect({a: 1}).to.not.be.an.instanceof(Array);\n   *\n   * `.instanceof` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1).to.be.an.instanceof(Array, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.an.instanceof(Array);\n   *\n   * Due to limitations in ES5, `.instanceof` may not always work as expected\n   * when using a transpiler such as Babel or TypeScript. In particular, it may\n   * produce unexpected results when subclassing built-in object such as\n   * `Array`, `Error`, and `Map`. See your transpiler's docs for details:\n   *\n   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n   *\n   * The alias `.instanceOf` can be used interchangeably with `.instanceof`.\n   *\n   * @name instanceof\n   * @param {Constructor} constructor\n   * @param {String} msg _optional_\n   * @alias instanceOf\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertInstanceOf(constructor, msg) {\n    if (msg) flag(this, 'message', msg);\n    var target = flag(this, 'object');\n    var ssfi = flag(this, 'ssfi');\n    var flagMsg = flag(this, 'message');\n\n    try {\n      var isInstanceOf = target instanceof constructor;\n    } catch (err) {\n      if (err instanceof TypeError) {\n        flagMsg = flagMsg ? flagMsg + ': ' : '';\n        throw new AssertionError(flagMsg + 'The instanceof assertion needs a constructor but ' + _.type(constructor) + ' was given.', undefined, ssfi);\n      }\n\n      throw err;\n    }\n\n    var name = _.getName(constructor);\n\n    if (name === null) {\n      name = 'an unnamed constructor';\n    }\n\n    this.assert(isInstanceOf, 'expected #{this} to be an instance of ' + name, 'expected #{this} to not be an instance of ' + name);\n  }\n\n  ;\n  Assertion.addMethod('instanceof', assertInstanceOf);\n  Assertion.addMethod('instanceOf', assertInstanceOf);\n  /**\n   * ### .property(name[, val[, msg]])\n   *\n   * Asserts that the target has a property with the given key `name`.\n   *\n   *     expect({a: 1}).to.have.property('a');\n   *\n   * When `val` is provided, `.property` also asserts that the property's value\n   * is equal to the given `val`.\n   *\n   *     expect({a: 1}).to.have.property('a', 1);\n   *\n   * By default, strict (`===`) equality is used. Add `.deep` earlier in the\n   * chain to use deep equality instead. See the `deep-eql` project page for\n   * info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n   *\n   * The target's enumerable and non-enumerable properties are always included\n   * in the search. By default, both own and inherited properties are included.\n   * Add `.own` earlier in the chain to exclude inherited properties from the\n   * search.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.have.own.property('a');\n   *     expect({a: 1}).to.have.own.property('a', 1);\n   *     expect({a: 1}).to.have.property('b');\n   *     expect({a: 1}).to.not.have.own.property('b');\n   *\n   * `.deep` and `.own` can be combined.\n   *\n   *     expect({x: {a: 1}}).to.have.deep.own.property('x', {a: 1});\n   *\n   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n   * referencing nested properties.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]', 'y');\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n   *\n   * `.deep` and `.nested` can be combined.\n   *\n   *     expect({a: {b: [{c: 3}]}})\n   *       .to.have.deep.nested.property('a.b[0]', {c: 3});\n   *\n   * `.own` and `.nested` cannot be combined.\n   *\n   * Add `.not` earlier in the chain to negate `.property`.\n   *\n   *     expect({a: 1}).to.not.have.property('b');\n   *\n   * However, it's dangerous to negate `.property` when providing `val`. The\n   * problem is that it creates uncertain expectations by asserting that the\n   * target either doesn't have a property with the given key `name`, or that it\n   * does have a property with the given key `name` but its value isn't equal to\n   * the given `val`. It's often best to identify the exact output that's\n   * expected, and then write an assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to have a property with the given key\n   * `name`, it's often best to assert exactly that.\n   *\n   *     expect({b: 2}).to.not.have.property('a'); // Recommended\n   *     expect({b: 2}).to.not.have.property('a', 1); // Not recommended\n   *\n   * When the target is expected to have a property with the given key `name`,\n   * it's often best to assert that the property has its expected value, rather\n   * than asserting that it doesn't have one of many unexpected values.\n   *\n   *     expect({a: 3}).to.have.property('a', 3); // Recommended\n   *     expect({a: 3}).to.not.have.property('a', 1); // Not recommended\n   *\n   * `.property` changes the target of any assertions that follow in the chain\n   * to be the value of the property from the original target object.\n   *\n   *     expect({a: 1}).to.have.property('a').that.is.a('number');\n   *\n   * `.property` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing `val`, only use the\n   * second form.\n   *\n   *     // Recommended\n   *     expect({a: 1}).to.have.property('a', 2, 'nooo why fail??');\n   *     expect({a: 1}, 'nooo why fail??').to.have.property('a', 2);\n   *     expect({a: 1}, 'nooo why fail??').to.have.property('b');\n   *\n   *     // Not recommended\n   *     expect({a: 1}).to.have.property('b', undefined, 'nooo why fail??');\n   *\n   * The above assertion isn't the same thing as not providing `val`. Instead,\n   * it's asserting that the target object has a `b` property that's equal to\n   * `undefined`.\n   *\n   * The assertions `.ownProperty` and `.haveOwnProperty` can be used\n   * interchangeably with `.own.property`.\n   *\n   * @name property\n   * @param {String} name\n   * @param {Mixed} val (optional)\n   * @param {String} msg _optional_\n   * @returns value of property for chaining\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertProperty(name, val, msg) {\n    if (msg) flag(this, 'message', msg);\n    var isNested = flag(this, 'nested'),\n        isOwn = flag(this, 'own'),\n        flagMsg = flag(this, 'message'),\n        obj = flag(this, 'object'),\n        ssfi = flag(this, 'ssfi'),\n        nameType = typeof name;\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    if (isNested) {\n      if (nameType !== 'string') {\n        throw new AssertionError(flagMsg + 'the argument to property must be a string when using nested syntax', undefined, ssfi);\n      }\n    } else {\n      if (nameType !== 'string' && nameType !== 'number' && nameType !== 'symbol') {\n        throw new AssertionError(flagMsg + 'the argument to property must be a string, number, or symbol', undefined, ssfi);\n      }\n    }\n\n    if (isNested && isOwn) {\n      throw new AssertionError(flagMsg + 'The \"nested\" and \"own\" flags cannot be combined.', undefined, ssfi);\n    }\n\n    if (obj === null || obj === undefined) {\n      throw new AssertionError(flagMsg + 'Target cannot be null or undefined.', undefined, ssfi);\n    }\n\n    var isDeep = flag(this, 'deep'),\n        negate = flag(this, 'negate'),\n        pathInfo = isNested ? _.getPathInfo(obj, name) : null,\n        value = isNested ? pathInfo.value : obj[name];\n    var descriptor = '';\n    if (isDeep) descriptor += 'deep ';\n    if (isOwn) descriptor += 'own ';\n    if (isNested) descriptor += 'nested ';\n    descriptor += 'property ';\n    var hasProperty;\n    if (isOwn) hasProperty = Object.prototype.hasOwnProperty.call(obj, name);else if (isNested) hasProperty = pathInfo.exists;else hasProperty = _.hasProperty(obj, name); // When performing a negated assertion for both name and val, merely having\n    // a property with the given name isn't enough to cause the assertion to\n    // fail. It must both have a property with the given name, and the value of\n    // that property must equal the given val. Therefore, skip this assertion in\n    // favor of the next.\n\n    if (!negate || arguments.length === 1) {\n      this.assert(hasProperty, 'expected #{this} to have ' + descriptor + _.inspect(name), 'expected #{this} to not have ' + descriptor + _.inspect(name));\n    }\n\n    if (arguments.length > 1) {\n      this.assert(hasProperty && (isDeep ? _.eql(val, value) : val === value), 'expected #{this} to have ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}', 'expected #{this} to not have ' + descriptor + _.inspect(name) + ' of #{act}', val, value);\n    }\n\n    flag(this, 'object', value);\n  }\n\n  Assertion.addMethod('property', assertProperty);\n\n  function assertOwnProperty(name, value, msg) {\n    flag(this, 'own', true);\n    assertProperty.apply(this, arguments);\n  }\n\n  Assertion.addMethod('ownProperty', assertOwnProperty);\n  Assertion.addMethod('haveOwnProperty', assertOwnProperty);\n  /**\n   * ### .ownPropertyDescriptor(name[, descriptor[, msg]])\n   *\n   * Asserts that the target has its own property descriptor with the given key\n   * `name`. Enumerable and non-enumerable properties are included in the\n   * search.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a');\n   *\n   * When `descriptor` is provided, `.ownPropertyDescriptor` also asserts that\n   * the property's descriptor is deeply equal to the given `descriptor`. See\n   * the `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * Add `.not` earlier in the chain to negate `.ownPropertyDescriptor`.\n   *\n   *     expect({a: 1}).to.not.have.ownPropertyDescriptor('b');\n   *\n   * However, it's dangerous to negate `.ownPropertyDescriptor` when providing\n   * a `descriptor`. The problem is that it creates uncertain expectations by\n   * asserting that the target either doesn't have a property descriptor with\n   * the given key `name`, or that it does have a property descriptor with the\n   * given key `name` but it’s not deeply equal to the given `descriptor`. It's\n   * often best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to have a property descriptor with the given\n   * key `name`, it's often best to assert exactly that.\n   *\n   *     // Recommended\n   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a');\n   *\n   *     // Not recommended\n   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * When the target is expected to have a property descriptor with the given\n   * key `name`, it's often best to assert that the property has its expected\n   * descriptor, rather than asserting that it doesn't have one of many\n   * unexpected descriptors.\n   *\n   *     // Recommended\n   *     expect({a: 3}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 3,\n   *     });\n   *\n   *     // Not recommended\n   *     expect({a: 3}).to.not.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * `.ownPropertyDescriptor` changes the target of any assertions that follow\n   * in the chain to be the value of the property descriptor from the original\n   * target object.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a')\n   *       .that.has.property('enumerable', true);\n   *\n   * `.ownPropertyDescriptor` accepts an optional `msg` argument which is a\n   * custom error message to show when the assertion fails. The message can also\n   * be given as the second argument to `expect`. When not providing\n   * `descriptor`, only use the second form.\n   *\n   *     // Recommended\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 2,\n   *     }, 'nooo why fail??');\n   *\n   *     // Recommended\n   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 2,\n   *     });\n   *\n   *     // Recommended\n   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('b');\n   *\n   *     // Not recommended\n   *     expect({a: 1})\n   *       .to.have.ownPropertyDescriptor('b', undefined, 'nooo why fail??');\n   *\n   * The above assertion isn't the same thing as not providing `descriptor`.\n   * Instead, it's asserting that the target object has a `b` property\n   * descriptor that's deeply equal to `undefined`.\n   *\n   * The alias `.haveOwnPropertyDescriptor` can be used interchangeably with\n   * `.ownPropertyDescriptor`.\n   *\n   * @name ownPropertyDescriptor\n   * @alias haveOwnPropertyDescriptor\n   * @param {String} name\n   * @param {Object} descriptor _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertOwnPropertyDescriptor(name, descriptor, msg) {\n    if (typeof descriptor === 'string') {\n      msg = descriptor;\n      descriptor = null;\n    }\n\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);\n\n    if (actualDescriptor && descriptor) {\n      this.assert(_.eql(descriptor, actualDescriptor), 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor), 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor), descriptor, actualDescriptor, true);\n    } else {\n      this.assert(actualDescriptor, 'expected #{this} to have an own property descriptor for ' + _.inspect(name), 'expected #{this} to not have an own property descriptor for ' + _.inspect(name));\n    }\n\n    flag(this, 'object', actualDescriptor);\n  }\n\n  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);\n  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);\n  /**\n   * ### .lengthOf(n[, msg])\n   *\n   * Asserts that the target's `length` or `size` is equal to the given number\n   * `n`.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3);\n   *     expect('foo').to.have.lengthOf(3);\n   *     expect(new Set([1, 2, 3])).to.have.lengthOf(3);\n   *     expect(new Map([['a', 1], ['b', 2], ['c', 3]])).to.have.lengthOf(3);\n   *\n   * Add `.not` earlier in the chain to negate `.lengthOf`. However, it's often\n   * best to assert that the target's `length` property is equal to its expected\n   * value, rather than not equal to one of many unexpected values.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.not.have.lengthOf(4); // Not recommended\n   *\n   * `.lengthOf` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(2, 'nooo why fail??');\n   *     expect([1, 2, 3], 'nooo why fail??').to.have.lengthOf(2);\n   *\n   * `.lengthOf` can also be used as a language chain, causing all `.above`,\n   * `.below`, `.least`, `.most`, and `.within` assertions that follow in the\n   * chain to use the target's `length` property as the target. However, it's\n   * often best to assert that the target's `length` property is equal to its\n   * expected length, rather than asserting that its `length` property falls\n   * within some range of values.\n   *\n   *     // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf(3);\n   *\n   *     // Not recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.above(2);\n   *     expect([1, 2, 3]).to.have.lengthOf.below(4);\n   *     expect([1, 2, 3]).to.have.lengthOf.at.least(3);\n   *     expect([1, 2, 3]).to.have.lengthOf.at.most(3);\n   *     expect([1, 2, 3]).to.have.lengthOf.within(2,4);\n   *\n   * Due to a compatibility issue, the alias `.length` can't be chained directly\n   * off of an uninvoked method such as `.a`. Therefore, `.length` can't be used\n   * interchangeably with `.lengthOf` in every situation. It's recommended to\n   * always use `.lengthOf` instead of `.length`.\n   *\n   *     expect([1, 2, 3]).to.have.a.length(3); // incompatible; throws error\n   *     expect([1, 2, 3]).to.have.a.lengthOf(3);  // passes as expected\n   *\n   * @name lengthOf\n   * @alias length\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLengthChain() {\n    flag(this, 'doLength', true);\n  }\n\n  function assertLength(n, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var obj = flag(this, 'object'),\n        objType = _.type(obj).toLowerCase(),\n        flagMsg = flag(this, 'message'),\n        ssfi = flag(this, 'ssfi'),\n        descriptor = 'length',\n        itemsCount;\n\n    switch (objType) {\n      case 'map':\n      case 'set':\n        descriptor = 'size';\n        itemsCount = obj.size;\n        break;\n\n      default:\n        new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n        itemsCount = obj.length;\n    }\n\n    this.assert(itemsCount == n, 'expected #{this} to have a ' + descriptor + ' of #{exp} but got #{act}', 'expected #{this} to not have a ' + descriptor + ' of #{act}', n, itemsCount);\n  }\n\n  Assertion.addChainableMethod('length', assertLength, assertLengthChain);\n  Assertion.addChainableMethod('lengthOf', assertLength, assertLengthChain);\n  /**\n   * ### .match(re[, msg])\n   *\n   * Asserts that the target matches the given regular expression `re`.\n   *\n   *     expect('foobar').to.match(/^foo/);\n   *\n   * Add `.not` earlier in the chain to negate `.match`.\n   *\n   *     expect('foobar').to.not.match(/taco/);\n   *\n   * `.match` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect('foobar').to.match(/taco/, 'nooo why fail??');\n   *     expect('foobar', 'nooo why fail??').to.match(/taco/);\n   *\n   * The alias `.matches` can be used interchangeably with `.match`.\n   *\n   * @name match\n   * @alias matches\n   * @param {RegExp} re\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertMatch(re, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(re.exec(obj), 'expected #{this} to match ' + re, 'expected #{this} not to match ' + re);\n  }\n\n  Assertion.addMethod('match', assertMatch);\n  Assertion.addMethod('matches', assertMatch);\n  /**\n   * ### .string(str[, msg])\n   *\n   * Asserts that the target string contains the given substring `str`.\n   *\n   *     expect('foobar').to.have.string('bar');\n   *\n   * Add `.not` earlier in the chain to negate `.string`.\n   *\n   *     expect('foobar').to.not.have.string('taco');\n   *\n   * `.string` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect('foobar').to.have.string('taco', 'nooo why fail??');\n   *     expect('foobar', 'nooo why fail??').to.have.string('taco');\n   *\n   * @name string\n   * @param {String} str\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('string', function (str, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object'),\n        flagMsg = flag(this, 'message'),\n        ssfi = flag(this, 'ssfi');\n    new Assertion(obj, flagMsg, ssfi, true).is.a('string');\n    this.assert(~obj.indexOf(str), 'expected #{this} to contain ' + _.inspect(str), 'expected #{this} to not contain ' + _.inspect(str));\n  });\n  /**\n   * ### .keys(key1[, key2[, ...]])\n   *\n   * Asserts that the target object, array, map, or set has the given keys. Only\n   * the target's own inherited properties are included in the search.\n   *\n   * When the target is an object or array, keys can be provided as one or more\n   * string arguments, a single array argument, or a single object argument. In\n   * the latter case, only the keys in the given object matter; the values are\n   * ignored.\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *     expect(['x', 'y']).to.have.all.keys(0, 1);\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys(['a', 'b']);\n   *     expect(['x', 'y']).to.have.all.keys([0, 1]);\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys({a: 4, b: 5}); // ignore 4 and 5\n   *     expect(['x', 'y']).to.have.all.keys({0: 4, 1: 5}); // ignore 4 and 5\n   *\n   * When the target is a map or set, each key must be provided as a separate\n   * argument.\n   *\n   *     expect(new Map([['a', 1], ['b', 2]])).to.have.all.keys('a', 'b');\n   *     expect(new Set(['a', 'b'])).to.have.all.keys('a', 'b');\n   *\n   * Because `.keys` does different things based on the target's type, it's\n   * important to check the target's type before using `.keys`. See the `.a` doc\n   * for info on testing a target's type.\n   *\n   *     expect({a: 1, b: 2}).to.be.an('object').that.has.all.keys('a', 'b');\n   *\n   * By default, strict (`===`) equality is used to compare keys of maps and\n   * sets. Add `.deep` earlier in the chain to use deep equality instead. See\n   * the `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target set deeply (but not strictly) has key `{a: 1}`\n   *     expect(new Set([{a: 1}])).to.have.all.deep.keys([{a: 1}]);\n   *     expect(new Set([{a: 1}])).to.not.have.all.keys([{a: 1}]);\n   *\n   * By default, the target must have all of the given keys and no more. Add\n   * `.any` earlier in the chain to only require that the target have at least\n   * one of the given keys. Also, add `.not` earlier in the chain to negate\n   * `.keys`. It's often best to add `.any` when negating `.keys`, and to use\n   * `.all` when asserting `.keys` without negation.\n   *\n   * When negating `.keys`, `.any` is preferred because `.not.any.keys` asserts\n   * exactly what's expected of the output, whereas `.not.all.keys` creates\n   * uncertain expectations.\n   *\n   *     // Recommended; asserts that target doesn't have any of the given keys\n   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n   *\n   *     // Not recommended; asserts that target doesn't have all of the given\n   *     // keys but may or may not have some of them\n   *     expect({a: 1, b: 2}).to.not.have.all.keys('c', 'd');\n   *\n   * When asserting `.keys` without negation, `.all` is preferred because\n   * `.all.keys` asserts exactly what's expected of the output, whereas\n   * `.any.keys` creates uncertain expectations.\n   *\n   *     // Recommended; asserts that target has all the given keys\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *\n   *     // Not recommended; asserts that target has at least one of the given\n   *     // keys but may or may not have more of them\n   *     expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\n   *\n   * Note that `.all` is used by default when neither `.all` nor `.any` appear\n   * earlier in the chain. However, it's often best to add `.all` anyway because\n   * it improves readability.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b'); // Recommended\n   *     expect({a: 1, b: 2}).to.have.keys('a', 'b'); // Not recommended\n   *\n   * Add `.include` earlier in the chain to require that the target's keys be a\n   * superset of the expected keys, rather than identical sets.\n   *\n   *     // Target object's keys are a superset of ['a', 'b'] but not identical\n   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n   *\n   * However, if `.any` and `.include` are combined, only the `.any` takes\n   * effect. The `.include` is ignored in this case.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1}).to.have.any.keys('a', 'b');\n   *     expect({a: 1}).to.include.any.keys('a', 'b');\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.have.key('b');\n   *\n   * The alias `.key` can be used interchangeably with `.keys`.\n   *\n   * @name keys\n   * @alias key\n   * @param {...String|Array|Object} keys\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertKeys(keys) {\n    var obj = flag(this, 'object'),\n        objType = _.type(obj),\n        keysType = _.type(keys),\n        ssfi = flag(this, 'ssfi'),\n        isDeep = flag(this, 'deep'),\n        str,\n        deepStr = '',\n        actual,\n        ok = true,\n        flagMsg = flag(this, 'message');\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n    var mixedArgsMsg = flagMsg + 'when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments';\n\n    if (objType === 'Map' || objType === 'Set') {\n      deepStr = isDeep ? 'deeply ' : '';\n      actual = []; // Map and Set '.keys' aren't supported in IE 11. Therefore, use .forEach.\n\n      obj.forEach(function (val, key) {\n        actual.push(key);\n      });\n\n      if (keysType !== 'Array') {\n        keys = Array.prototype.slice.call(arguments);\n      }\n    } else {\n      actual = _.getOwnEnumerableProperties(obj);\n\n      switch (keysType) {\n        case 'Array':\n          if (arguments.length > 1) {\n            throw new AssertionError(mixedArgsMsg, undefined, ssfi);\n          }\n\n          break;\n\n        case 'Object':\n          if (arguments.length > 1) {\n            throw new AssertionError(mixedArgsMsg, undefined, ssfi);\n          }\n\n          keys = Object.keys(keys);\n          break;\n\n        default:\n          keys = Array.prototype.slice.call(arguments);\n      } // Only stringify non-Symbols because Symbols would become \"Symbol()\"\n\n\n      keys = keys.map(function (val) {\n        return typeof val === 'symbol' ? val : String(val);\n      });\n    }\n\n    if (!keys.length) {\n      throw new AssertionError(flagMsg + 'keys required', undefined, ssfi);\n    }\n\n    var len = keys.length,\n        any = flag(this, 'any'),\n        all = flag(this, 'all'),\n        expected = keys;\n\n    if (!any && !all) {\n      all = true;\n    } // Has any\n\n\n    if (any) {\n      ok = expected.some(function (expectedKey) {\n        return actual.some(function (actualKey) {\n          if (isDeep) {\n            return _.eql(expectedKey, actualKey);\n          } else {\n            return expectedKey === actualKey;\n          }\n        });\n      });\n    } // Has all\n\n\n    if (all) {\n      ok = expected.every(function (expectedKey) {\n        return actual.some(function (actualKey) {\n          if (isDeep) {\n            return _.eql(expectedKey, actualKey);\n          } else {\n            return expectedKey === actualKey;\n          }\n        });\n      });\n\n      if (!flag(this, 'contains')) {\n        ok = ok && keys.length == actual.length;\n      }\n    } // Key string\n\n\n    if (len > 1) {\n      keys = keys.map(function (key) {\n        return _.inspect(key);\n      });\n      var last = keys.pop();\n\n      if (all) {\n        str = keys.join(', ') + ', and ' + last;\n      }\n\n      if (any) {\n        str = keys.join(', ') + ', or ' + last;\n      }\n    } else {\n      str = _.inspect(keys[0]);\n    } // Form\n\n\n    str = (len > 1 ? 'keys ' : 'key ') + str; // Have / include\n\n    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str; // Assertion\n\n    this.assert(ok, 'expected #{this} to ' + deepStr + str, 'expected #{this} to not ' + deepStr + str, expected.slice(0).sort(_.compareByInspect), actual.sort(_.compareByInspect), true);\n  }\n\n  Assertion.addMethod('keys', assertKeys);\n  Assertion.addMethod('key', assertKeys);\n  /**\n   * ### .throw([errorLike], [errMsgMatcher], [msg])\n   *\n   * When no arguments are provided, `.throw` invokes the target function and\n   * asserts that an error is thrown.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw();\n   *\n   * When one argument is provided, and it's an error constructor, `.throw`\n   * invokes the target function and asserts that an error is thrown that's an\n   * instance of that error constructor.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(TypeError);\n   *\n   * When one argument is provided, and it's an error instance, `.throw` invokes\n   * the target function and asserts that an error is thrown that's strictly\n   * (`===`) equal to that error instance.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(err);\n   *\n   * When one argument is provided, and it's a string, `.throw` invokes the\n   * target function and asserts that an error is thrown with a message that\n   * contains that string.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw('salmon');\n   *\n   * When one argument is provided, and it's a regular expression, `.throw`\n   * invokes the target function and asserts that an error is thrown with a\n   * message that matches that regular expression.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(/salmon/);\n   *\n   * When two arguments are provided, and the first is an error instance or\n   * constructor, and the second is a string or regular expression, `.throw`\n   * invokes the function and asserts that an error is thrown that fulfills both\n   * conditions as described above.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(TypeError, 'salmon');\n   *     expect(badFn).to.throw(TypeError, /salmon/);\n   *     expect(badFn).to.throw(err, 'salmon');\n   *     expect(badFn).to.throw(err, /salmon/);\n   *\n   * Add `.not` earlier in the chain to negate `.throw`.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.not.throw();\n   *\n   * However, it's dangerous to negate `.throw` when providing any arguments.\n   * The problem is that it creates uncertain expectations by asserting that the\n   * target either doesn't throw an error, or that it throws an error but of a\n   * different type than the given type, or that it throws an error of the given\n   * type but with a message that doesn't include the given string. It's often\n   * best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to throw an error, it's often best to assert\n   * exactly that.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.not.throw(); // Recommended\n   *     expect(goodFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n   *\n   * When the target is expected to throw an error, it's often best to assert\n   * that the error is of its expected type, and has a message that includes an\n   * expected string, rather than asserting that it doesn't have one of many\n   * unexpected types, and doesn't have a message that includes some string.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(TypeError, 'salmon'); // Recommended\n   *     expect(badFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n   *\n   * `.throw` changes the target of any assertions that follow in the chain to\n   * be the error object that's thrown.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     err.code = 42;\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(TypeError).with.property('code', 42);\n   *\n   * `.throw` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`. When not providing two arguments, always use\n   * the second form.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.throw(TypeError, 'x', 'nooo why fail??');\n   *     expect(goodFn, 'nooo why fail??').to.throw();\n   *\n   * Due to limitations in ES5, `.throw` may not always work as expected when\n   * using a transpiler such as Babel or TypeScript. In particular, it may\n   * produce unexpected results when subclassing the built-in `Error` object and\n   * then passing the subclassed constructor to `.throw`. See your transpiler's\n   * docs for details:\n   *\n   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n   *\n   * Beware of some common mistakes when using the `throw` assertion. One common\n   * mistake is to accidentally invoke the function yourself instead of letting\n   * the `throw` assertion invoke the function for you. For example, when\n   * testing if a function named `fn` throws, provide `fn` instead of `fn()` as\n   * the target for the assertion.\n   *\n   *     expect(fn).to.throw();     // Good! Tests `fn` as desired\n   *     expect(fn()).to.throw();   // Bad! Tests result of `fn()`, not `fn`\n   *\n   * If you need to assert that your function `fn` throws when passed certain\n   * arguments, then wrap a call to `fn` inside of another function.\n   *\n   *     expect(function () { fn(42); }).to.throw();  // Function expression\n   *     expect(() => fn(42)).to.throw();             // ES6 arrow function\n   *\n   * Another common mistake is to provide an object method (or any stand-alone\n   * function that relies on `this`) as the target of the assertion. Doing so is\n   * problematic because the `this` context will be lost when the function is\n   * invoked by `.throw`; there's no way for it to know what `this` is supposed\n   * to be. There are two ways around this problem. One solution is to wrap the\n   * method or function call inside of another function. Another solution is to\n   * use `bind`.\n   *\n   *     expect(function () { cat.meow(); }).to.throw();  // Function expression\n   *     expect(() => cat.meow()).to.throw();             // ES6 arrow function\n   *     expect(cat.meow.bind(cat)).to.throw();           // Bind\n   *\n   * Finally, it's worth mentioning that it's a best practice in JavaScript to\n   * only throw `Error` and derivatives of `Error` such as `ReferenceError`,\n   * `TypeError`, and user-defined objects that extend `Error`. No other type of\n   * value will generate a stack trace when initialized. With that said, the\n   * `throw` assertion does technically support any type of value being thrown,\n   * not just `Error` and its derivatives.\n   *\n   * The aliases `.throws` and `.Throw` can be used interchangeably with\n   * `.throw`.\n   *\n   * @name throw\n   * @alias throws\n   * @alias Throw\n   * @param {Error|ErrorConstructor} errorLike\n   * @param {String|RegExp} errMsgMatcher error message\n   * @param {String} msg _optional_\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @returns error for chaining (null if no error)\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertThrows(errorLike, errMsgMatcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object'),\n        ssfi = flag(this, 'ssfi'),\n        flagMsg = flag(this, 'message'),\n        negate = flag(this, 'negate') || false;\n    new Assertion(obj, flagMsg, ssfi, true).is.a('function');\n\n    if (errorLike instanceof RegExp || typeof errorLike === 'string') {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    var caughtErr;\n\n    try {\n      obj();\n    } catch (err) {\n      caughtErr = err;\n    } // If we have the negate flag enabled and at least one valid argument it means we do expect an error\n    // but we want it to match a given set of criteria\n\n\n    var everyArgIsUndefined = errorLike === undefined && errMsgMatcher === undefined; // If we've got the negate flag enabled and both args, we should only fail if both aren't compatible\n    // See Issue #551 and PR #683@GitHub\n\n    var everyArgIsDefined = Boolean(errorLike && errMsgMatcher);\n    var errorLikeFail = false;\n    var errMsgMatcherFail = false; // Checking if error was thrown\n\n    if (everyArgIsUndefined || !everyArgIsUndefined && !negate) {\n      // We need this to display results correctly according to their types\n      var errorLikeString = 'an error';\n\n      if (errorLike instanceof Error) {\n        errorLikeString = '#{exp}';\n      } else if (errorLike) {\n        errorLikeString = _.checkError.getConstructorName(errorLike);\n      }\n\n      this.assert(caughtErr, 'expected #{this} to throw ' + errorLikeString, 'expected #{this} to not throw an error but #{act} was thrown', errorLike && errorLike.toString(), caughtErr instanceof Error ? caughtErr.toString() : typeof caughtErr === 'string' ? caughtErr : caughtErr && _.checkError.getConstructorName(caughtErr));\n    }\n\n    if (errorLike && caughtErr) {\n      // We should compare instances only if `errorLike` is an instance of `Error`\n      if (errorLike instanceof Error) {\n        var isCompatibleInstance = _.checkError.compatibleInstance(caughtErr, errorLike);\n\n        if (isCompatibleInstance === negate) {\n          // These checks were created to ensure we won't fail too soon when we've got both args and a negate\n          // See Issue #551 and PR #683@GitHub\n          if (everyArgIsDefined && negate) {\n            errorLikeFail = true;\n          } else {\n            this.assert(negate, 'expected #{this} to throw #{exp} but #{act} was thrown', 'expected #{this} to not throw #{exp}' + (caughtErr && !negate ? ' but #{act} was thrown' : ''), errorLike.toString(), caughtErr.toString());\n          }\n        }\n      }\n\n      var isCompatibleConstructor = _.checkError.compatibleConstructor(caughtErr, errorLike);\n\n      if (isCompatibleConstructor === negate) {\n        if (everyArgIsDefined && negate) {\n          errorLikeFail = true;\n        } else {\n          this.assert(negate, 'expected #{this} to throw #{exp} but #{act} was thrown', 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : ''), errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike), caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr));\n        }\n      }\n    }\n\n    if (caughtErr && errMsgMatcher !== undefined && errMsgMatcher !== null) {\n      // Here we check compatible messages\n      var placeholder = 'including';\n\n      if (errMsgMatcher instanceof RegExp) {\n        placeholder = 'matching';\n      }\n\n      var isCompatibleMessage = _.checkError.compatibleMessage(caughtErr, errMsgMatcher);\n\n      if (isCompatibleMessage === negate) {\n        if (everyArgIsDefined && negate) {\n          errMsgMatcherFail = true;\n        } else {\n          this.assert(negate, 'expected #{this} to throw error ' + placeholder + ' #{exp} but got #{act}', 'expected #{this} to throw error not ' + placeholder + ' #{exp}', errMsgMatcher, _.checkError.getMessage(caughtErr));\n        }\n      }\n    } // If both assertions failed and both should've matched we throw an error\n\n\n    if (errorLikeFail && errMsgMatcherFail) {\n      this.assert(negate, 'expected #{this} to throw #{exp} but #{act} was thrown', 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : ''), errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike), caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr));\n    }\n\n    flag(this, 'object', caughtErr);\n  }\n\n  ;\n  Assertion.addMethod('throw', assertThrows);\n  Assertion.addMethod('throws', assertThrows);\n  Assertion.addMethod('Throw', assertThrows);\n  /**\n   * ### .respondTo(method[, msg])\n   *\n   * When the target is a non-function object, `.respondTo` asserts that the\n   * target has a method with the given name `method`. The method can be own or\n   * inherited, and it can be enumerable or non-enumerable.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(new Cat()).to.respondTo('meow');\n   *\n   * When the target is a function, `.respondTo` asserts that the target's\n   * `prototype` property has a method with the given name `method`. Again, the\n   * method can be own or inherited, and it can be enumerable or non-enumerable.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(Cat).to.respondTo('meow');\n   *\n   * Add `.itself` earlier in the chain to force `.respondTo` to treat the\n   * target as a non-function object, even if it's a function. Thus, it asserts\n   * that the target has a method with the given name `method`, rather than\n   * asserting that the target's `prototype` property has a method with the\n   * given name `method`.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *     Cat.hiss = function () {};\n   *\n   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n   *\n   * When not adding `.itself`, it's important to check the target's type before\n   * using `.respondTo`. See the `.a` doc for info on checking a target's type.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(new Cat()).to.be.an('object').that.respondsTo('meow');\n   *\n   * Add `.not` earlier in the chain to negate `.respondTo`.\n   *\n   *     function Dog () {}\n   *     Dog.prototype.bark = function () {};\n   *\n   *     expect(new Dog()).to.not.respondTo('meow');\n   *\n   * `.respondTo` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect({}).to.respondTo('meow', 'nooo why fail??');\n   *     expect({}, 'nooo why fail??').to.respondTo('meow');\n   *\n   * The alias `.respondsTo` can be used interchangeably with `.respondTo`.\n   *\n   * @name respondTo\n   * @alias respondsTo\n   * @param {String} method\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function respondTo(method, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object'),\n        itself = flag(this, 'itself'),\n        context = 'function' === typeof obj && !itself ? obj.prototype[method] : obj[method];\n    this.assert('function' === typeof context, 'expected #{this} to respond to ' + _.inspect(method), 'expected #{this} to not respond to ' + _.inspect(method));\n  }\n\n  Assertion.addMethod('respondTo', respondTo);\n  Assertion.addMethod('respondsTo', respondTo);\n  /**\n   * ### .itself\n   *\n   * Forces all `.respondTo` assertions that follow in the chain to behave as if\n   * the target is a non-function object, even if it's a function. Thus, it\n   * causes `.respondTo` to assert that the target has a method with the given\n   * name, rather than asserting that the target's `prototype` property has a\n   * method with the given name.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *     Cat.hiss = function () {};\n   *\n   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n   *\n   * @name itself\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('itself', function () {\n    flag(this, 'itself', true);\n  });\n  /**\n   * ### .satisfy(matcher[, msg])\n   *\n   * Invokes the given `matcher` function with the target being passed as the\n   * first argument, and asserts that the value returned is truthy.\n   *\n   *     expect(1).to.satisfy(function(num) {\n   *       return num > 0;\n   *     });\n   *\n   * Add `.not` earlier in the chain to negate `.satisfy`.\n   *\n   *     expect(1).to.not.satisfy(function(num) {\n   *       return num > 2;\n   *     });\n   *\n   * `.satisfy` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1).to.satisfy(function(num) {\n   *       return num > 2;\n   *     }, 'nooo why fail??');\n   *\n   *     expect(1, 'nooo why fail??').to.satisfy(function(num) {\n   *       return num > 2;\n   *     });\n   *\n   * The alias `.satisfies` can be used interchangeably with `.satisfy`.\n   *\n   * @name satisfy\n   * @alias satisfies\n   * @param {Function} matcher\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function satisfy(matcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var result = matcher(obj);\n    this.assert(result, 'expected #{this} to satisfy ' + _.objDisplay(matcher), 'expected #{this} to not satisfy' + _.objDisplay(matcher), flag(this, 'negate') ? false : true, result);\n  }\n\n  Assertion.addMethod('satisfy', satisfy);\n  Assertion.addMethod('satisfies', satisfy);\n  /**\n   * ### .closeTo(expected, delta[, msg])\n   *\n   * Asserts that the target is a number that's within a given +/- `delta` range\n   * of the given number `expected`. However, it's often best to assert that the\n   * target is equal to its expected value.\n   *\n   *     // Recommended\n   *     expect(1.5).to.equal(1.5);\n   *\n   *     // Not recommended\n   *     expect(1.5).to.be.closeTo(1, 0.5);\n   *     expect(1.5).to.be.closeTo(2, 0.5);\n   *     expect(1.5).to.be.closeTo(1, 1);\n   *\n   * Add `.not` earlier in the chain to negate `.closeTo`.\n   *\n   *     expect(1.5).to.equal(1.5); // Recommended\n   *     expect(1.5).to.not.be.closeTo(3, 1); // Not recommended\n   *\n   * `.closeTo` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1.5).to.be.closeTo(3, 1, 'nooo why fail??');\n   *     expect(1.5, 'nooo why fail??').to.be.closeTo(3, 1);\n   *\n   * The alias `.approximately` can be used interchangeably with `.closeTo`.\n   *\n   * @name closeTo\n   * @alias approximately\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function closeTo(expected, delta, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object'),\n        flagMsg = flag(this, 'message'),\n        ssfi = flag(this, 'ssfi');\n    new Assertion(obj, flagMsg, ssfi, true).is.a('number');\n\n    if (typeof expected !== 'number' || typeof delta !== 'number') {\n      flagMsg = flagMsg ? flagMsg + ': ' : '';\n      var deltaMessage = delta === undefined ? \", and a delta is required\" : \"\";\n      throw new AssertionError(flagMsg + 'the arguments to closeTo or approximately must be numbers' + deltaMessage, undefined, ssfi);\n    }\n\n    this.assert(Math.abs(obj - expected) <= delta, 'expected #{this} to be close to ' + expected + ' +/- ' + delta, 'expected #{this} not to be close to ' + expected + ' +/- ' + delta);\n  }\n\n  Assertion.addMethod('closeTo', closeTo);\n  Assertion.addMethod('approximately', closeTo); // Note: Duplicates are ignored if testing for inclusion instead of sameness.\n\n  function isSubsetOf(subset, superset, cmp, contains, ordered) {\n    if (!contains) {\n      if (subset.length !== superset.length) return false;\n      superset = superset.slice();\n    }\n\n    return subset.every(function (elem, idx) {\n      if (ordered) return cmp ? cmp(elem, superset[idx]) : elem === superset[idx];\n\n      if (!cmp) {\n        var matchIdx = superset.indexOf(elem);\n        if (matchIdx === -1) return false; // Remove match from superset so not counted twice if duplicate in subset.\n\n        if (!contains) superset.splice(matchIdx, 1);\n        return true;\n      }\n\n      return superset.some(function (elem2, matchIdx) {\n        if (!cmp(elem, elem2)) return false; // Remove match from superset so not counted twice if duplicate in subset.\n\n        if (!contains) superset.splice(matchIdx, 1);\n        return true;\n      });\n    });\n  }\n  /**\n   * ### .members(set[, msg])\n   *\n   * Asserts that the target array has the same members as the given array\n   * `set`.\n   *\n   *     expect([1, 2, 3]).to.have.members([2, 1, 3]);\n   *     expect([1, 2, 2]).to.have.members([2, 1, 2]);\n   *\n   * By default, members are compared using strict (`===`) equality. Add `.deep`\n   * earlier in the chain to use deep equality instead. See the `deep-eql`\n   * project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target array deeply (but not strictly) has member `{a: 1}`\n   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n   *\n   * By default, order doesn't matter. Add `.ordered` earlier in the chain to\n   * require that members appear in the same order.\n   *\n   *     expect([1, 2, 3]).to.have.ordered.members([1, 2, 3]);\n   *     expect([1, 2, 3]).to.have.members([2, 1, 3])\n   *       .but.not.ordered.members([2, 1, 3]);\n   *\n   * By default, both arrays must be the same size. Add `.include` earlier in\n   * the chain to require that the target's members be a superset of the\n   * expected members. Note that duplicates are ignored in the subset when\n   * `.include` is added.\n   *\n   *     // Target array is a superset of [1, 2] but not identical\n   *     expect([1, 2, 3]).to.include.members([1, 2]);\n   *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n   *\n   *     // Duplicates in the subset are ignored\n   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n   *\n   * `.deep`, `.ordered`, and `.include` can all be combined. However, if\n   * `.include` and `.ordered` are combined, the ordering begins at the start of\n   * both arrays.\n   *\n   *     expect([{a: 1}, {b: 2}, {c: 3}])\n   *       .to.include.deep.ordered.members([{a: 1}, {b: 2}])\n   *       .but.not.include.deep.ordered.members([{b: 2}, {c: 3}]);\n   *\n   * Add `.not` earlier in the chain to negate `.members`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the target array doesn't have all of the same members as\n   * the given array `set` but may or may not have some of them. It's often best\n   * to identify the exact output that's expected, and then write an assertion\n   * that only accepts that exact output.\n   *\n   *     expect([1, 2]).to.not.include(3).and.not.include(4); // Recommended\n   *     expect([1, 2]).to.not.have.members([3, 4]); // Not recommended\n   *\n   * `.members` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2]).to.have.members([1, 2, 3], 'nooo why fail??');\n   *     expect([1, 2], 'nooo why fail??').to.have.members([1, 2, 3]);\n   *\n   * @name members\n   * @param {Array} set\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n\n  Assertion.addMethod('members', function (subset, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object'),\n        flagMsg = flag(this, 'message'),\n        ssfi = flag(this, 'ssfi');\n    new Assertion(obj, flagMsg, ssfi, true).to.be.an('array');\n    new Assertion(subset, flagMsg, ssfi, true).to.be.an('array');\n    var contains = flag(this, 'contains');\n    var ordered = flag(this, 'ordered');\n    var subject, failMsg, failNegateMsg;\n\n    if (contains) {\n      subject = ordered ? 'an ordered superset' : 'a superset';\n      failMsg = 'expected #{this} to be ' + subject + ' of #{exp}';\n      failNegateMsg = 'expected #{this} to not be ' + subject + ' of #{exp}';\n    } else {\n      subject = ordered ? 'ordered members' : 'members';\n      failMsg = 'expected #{this} to have the same ' + subject + ' as #{exp}';\n      failNegateMsg = 'expected #{this} to not have the same ' + subject + ' as #{exp}';\n    }\n\n    var cmp = flag(this, 'deep') ? _.eql : undefined;\n    this.assert(isSubsetOf(subset, obj, cmp, contains, ordered), failMsg, failNegateMsg, subset, obj, true);\n  });\n  /**\n   * ### .oneOf(list[, msg])\n   *\n   * Asserts that the target is a member of the given array `list`. However,\n   * it's often best to assert that the target is equal to its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.oneOf([1, 2, 3]); // Not recommended\n   *\n   * Comparisons are performed using strict (`===`) equality.\n   *\n   * Add `.not` earlier in the chain to negate `.oneOf`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.oneOf([2, 3, 4]); // Not recommended\n   *\n   * It can also be chained with `.contain` or `.include`, which will work with\n   * both arrays and strings:\n   *\n   *     expect('Today is sunny').to.contain.oneOf(['sunny', 'cloudy'])\n   *     expect('Today is rainy').to.not.contain.oneOf(['sunny', 'cloudy'])\n   *     expect([1,2,3]).to.contain.oneOf([3,4,5])\n   *     expect([1,2,3]).to.not.contain.oneOf([4,5,6])\n   *\n   * `.oneOf` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.oneOf([2, 3, 4], 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.oneOf([2, 3, 4]);\n   *\n   * @name oneOf\n   * @param {Array<*>} list\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function oneOf(list, msg) {\n    if (msg) flag(this, 'message', msg);\n    var expected = flag(this, 'object'),\n        flagMsg = flag(this, 'message'),\n        ssfi = flag(this, 'ssfi'),\n        contains = flag(this, 'contains'),\n        isDeep = flag(this, 'deep');\n    new Assertion(list, flagMsg, ssfi, true).to.be.an('array');\n\n    if (contains) {\n      this.assert(list.some(function (possibility) {\n        return expected.indexOf(possibility) > -1;\n      }), 'expected #{this} to contain one of #{exp}', 'expected #{this} to not contain one of #{exp}', list, expected);\n    } else {\n      if (isDeep) {\n        this.assert(list.some(function (possibility) {\n          return _.eql(expected, possibility);\n        }), 'expected #{this} to deeply equal one of #{exp}', 'expected #{this} to deeply equal one of #{exp}', list, expected);\n      } else {\n        this.assert(list.indexOf(expected) > -1, 'expected #{this} to be one of #{exp}', 'expected #{this} to not be one of #{exp}', list, expected);\n      }\n    }\n  }\n\n  Assertion.addMethod('oneOf', oneOf);\n  /**\n   * ### .change(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.change` asserts that the given function\n   * `subject` returns a different value when it's invoked before the target\n   * function compared to when it's invoked afterward. However, it's often best\n   * to assert that `subject` is equal to its expected value.\n   *\n   *     var dots = ''\n   *       , addDot = function () { dots += '.'; }\n   *       , getDots = function () { return dots; };\n   *\n   *     // Recommended\n   *     expect(getDots()).to.equal('');\n   *     addDot();\n   *     expect(getDots()).to.equal('.');\n   *\n   *     // Not recommended\n   *     expect(addDot).to.change(getDots);\n   *\n   * When two arguments are provided, `.change` asserts that the value of the\n   * given object `subject`'s `prop` property is different before invoking the\n   * target function compared to afterward.\n   *\n   *     var myObj = {dots: ''}\n   *       , addDot = function () { myObj.dots += '.'; };\n   *\n   *     // Recommended\n   *     expect(myObj).to.have.property('dots', '');\n   *     addDot();\n   *     expect(myObj).to.have.property('dots', '.');\n   *\n   *     // Not recommended\n   *     expect(addDot).to.change(myObj, 'dots');\n   *\n   * Strict (`===`) equality is used to compare before and after values.\n   *\n   * Add `.not` earlier in the chain to negate `.change`.\n   *\n   *     var dots = ''\n   *       , noop = function () {}\n   *       , getDots = function () { return dots; };\n   *\n   *     expect(noop).to.not.change(getDots);\n   *\n   *     var myObj = {dots: ''}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'dots');\n   *\n   * `.change` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {dots: ''}\n   *       , addDot = function () { myObj.dots += '.'; };\n   *\n   *     expect(addDot).to.not.change(myObj, 'dots', 'nooo why fail??');\n   *\n   *     var dots = ''\n   *       , addDot = function () { dots += '.'; }\n   *       , getDots = function () { return dots; };\n   *\n   *     expect(addDot, 'nooo why fail??').to.not.change(getDots);\n   *\n   * `.change` also causes all `.by` assertions that follow in the chain to\n   * assert how much a numeric subject was increased or decreased by. However,\n   * it's dangerous to use `.change.by`. The problem is that it creates\n   * uncertain expectations by asserting that the subject either increases by\n   * the given delta, or that it decreases by the given delta. It's often best\n   * to identify the exact output that's expected, and then write an assertion\n   * that only accepts that exact output.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; }\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   * The alias `.changes` can be used interchangeably with `.change`.\n   *\n   * @name change\n   * @alias changes\n   * @param {String} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertChanges(subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object'),\n        flagMsg = flag(this, 'message'),\n        ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n    var initial;\n\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    fn();\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop; // This gets flagged because of the .by(delta) assertion\n\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'change');\n    flag(this, 'realDelta', final !== initial);\n    this.assert(initial !== final, 'expected ' + msgObj + ' to change', 'expected ' + msgObj + ' to not change');\n  }\n\n  Assertion.addMethod('change', assertChanges);\n  Assertion.addMethod('changes', assertChanges);\n  /**\n   * ### .increase(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.increase` asserts that the given function\n   * `subject` returns a greater number when it's invoked after invoking the\n   * target function compared to when it's invoked beforehand. `.increase` also\n   * causes all `.by` assertions that follow in the chain to assert how much\n   * greater of a number is returned. It's often best to assert that the return\n   * value increased by the expected amount, rather than asserting it increased\n   * by any amount.\n   *\n   *     var val = 1\n   *       , addTwo = function () { val += 2; }\n   *       , getVal = function () { return val; };\n   *\n   *     expect(addTwo).to.increase(getVal).by(2); // Recommended\n   *     expect(addTwo).to.increase(getVal); // Not recommended\n   *\n   * When two arguments are provided, `.increase` asserts that the value of the\n   * given object `subject`'s `prop` property is greater after invoking the\n   * target function compared to beforehand.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.increase(myObj, 'val'); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.increase`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either decreases, or that it stays the same.\n   * It's often best to identify the exact output that's expected, and then\n   * write an assertion that only accepts that exact output.\n   *\n   * When the subject is expected to decrease, it's often best to assert that it\n   * decreased by the expected amount.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.not.increase(myObj, 'val'); // Not recommended\n   *\n   * When the subject is expected to stay the same, it's often best to assert\n   * exactly that.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n   *     expect(noop).to.not.increase(myObj, 'val'); // Not recommended\n   *\n   * `.increase` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.increase(myObj, 'val', 'nooo why fail??');\n   *\n   *     var val = 1\n   *       , noop = function () {}\n   *       , getVal = function () { return val; };\n   *\n   *     expect(noop, 'nooo why fail??').to.increase(getVal);\n   *\n   * The alias `.increases` can be used interchangeably with `.increase`.\n   *\n   * @name increase\n   * @alias increases\n   * @param {String|Function} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertIncreases(subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object'),\n        flagMsg = flag(this, 'message'),\n        ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n    var initial;\n\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    } // Make sure that the target is a number\n\n\n    new Assertion(initial, flagMsg, ssfi, true).is.a('number');\n    fn();\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'increase');\n    flag(this, 'realDelta', final - initial);\n    this.assert(final - initial > 0, 'expected ' + msgObj + ' to increase', 'expected ' + msgObj + ' to not increase');\n  }\n\n  Assertion.addMethod('increase', assertIncreases);\n  Assertion.addMethod('increases', assertIncreases);\n  /**\n   * ### .decrease(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.decrease` asserts that the given function\n   * `subject` returns a lesser number when it's invoked after invoking the\n   * target function compared to when it's invoked beforehand. `.decrease` also\n   * causes all `.by` assertions that follow in the chain to assert how much\n   * lesser of a number is returned. It's often best to assert that the return\n   * value decreased by the expected amount, rather than asserting it decreased\n   * by any amount.\n   *\n   *     var val = 1\n   *       , subtractTwo = function () { val -= 2; }\n   *       , getVal = function () { return val; };\n   *\n   *     expect(subtractTwo).to.decrease(getVal).by(2); // Recommended\n   *     expect(subtractTwo).to.decrease(getVal); // Not recommended\n   *\n   * When two arguments are provided, `.decrease` asserts that the value of the\n   * given object `subject`'s `prop` property is lesser after invoking the\n   * target function compared to beforehand.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.decrease(myObj, 'val'); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.decrease`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either increases, or that it stays the same.\n   * It's often best to identify the exact output that's expected, and then\n   * write an assertion that only accepts that exact output.\n   *\n   * When the subject is expected to increase, it's often best to assert that it\n   * increased by the expected amount.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.not.decrease(myObj, 'val'); // Not recommended\n   *\n   * When the subject is expected to stay the same, it's often best to assert\n   * exactly that.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n   *     expect(noop).to.not.decrease(myObj, 'val'); // Not recommended\n   *\n   * `.decrease` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.decrease(myObj, 'val', 'nooo why fail??');\n   *\n   *     var val = 1\n   *       , noop = function () {}\n   *       , getVal = function () { return val; };\n   *\n   *     expect(noop, 'nooo why fail??').to.decrease(getVal);\n   *\n   * The alias `.decreases` can be used interchangeably with `.decrease`.\n   *\n   * @name decrease\n   * @alias decreases\n   * @param {String|Function} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDecreases(subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object'),\n        flagMsg = flag(this, 'message'),\n        ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n    var initial;\n\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    } // Make sure that the target is a number\n\n\n    new Assertion(initial, flagMsg, ssfi, true).is.a('number');\n    fn();\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'decrease');\n    flag(this, 'realDelta', initial - final);\n    this.assert(final - initial < 0, 'expected ' + msgObj + ' to decrease', 'expected ' + msgObj + ' to not decrease');\n  }\n\n  Assertion.addMethod('decrease', assertDecreases);\n  Assertion.addMethod('decreases', assertDecreases);\n  /**\n   * ### .by(delta[, msg])\n   *\n   * When following an `.increase` assertion in the chain, `.by` asserts that\n   * the subject of the `.increase` assertion increased by the given `delta`.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2);\n   *\n   * When following a `.decrease` assertion in the chain, `.by` asserts that the\n   * subject of the `.decrease` assertion decreased by the given `delta`.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2);\n   *\n   * When following a `.change` assertion in the chain, `.by` asserts that the\n   * subject of the `.change` assertion either increased or decreased by the\n   * given `delta`. However, it's dangerous to use `.change.by`. The problem is\n   * that it creates uncertain expectations. It's often best to identify the\n   * exact output that's expected, and then write an assertion that only accepts\n   * that exact output.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; }\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.by`. However, it's often best\n   * to assert that the subject changed by its expected delta, rather than\n   * asserting that it didn't change by one of countless unexpected deltas.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     // Recommended\n   *     expect(addTwo).to.increase(myObj, 'val').by(2);\n   *\n   *     // Not recommended\n   *     expect(addTwo).to.increase(myObj, 'val').but.not.by(3);\n   *\n   * `.by` accepts an optional `msg` argument which is a custom error message to\n   * show when the assertion fails. The message can also be given as the second\n   * argument to `expect`.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(3, 'nooo why fail??');\n   *     expect(addTwo, 'nooo why fail??').to.increase(myObj, 'val').by(3);\n   *\n   * @name by\n   * @param {Number} delta\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDelta(delta, msg) {\n    if (msg) flag(this, 'message', msg);\n    var msgObj = flag(this, 'deltaMsgObj');\n    var initial = flag(this, 'initialDeltaValue');\n    var final = flag(this, 'finalDeltaValue');\n    var behavior = flag(this, 'deltaBehavior');\n    var realDelta = flag(this, 'realDelta');\n    var expression;\n\n    if (behavior === 'change') {\n      expression = Math.abs(final - initial) === Math.abs(delta);\n    } else {\n      expression = realDelta === Math.abs(delta);\n    }\n\n    this.assert(expression, 'expected ' + msgObj + ' to ' + behavior + ' by ' + delta, 'expected ' + msgObj + ' to not ' + behavior + ' by ' + delta);\n  }\n\n  Assertion.addMethod('by', assertDelta);\n  /**\n   * ### .extensible\n   *\n   * Asserts that the target is extensible, which means that new properties can\n   * be added to it. Primitives are never extensible.\n   *\n   *     expect({a: 1}).to.be.extensible;\n   *\n   * Add `.not` earlier in the chain to negate `.extensible`.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({})\n   *       , sealedObject = Object.seal({})\n   *       , frozenObject = Object.freeze({});\n   *\n   *     expect(nonExtensibleObject).to.not.be.extensible;\n   *     expect(sealedObject).to.not.be.extensible;\n   *     expect(frozenObject).to.not.be.extensible;\n   *     expect(1).to.not.be.extensible;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(1, 'nooo why fail??').to.be.extensible;\n   *\n   * @name extensible\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('extensible', function () {\n    var obj = flag(this, 'object'); // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isExtensible = obj === Object(obj) && Object.isExtensible(obj);\n    this.assert(isExtensible, 'expected #{this} to be extensible', 'expected #{this} to not be extensible');\n  });\n  /**\n   * ### .sealed\n   *\n   * Asserts that the target is sealed, which means that new properties can't be\n   * added to it, and its existing properties can't be reconfigured or deleted.\n   * However, it's possible that its existing properties can still be reassigned\n   * to different values. Primitives are always sealed.\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(sealedObject).to.be.sealed;\n   *     expect(frozenObject).to.be.sealed;\n   *     expect(1).to.be.sealed;\n   *\n   * Add `.not` earlier in the chain to negate `.sealed`.\n   *\n   *     expect({a: 1}).to.not.be.sealed;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.be.sealed;\n   *\n   * @name sealed\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('sealed', function () {\n    var obj = flag(this, 'object'); // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isSealed = obj === Object(obj) ? Object.isSealed(obj) : true;\n    this.assert(isSealed, 'expected #{this} to be sealed', 'expected #{this} to not be sealed');\n  });\n  /**\n   * ### .frozen\n   *\n   * Asserts that the target is frozen, which means that new properties can't be\n   * added to it, and its existing properties can't be reassigned to different\n   * values, reconfigured, or deleted. Primitives are always frozen.\n   *\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(frozenObject).to.be.frozen;\n   *     expect(1).to.be.frozen;\n   *\n   * Add `.not` earlier in the chain to negate `.frozen`.\n   *\n   *     expect({a: 1}).to.not.be.frozen;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.be.frozen;\n   *\n   * @name frozen\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('frozen', function () {\n    var obj = flag(this, 'object'); // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isFrozen = obj === Object(obj) ? Object.isFrozen(obj) : true;\n    this.assert(isFrozen, 'expected #{this} to be frozen', 'expected #{this} to not be frozen');\n  });\n  /**\n   * ### .finite\n   *\n   * Asserts that the target is a number, and isn't `NaN` or positive/negative\n   * `Infinity`.\n   *\n   *     expect(1).to.be.finite;\n   *\n   * Add `.not` earlier in the chain to negate `.finite`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either isn't a number, or that it's `NaN`, or\n   * that it's positive `Infinity`, or that it's negative `Infinity`. It's often\n   * best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to be a number, it's often best to assert\n   * that it's the expected type, rather than asserting that it isn't one of\n   * many unexpected types.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be `NaN`, it's often best to assert exactly\n   * that.\n   *\n   *     expect(NaN).to.be.NaN; // Recommended\n   *     expect(NaN).to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be positive infinity, it's often best to\n   * assert exactly that.\n   *\n   *     expect(Infinity).to.equal(Infinity); // Recommended\n   *     expect(Infinity).to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be negative infinity, it's often best to\n   * assert exactly that.\n   *\n   *     expect(-Infinity).to.equal(-Infinity); // Recommended\n   *     expect(-Infinity).to.not.be.finite; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect('foo', 'nooo why fail??').to.be.finite;\n   *\n   * @name finite\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('finite', function (msg) {\n    var obj = flag(this, 'object');\n    this.assert(typeof obj === 'number' && isFinite(obj), 'expected #{this} to be a finite number', 'expected #{this} to not be a finite number');\n  });\n};","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nmodule.exports = function (chai, util) {\n  /*!\n   * Chai dependencies.\n   */\n  var Assertion = chai.Assertion,\n      flag = util.flag;\n  /*!\n   * Module export.\n   */\n\n  /**\n   * ### assert(expression, message)\n   *\n   * Write your own test expressions.\n   *\n   *     assert('foo' !== 'bar', 'foo is not bar');\n   *     assert(Array.isArray([]), 'empty arrays are arrays');\n   *\n   * @param {Mixed} expression to test for truthiness\n   * @param {String} message to display on error\n   * @name assert\n   * @namespace Assert\n   * @api public\n   */\n\n  var assert = chai.assert = function (express, errmsg) {\n    var test = new Assertion(null, null, chai.assert, true);\n    test.assert(express, errmsg, '[ negation message unavailable ]');\n  };\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure. Node.js `assert` module-compatible.\n   *\n   *     assert.fail();\n   *     assert.fail(\"custom error message\");\n   *     assert.fail(1, 2);\n   *     assert.fail(1, 2, \"custom error message\");\n   *     assert.fail(1, 2, \"custom error message\", \">\");\n   *     assert.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n      // Comply with Node's fail([message]) interface\n      message = actual;\n      actual = undefined;\n    }\n\n    message = message || 'assert.fail()';\n    throw new chai.AssertionError(message, {\n      actual: actual,\n      expected: expected,\n      operator: operator\n    }, assert.fail);\n  };\n  /**\n   * ### .isOk(object, [message])\n   *\n   * Asserts that `object` is truthy.\n   *\n   *     assert.isOk('everything', 'everything is ok');\n   *     assert.isOk(false, 'this will fail');\n   *\n   * @name isOk\n   * @alias ok\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.isOk = function (val, msg) {\n    new Assertion(val, msg, assert.isOk, true).is.ok;\n  };\n  /**\n   * ### .isNotOk(object, [message])\n   *\n   * Asserts that `object` is falsy.\n   *\n   *     assert.isNotOk('everything', 'this will fail');\n   *     assert.isNotOk(false, 'this will pass');\n   *\n   * @name isNotOk\n   * @alias notOk\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.isNotOk = function (val, msg) {\n    new Assertion(val, msg, assert.isNotOk, true).is.not.ok;\n  };\n  /**\n   * ### .equal(actual, expected, [message])\n   *\n   * Asserts non-strict equality (`==`) of `actual` and `expected`.\n   *\n   *     assert.equal(3, '3', '== coerces values to strings');\n   *\n   * @name equal\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.equal = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.equal, true);\n    test.assert(exp == flag(test, 'object'), 'expected #{this} to equal #{exp}', 'expected #{this} to not equal #{act}', exp, act, true);\n  };\n  /**\n   * ### .notEqual(actual, expected, [message])\n   *\n   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n   *\n   *     assert.notEqual(3, 4, 'these numbers are not equal');\n   *\n   * @name notEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.notEqual = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.notEqual, true);\n    test.assert(exp != flag(test, 'object'), 'expected #{this} to not equal #{exp}', 'expected #{this} to equal #{act}', exp, act, true);\n  };\n  /**\n   * ### .strictEqual(actual, expected, [message])\n   *\n   * Asserts strict equality (`===`) of `actual` and `expected`.\n   *\n   *     assert.strictEqual(true, true, 'these booleans are strictly equal');\n   *\n   * @name strictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.strictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.strictEqual, true).to.equal(exp);\n  };\n  /**\n   * ### .notStrictEqual(actual, expected, [message])\n   *\n   * Asserts strict inequality (`!==`) of `actual` and `expected`.\n   *\n   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');\n   *\n   * @name notStrictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.notStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.notStrictEqual, true).to.not.equal(exp);\n  };\n  /**\n   * ### .deepEqual(actual, expected, [message])\n   *\n   * Asserts that `actual` is deeply equal to `expected`.\n   *\n   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });\n   *\n   * @name deepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @alias deepStrictEqual\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.deepEqual = assert.deepStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.deepEqual, true).to.eql(exp);\n  };\n  /**\n   * ### .notDeepEqual(actual, expected, [message])\n   *\n   * Assert that `actual` is not deeply equal to `expected`.\n   *\n   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });\n   *\n   * @name notDeepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.notDeepEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.notDeepEqual, true).to.not.eql(exp);\n  };\n  /**\n  * ### .isAbove(valueToCheck, valueToBeAbove, [message])\n  *\n  * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`.\n  *\n  *     assert.isAbove(5, 2, '5 is strictly greater than 2');\n  *\n  * @name isAbove\n  * @param {Mixed} valueToCheck\n  * @param {Mixed} valueToBeAbove\n  * @param {String} message\n  * @namespace Assert\n  * @api public\n  */\n\n\n  assert.isAbove = function (val, abv, msg) {\n    new Assertion(val, msg, assert.isAbove, true).to.be.above(abv);\n  };\n  /**\n  * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])\n  *\n  * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`.\n  *\n  *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');\n  *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');\n  *\n  * @name isAtLeast\n  * @param {Mixed} valueToCheck\n  * @param {Mixed} valueToBeAtLeast\n  * @param {String} message\n  * @namespace Assert\n  * @api public\n  */\n\n\n  assert.isAtLeast = function (val, atlst, msg) {\n    new Assertion(val, msg, assert.isAtLeast, true).to.be.least(atlst);\n  };\n  /**\n  * ### .isBelow(valueToCheck, valueToBeBelow, [message])\n  *\n  * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`.\n  *\n  *     assert.isBelow(3, 6, '3 is strictly less than 6');\n  *\n  * @name isBelow\n  * @param {Mixed} valueToCheck\n  * @param {Mixed} valueToBeBelow\n  * @param {String} message\n  * @namespace Assert\n  * @api public\n  */\n\n\n  assert.isBelow = function (val, blw, msg) {\n    new Assertion(val, msg, assert.isBelow, true).to.be.below(blw);\n  };\n  /**\n  * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])\n  *\n  * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`.\n  *\n  *     assert.isAtMost(3, 6, '3 is less than or equal to 6');\n  *     assert.isAtMost(4, 4, '4 is less than or equal to 4');\n  *\n  * @name isAtMost\n  * @param {Mixed} valueToCheck\n  * @param {Mixed} valueToBeAtMost\n  * @param {String} message\n  * @namespace Assert\n  * @api public\n  */\n\n\n  assert.isAtMost = function (val, atmst, msg) {\n    new Assertion(val, msg, assert.isAtMost, true).to.be.most(atmst);\n  };\n  /**\n   * ### .isTrue(value, [message])\n   *\n   * Asserts that `value` is true.\n   *\n   *     var teaServed = true;\n   *     assert.isTrue(teaServed, 'the tea has been served');\n   *\n   * @name isTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.isTrue = function (val, msg) {\n    new Assertion(val, msg, assert.isTrue, true).is['true'];\n  };\n  /**\n   * ### .isNotTrue(value, [message])\n   *\n   * Asserts that `value` is not true.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotTrue(tea, 'great, time for tea!');\n   *\n   * @name isNotTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.isNotTrue = function (val, msg) {\n    new Assertion(val, msg, assert.isNotTrue, true).to.not.equal(true);\n  };\n  /**\n   * ### .isFalse(value, [message])\n   *\n   * Asserts that `value` is false.\n   *\n   *     var teaServed = false;\n   *     assert.isFalse(teaServed, 'no tea yet? hmm...');\n   *\n   * @name isFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.isFalse = function (val, msg) {\n    new Assertion(val, msg, assert.isFalse, true).is['false'];\n  };\n  /**\n   * ### .isNotFalse(value, [message])\n   *\n   * Asserts that `value` is not false.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotFalse(tea, 'great, time for tea!');\n   *\n   * @name isNotFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.isNotFalse = function (val, msg) {\n    new Assertion(val, msg, assert.isNotFalse, true).to.not.equal(false);\n  };\n  /**\n   * ### .isNull(value, [message])\n   *\n   * Asserts that `value` is null.\n   *\n   *     assert.isNull(err, 'there was no error');\n   *\n   * @name isNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.isNull = function (val, msg) {\n    new Assertion(val, msg, assert.isNull, true).to.equal(null);\n  };\n  /**\n   * ### .isNotNull(value, [message])\n   *\n   * Asserts that `value` is not null.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotNull(tea, 'great, time for tea!');\n   *\n   * @name isNotNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.isNotNull = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNull, true).to.not.equal(null);\n  };\n  /**\n   * ### .isNaN\n   *\n   * Asserts that value is NaN.\n   *\n   *     assert.isNaN(NaN, 'NaN is NaN');\n   *\n   * @name isNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.isNaN = function (val, msg) {\n    new Assertion(val, msg, assert.isNaN, true).to.be.NaN;\n  };\n  /**\n   * ### .isNotNaN\n   *\n   * Asserts that value is not NaN.\n   *\n   *     assert.isNotNaN(4, '4 is not NaN');\n   *\n   * @name isNotNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.isNotNaN = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNaN, true).not.to.be.NaN;\n  };\n  /**\n   * ### .exists\n   *\n   * Asserts that the target is neither `null` nor `undefined`.\n   *\n   *     var foo = 'hi';\n   *\n   *     assert.exists(foo, 'foo is neither `null` nor `undefined`');\n   *\n   * @name exists\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.exists = function (val, msg) {\n    new Assertion(val, msg, assert.exists, true).to.exist;\n  };\n  /**\n   * ### .notExists\n   *\n   * Asserts that the target is either `null` or `undefined`.\n   *\n   *     var bar = null\n   *       , baz;\n   *\n   *     assert.notExists(bar);\n   *     assert.notExists(baz, 'baz is either null or undefined');\n   *\n   * @name notExists\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.notExists = function (val, msg) {\n    new Assertion(val, msg, assert.notExists, true).to.not.exist;\n  };\n  /**\n   * ### .isUndefined(value, [message])\n   *\n   * Asserts that `value` is `undefined`.\n   *\n   *     var tea;\n   *     assert.isUndefined(tea, 'no tea defined');\n   *\n   * @name isUndefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.isUndefined = function (val, msg) {\n    new Assertion(val, msg, assert.isUndefined, true).to.equal(undefined);\n  };\n  /**\n   * ### .isDefined(value, [message])\n   *\n   * Asserts that `value` is not `undefined`.\n   *\n   *     var tea = 'cup of chai';\n   *     assert.isDefined(tea, 'tea has been defined');\n   *\n   * @name isDefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.isDefined = function (val, msg) {\n    new Assertion(val, msg, assert.isDefined, true).to.not.equal(undefined);\n  };\n  /**\n   * ### .isFunction(value, [message])\n   *\n   * Asserts that `value` is a function.\n   *\n   *     function serveTea() { return 'cup of tea'; };\n   *     assert.isFunction(serveTea, 'great, we can have tea now');\n   *\n   * @name isFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.isFunction = function (val, msg) {\n    new Assertion(val, msg, assert.isFunction, true).to.be.a('function');\n  };\n  /**\n   * ### .isNotFunction(value, [message])\n   *\n   * Asserts that `value` is _not_ a function.\n   *\n   *     var serveTea = [ 'heat', 'pour', 'sip' ];\n   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');\n   *\n   * @name isNotFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.isNotFunction = function (val, msg) {\n    new Assertion(val, msg, assert.isNotFunction, true).to.not.be.a('function');\n  };\n  /**\n   * ### .isObject(value, [message])\n   *\n   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   * _The assertion does not match subclassed objects._\n   *\n   *     var selection = { name: 'Chai', serve: 'with spices' };\n   *     assert.isObject(selection, 'tea selection is an object');\n   *\n   * @name isObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.isObject = function (val, msg) {\n    new Assertion(val, msg, assert.isObject, true).to.be.a('object');\n  };\n  /**\n   * ### .isNotObject(value, [message])\n   *\n   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   *\n   *     var selection = 'chai'\n   *     assert.isNotObject(selection, 'tea selection is not an object');\n   *     assert.isNotObject(null, 'null is not an object');\n   *\n   * @name isNotObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.isNotObject = function (val, msg) {\n    new Assertion(val, msg, assert.isNotObject, true).to.not.be.a('object');\n  };\n  /**\n   * ### .isArray(value, [message])\n   *\n   * Asserts that `value` is an array.\n   *\n   *     var menu = [ 'green', 'chai', 'oolong' ];\n   *     assert.isArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.isArray = function (val, msg) {\n    new Assertion(val, msg, assert.isArray, true).to.be.an('array');\n  };\n  /**\n   * ### .isNotArray(value, [message])\n   *\n   * Asserts that `value` is _not_ an array.\n   *\n   *     var menu = 'green|chai|oolong';\n   *     assert.isNotArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isNotArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.isNotArray = function (val, msg) {\n    new Assertion(val, msg, assert.isNotArray, true).to.not.be.an('array');\n  };\n  /**\n   * ### .isString(value, [message])\n   *\n   * Asserts that `value` is a string.\n   *\n   *     var teaOrder = 'chai';\n   *     assert.isString(teaOrder, 'order placed');\n   *\n   * @name isString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.isString = function (val, msg) {\n    new Assertion(val, msg, assert.isString, true).to.be.a('string');\n  };\n  /**\n   * ### .isNotString(value, [message])\n   *\n   * Asserts that `value` is _not_ a string.\n   *\n   *     var teaOrder = 4;\n   *     assert.isNotString(teaOrder, 'order placed');\n   *\n   * @name isNotString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.isNotString = function (val, msg) {\n    new Assertion(val, msg, assert.isNotString, true).to.not.be.a('string');\n  };\n  /**\n   * ### .isNumber(value, [message])\n   *\n   * Asserts that `value` is a number.\n   *\n   *     var cups = 2;\n   *     assert.isNumber(cups, 'how many cups');\n   *\n   * @name isNumber\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.isNumber = function (val, msg) {\n    new Assertion(val, msg, assert.isNumber, true).to.be.a('number');\n  };\n  /**\n   * ### .isNotNumber(value, [message])\n   *\n   * Asserts that `value` is _not_ a number.\n   *\n   *     var cups = '2 cups please';\n   *     assert.isNotNumber(cups, 'how many cups');\n   *\n   * @name isNotNumber\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.isNotNumber = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNumber, true).to.not.be.a('number');\n  };\n  /**\n  * ### .isFinite(value, [message])\n  *\n  * Asserts that `value` is a finite number. Unlike `.isNumber`, this will fail for `NaN` and `Infinity`.\n  *\n  *     var cups = 2;\n  *     assert.isFinite(cups, 'how many cups');\n  *\n  *     assert.isFinite(NaN); // throws\n  *\n  * @name isFinite\n  * @param {Number} value\n  * @param {String} message\n  * @namespace Assert\n  * @api public\n  */\n\n\n  assert.isFinite = function (val, msg) {\n    new Assertion(val, msg, assert.isFinite, true).to.be.finite;\n  };\n  /**\n   * ### .isBoolean(value, [message])\n   *\n   * Asserts that `value` is a boolean.\n   *\n   *     var teaReady = true\n   *       , teaServed = false;\n   *\n   *     assert.isBoolean(teaReady, 'is the tea ready');\n   *     assert.isBoolean(teaServed, 'has tea been served');\n   *\n   * @name isBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.isBoolean = function (val, msg) {\n    new Assertion(val, msg, assert.isBoolean, true).to.be.a('boolean');\n  };\n  /**\n   * ### .isNotBoolean(value, [message])\n   *\n   * Asserts that `value` is _not_ a boolean.\n   *\n   *     var teaReady = 'yep'\n   *       , teaServed = 'nope';\n   *\n   *     assert.isNotBoolean(teaReady, 'is the tea ready');\n   *     assert.isNotBoolean(teaServed, 'has tea been served');\n   *\n   * @name isNotBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.isNotBoolean = function (val, msg) {\n    new Assertion(val, msg, assert.isNotBoolean, true).to.not.be.a('boolean');\n  };\n  /**\n   * ### .typeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n   *     assert.typeOf('tea', 'string', 'we have a string');\n   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n   *     assert.typeOf(null, 'null', 'we have a null');\n   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');\n   *\n   * @name typeOf\n   * @param {Mixed} value\n   * @param {String} name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.typeOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.typeOf, true).to.be.a(type);\n  };\n  /**\n   * ### .notTypeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is _not_ `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');\n   *\n   * @name notTypeOf\n   * @param {Mixed} value\n   * @param {String} typeof name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.notTypeOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.notTypeOf, true).to.not.be.a(type);\n  };\n  /**\n   * ### .instanceOf(object, constructor, [message])\n   *\n   * Asserts that `value` is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new Tea('chai');\n   *\n   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');\n   *\n   * @name instanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.instanceOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.instanceOf, true).to.be.instanceOf(type);\n  };\n  /**\n   * ### .notInstanceOf(object, constructor, [message])\n   *\n   * Asserts `value` is not an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new String('chai');\n   *\n   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');\n   *\n   * @name notInstanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.notInstanceOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.notInstanceOf, true).to.not.be.instanceOf(type);\n  };\n  /**\n   * ### .include(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Can be used to assert the\n   * inclusion of a value in an array, a substring in a string, or a subset of\n   * properties in an object.\n   *\n   *     assert.include([1,2,3], 2, 'array contains value');\n   *     assert.include('foobar', 'foo', 'string contains substring');\n   *     assert.include({ foo: 'bar', hello: 'universe' }, { foo: 'bar' }, 'object contains property');\n   *\n   * Strict equality (===) is used. When asserting the inclusion of a value in\n   * an array, the array is searched for an element that's strictly equal to the\n   * given value. When asserting a subset of properties in an object, the object\n   * is searched for the given property keys, checking that each one is present\n   * and strictly equal to the given property value. For instance:\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.include([obj1, obj2], obj1);\n   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1});\n   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1, bar: obj2});\n   *\n   * @name include\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.include = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.include, true).include(inc);\n  };\n  /**\n   * ### .notInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Can be used to assert\n   * the absence of a value in an array, a substring in a string, or a subset of\n   * properties in an object.\n   *\n   *     assert.notInclude([1,2,3], 4, \"array doesn't contain value\");\n   *     assert.notInclude('foobar', 'baz', \"string doesn't contain substring\");\n   *     assert.notInclude({ foo: 'bar', hello: 'universe' }, { foo: 'baz' }, 'object doesn't contain property');\n   *\n   * Strict equality (===) is used. When asserting the absence of a value in an\n   * array, the array is searched to confirm the absence of an element that's\n   * strictly equal to the given value. When asserting a subset of properties in\n   * an object, the object is searched to confirm that at least one of the given\n   * property keys is either not present or not strictly equal to the given\n   * property value. For instance:\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.notInclude([obj1, obj2], {a: 1});\n   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: obj1, bar: {b: 2}});\n   *\n   * @name notInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.notInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notInclude, true).not.include(inc);\n  };\n  /**\n   * ### .deepInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Can be used to assert the\n   * inclusion of a value in an array or a subset of properties in an object.\n   * Deep equality is used.\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.deepInclude([obj1, obj2], {a: 1});\n   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 2}});\n   *\n   * @name deepInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.deepInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepInclude, true).deep.include(inc);\n  };\n  /**\n   * ### .notDeepInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Can be used to assert\n   * the absence of a value in an array or a subset of properties in an object.\n   * Deep equality is used.\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.notDeepInclude([obj1, obj2], {a: 9});\n   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 9}});\n   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 9}});\n   *\n   * @name notDeepInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.notDeepInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepInclude, true).not.deep.include(inc);\n  };\n  /**\n   * ### .nestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.nestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.[b]': 'x'});\n   *     assert.nestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'x'});\n   *\n   * @name nestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.nestedInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.nestedInclude, true).nested.include(inc);\n  };\n  /**\n   * ### .notNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' does not include 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.notNestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.b': 'y'});\n   *     assert.notNestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'y'});\n   *\n   * @name notNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.notNestedInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notNestedInclude, true).not.nested.include(inc);\n  };\n  /**\n   * ### .deepNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while checking for deep equality.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.deepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {x: 1}});\n   *     assert.deepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {x: 1}});\n   *\n   * @name deepNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.deepNestedInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepNestedInclude, true).deep.nested.include(inc);\n  };\n  /**\n   * ### .notDeepNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' does not include 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while checking for deep equality.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.notDeepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {y: 1}})\n   *     assert.notDeepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {y: 2}});\n   *\n   * @name notDeepNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.notDeepNestedInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepNestedInclude, true).not.deep.nested.include(inc);\n  };\n  /**\n   * ### .ownInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while ignoring inherited properties.\n   *\n   *     assert.ownInclude({ a: 1 }, { a: 1 });\n   *\n   * @name ownInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.ownInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.ownInclude, true).own.include(inc);\n  };\n  /**\n   * ### .notOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while ignoring inherited properties.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     assert.notOwnInclude({ a: 1 }, { b: 2 });\n   *\n   * @name notOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.notOwnInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notOwnInclude, true).not.own.include(inc);\n  };\n  /**\n   * ### .deepOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while ignoring inherited properties and checking for deep equality.\n   *\n   *      assert.deepOwnInclude({a: {b: 2}}, {a: {b: 2}});\n   *\n   * @name deepOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.deepOwnInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepOwnInclude, true).deep.own.include(inc);\n  };\n  /**\n  * ### .notDeepOwnInclude(haystack, needle, [message])\n  *\n  * Asserts that 'haystack' includes 'needle'.\n  * Can be used to assert the absence of a subset of properties in an\n  * object while ignoring inherited properties and checking for deep equality.\n  *\n  *      assert.notDeepOwnInclude({a: {b: 2}}, {a: {c: 3}});\n  *\n  * @name notDeepOwnInclude\n  * @param {Object} haystack\n  * @param {Object} needle\n  * @param {String} message\n  * @namespace Assert\n  * @api public\n  */\n\n\n  assert.notDeepOwnInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepOwnInclude, true).not.deep.own.include(inc);\n  };\n  /**\n   * ### .match(value, regexp, [message])\n   *\n   * Asserts that `value` matches the regular expression `regexp`.\n   *\n   *     assert.match('foobar', /^foo/, 'regexp matches');\n   *\n   * @name match\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.match = function (exp, re, msg) {\n    new Assertion(exp, msg, assert.match, true).to.match(re);\n  };\n  /**\n   * ### .notMatch(value, regexp, [message])\n   *\n   * Asserts that `value` does not match the regular expression `regexp`.\n   *\n   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');\n   *\n   * @name notMatch\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.notMatch = function (exp, re, msg) {\n    new Assertion(exp, msg, assert.notMatch, true).to.not.match(re);\n  };\n  /**\n   * ### .property(object, property, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property`.\n   *\n   *     assert.property({ tea: { green: 'matcha' }}, 'tea');\n   *     assert.property({ tea: { green: 'matcha' }}, 'toString');\n   *\n   * @name property\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.property = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.property, true).to.have.property(prop);\n  };\n  /**\n   * ### .notProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property`.\n   *\n   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *\n   * @name notProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.notProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notProperty, true).to.not.have.property(prop);\n  };\n  /**\n   * ### .propertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property` with a value given by `value`. Uses a strict equality check\n   * (===).\n   *\n   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');\n   *\n   * @name propertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.propertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.propertyVal, true).to.have.property(prop, val);\n  };\n  /**\n   * ### .notPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property` with value given by `value`. Uses a strict equality check\n   * (===).\n   *\n   *     assert.notPropertyVal({ tea: 'is good' }, 'tea', 'is bad');\n   *     assert.notPropertyVal({ tea: 'is good' }, 'coffee', 'is good');\n   *\n   * @name notPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.notPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notPropertyVal, true).to.not.have.property(prop, val);\n  };\n  /**\n   * ### .deepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property` with a value given by `value`. Uses a deep equality check.\n   *\n   *     assert.deepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n   *\n   * @name deepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.deepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.deepPropertyVal, true).to.have.deep.property(prop, val);\n  };\n  /**\n   * ### .notDeepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property` with value given by `value`. Uses a deep equality check.\n   *\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n   *\n   * @name notDeepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.notDeepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notDeepPropertyVal, true).to.not.have.deep.property(prop, val);\n  };\n  /**\n   * ### .ownProperty(object, property, [message])\n   *\n   * Asserts that `object` has a direct property named by `property`. Inherited\n   * properties aren't checked.\n   *\n   *     assert.ownProperty({ tea: { green: 'matcha' }}, 'tea');\n   *\n   * @name ownProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n\n  assert.ownProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.ownProperty, true).to.have.own.property(prop);\n  };\n  /**\n   * ### .notOwnProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by\n   * `property`. Inherited properties aren't checked.\n   *\n   *     assert.notOwnProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *     assert.notOwnProperty({}, 'toString');\n   *\n   * @name notOwnProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n\n  assert.notOwnProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notOwnProperty, true).to.not.have.own.property(prop);\n  };\n  /**\n   * ### .ownPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct property named by `property` and a value\n   * equal to the provided `value`. Uses a strict equality check (===).\n   * Inherited properties aren't checked.\n   *\n   *     assert.ownPropertyVal({ coffee: 'is good'}, 'coffee', 'is good');\n   *\n   * @name ownPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n\n  assert.ownPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.ownPropertyVal, true).to.have.own.property(prop, value);\n  };\n  /**\n   * ### .notOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by `property`\n   * with a value equal to the provided `value`. Uses a strict equality check\n   * (===). Inherited properties aren't checked.\n   *\n   *     assert.notOwnPropertyVal({ tea: 'is better'}, 'tea', 'is worse');\n   *     assert.notOwnPropertyVal({}, 'toString', Object.prototype.toString);\n   *\n   * @name notOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n\n  assert.notOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.notOwnPropertyVal, true).to.not.have.own.property(prop, value);\n  };\n  /**\n   * ### .deepOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct property named by `property` and a value\n   * equal to the provided `value`. Uses a deep equality check. Inherited\n   * properties aren't checked.\n   *\n   *     assert.deepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n   *\n   * @name deepOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n\n  assert.deepOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.deepOwnPropertyVal, true).to.have.deep.own.property(prop, value);\n  };\n  /**\n   * ### .notDeepOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by `property`\n   * with a value equal to the provided `value`. Uses a deep equality check.\n   * Inherited properties aren't checked.\n   *\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n   *     assert.notDeepOwnPropertyVal({}, 'toString', Object.prototype.toString);\n   *\n   * @name notDeepOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n\n  assert.notDeepOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.notDeepOwnPropertyVal, true).to.not.have.deep.own.property(prop, value);\n  };\n  /**\n   * ### .nestedProperty(object, property, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property`, which can be a string using dot- and bracket-notation for\n   * nested reference.\n   *\n   *     assert.nestedProperty({ tea: { green: 'matcha' }}, 'tea.green');\n   *\n   * @name nestedProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.nestedProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.nestedProperty, true).to.have.nested.property(prop);\n  };\n  /**\n   * ### .notNestedProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`, which\n   * can be a string using dot- and bracket-notation for nested reference. The\n   * property cannot exist on the object nor anywhere in its prototype chain.\n   *\n   *     assert.notNestedProperty({ tea: { green: 'matcha' }}, 'tea.oolong');\n   *\n   * @name notNestedProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.notNestedProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notNestedProperty, true).to.not.have.nested.property(prop);\n  };\n  /**\n   * ### .nestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`. `property` can use dot- and bracket-notation for nested\n   * reference. Uses a strict equality check (===).\n   *\n   *     assert.nestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');\n   *\n   * @name nestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.nestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.nestedPropertyVal, true).to.have.nested.property(prop, val);\n  };\n  /**\n   * ### .notNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property` with\n   * value given by `value`. `property` can use dot- and bracket-notation for\n   * nested reference. Uses a strict equality check (===).\n   *\n   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');\n   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'coffee.green', 'matcha');\n   *\n   * @name notNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.notNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notNestedPropertyVal, true).to.not.have.nested.property(prop, val);\n  };\n  /**\n   * ### .deepNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with a value given\n   * by `value`. `property` can use dot- and bracket-notation for nested\n   * reference. Uses a deep equality check.\n   *\n   *     assert.deepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yum' });\n   *\n   * @name deepNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.deepNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.deepNestedPropertyVal, true).to.have.deep.nested.property(prop, val);\n  };\n  /**\n   * ### .notDeepNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property` with\n   * value given by `value`. `property` can use dot- and bracket-notation for\n   * nested reference. Uses a deep equality check.\n   *\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { oolong: 'yum' });\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yuck' });\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.black', { matcha: 'yum' });\n   *\n   * @name notDeepNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.notDeepNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notDeepNestedPropertyVal, true).to.not.have.deep.nested.property(prop, val);\n  };\n  /**\n   * ### .lengthOf(object, length, [message])\n   *\n   * Asserts that `object` has a `length` or `size` with the expected value.\n   *\n   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');\n   *     assert.lengthOf('foobar', 6, 'string has length of 6');\n   *     assert.lengthOf(new Set([1,2,3]), 3, 'set has size of 3');\n   *     assert.lengthOf(new Map([['a',1],['b',2],['c',3]]), 3, 'map has size of 3');\n   *\n   * @name lengthOf\n   * @param {Mixed} object\n   * @param {Number} length\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.lengthOf = function (exp, len, msg) {\n    new Assertion(exp, msg, assert.lengthOf, true).to.have.lengthOf(len);\n  };\n  /**\n   * ### .hasAnyKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has at least one of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'iDontExist', 'baz']);\n   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, iDontExist: 99, baz: 1337});\n   *     assert.hasAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.hasAnyKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name hasAnyKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.hasAnyKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAnyKeys, true).to.have.any.keys(keys);\n  };\n  /**\n   * ### .hasAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all and only all of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337]);\n   *     assert.hasAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.hasAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name hasAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.hasAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAllKeys, true).to.have.all.keys(keys);\n  };\n  /**\n   * ### .containsAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all of the `keys` provided but may have more keys not listed.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'baz']);\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, baz: 1337});\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337});\n   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}]);\n   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}]);\n   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name containsAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.containsAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.containsAllKeys, true).to.contain.all.keys(keys);\n  };\n  /**\n   * ### .doesNotHaveAnyKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has none of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n   *     assert.doesNotHaveAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n   *     assert.doesNotHaveAnyKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);\n   *\n   * @name doesNotHaveAnyKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.doesNotHaveAnyKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAnyKeys, true).to.not.have.any.keys(keys);\n  };\n  /**\n   * ### .doesNotHaveAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` does not have at least one of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n   *     assert.doesNotHaveAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n   *     assert.doesNotHaveAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);\n   *\n   * @name doesNotHaveAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.doesNotHaveAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAllKeys, true).to.not.have.all.keys(keys);\n  };\n  /**\n   * ### .hasAnyDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has at least one of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {three: 'three'}]);\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name hasAnyDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.hasAnyDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAnyDeepKeys, true).to.have.any.deep.keys(keys);\n  };\n  /**\n    * ### .hasAllDeepKeys(object, [keys], [message])\n    *\n    * Asserts that `object` has all and only all of the `keys` provided.\n    * Since Sets and Maps can have objects as keys you can use this assertion to perform\n    * a deep comparison.\n    * You can also provide a single object instead of a `keys` array and its keys\n    * will be used as the expected set of keys.\n    *\n    *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne']]), {one: 'one'});\n    *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n    *     assert.hasAllDeepKeys(new Set([{one: 'one'}]), {one: 'one'});\n    *     assert.hasAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n    *\n    * @name hasAllDeepKeys\n    * @param {Mixed} object\n    * @param {Array|Object} keys\n    * @param {String} message\n    * @namespace Assert\n    * @api public\n    */\n\n\n  assert.hasAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAllDeepKeys, true).to.have.all.deep.keys(keys);\n  };\n  /**\n    * ### .containsAllDeepKeys(object, [keys], [message])\n    *\n    * Asserts that `object` contains all of the `keys` provided.\n    * Since Sets and Maps can have objects as keys you can use this assertion to perform\n    * a deep comparison.\n    * You can also provide a single object instead of a `keys` array and its keys\n    * will be used as the expected set of keys.\n    *\n    *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n    *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n    *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n    *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n    *\n    * @name containsAllDeepKeys\n    * @param {Mixed} object\n    * @param {Array|Object} keys\n    * @param {String} message\n    * @namespace Assert\n    * @api public\n    */\n\n\n  assert.containsAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.containsAllDeepKeys, true).to.contain.all.deep.keys(keys);\n  };\n  /**\n    * ### .doesNotHaveAnyDeepKeys(object, [keys], [message])\n    *\n    * Asserts that `object` has none of the `keys` provided.\n    * Since Sets and Maps can have objects as keys you can use this assertion to perform\n    * a deep comparison.\n    * You can also provide a single object instead of a `keys` array and its keys\n    * will be used as the expected set of keys.\n    *\n    *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n    *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n    *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n    *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n    *\n    * @name doesNotHaveAnyDeepKeys\n    * @param {Mixed} object\n    * @param {Array|Object} keys\n    * @param {String} message\n    * @namespace Assert\n    * @api public\n    */\n\n\n  assert.doesNotHaveAnyDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAnyDeepKeys, true).to.not.have.any.deep.keys(keys);\n  };\n  /**\n    * ### .doesNotHaveAllDeepKeys(object, [keys], [message])\n    *\n    * Asserts that `object` does not have at least one of the `keys` provided.\n    * Since Sets and Maps can have objects as keys you can use this assertion to perform\n    * a deep comparison.\n    * You can also provide a single object instead of a `keys` array and its keys\n    * will be used as the expected set of keys.\n    *\n    *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n    *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {one: 'one'}]);\n    *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n    *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {fifty: 'fifty'}]);\n    *\n    * @name doesNotHaveAllDeepKeys\n    * @param {Mixed} object\n    * @param {Array|Object} keys\n    * @param {String} message\n    * @namespace Assert\n    * @api public\n    */\n\n\n  assert.doesNotHaveAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAllDeepKeys, true).to.not.have.all.deep.keys(keys);\n  };\n  /**\n    * ### .throws(fn, [errorLike/string/regexp], [string/regexp], [message])\n    *\n    * If `errorLike` is an `Error` constructor, asserts that `fn` will throw an error that is an\n    * instance of `errorLike`.\n    * If `errorLike` is an `Error` instance, asserts that the error thrown is the same\n    * instance as `errorLike`.\n    * If `errMsgMatcher` is provided, it also asserts that the error thrown will have a\n    * message matching `errMsgMatcher`.\n    *\n    *     assert.throws(fn, 'Error thrown must have this msg');\n    *     assert.throws(fn, /Error thrown must have a msg that matches this/);\n    *     assert.throws(fn, ReferenceError);\n    *     assert.throws(fn, errorInstance);\n    *     assert.throws(fn, ReferenceError, 'Error thrown must be a ReferenceError and have this msg');\n    *     assert.throws(fn, errorInstance, 'Error thrown must be the same errorInstance and have this msg');\n    *     assert.throws(fn, ReferenceError, /Error thrown must be a ReferenceError and match this/);\n    *     assert.throws(fn, errorInstance, /Error thrown must be the same errorInstance and match this/);\n    *\n    * @name throws\n    * @alias throw\n    * @alias Throw\n    * @param {Function} fn\n    * @param {ErrorConstructor|Error} errorLike\n    * @param {RegExp|String} errMsgMatcher\n    * @param {String} message\n    * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n    * @namespace Assert\n    * @api public\n    */\n\n\n  assert.throws = function (fn, errorLike, errMsgMatcher, msg) {\n    if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    var assertErr = new Assertion(fn, msg, assert.throws, true).to.throw(errorLike, errMsgMatcher);\n    return flag(assertErr, 'object');\n  };\n  /**\n   * ### .doesNotThrow(fn, [errorLike/string/regexp], [string/regexp], [message])\n   *\n   * If `errorLike` is an `Error` constructor, asserts that `fn` will _not_ throw an error that is an\n   * instance of `errorLike`.\n   * If `errorLike` is an `Error` instance, asserts that the error thrown is _not_ the same\n   * instance as `errorLike`.\n   * If `errMsgMatcher` is provided, it also asserts that the error thrown will _not_ have a\n   * message matching `errMsgMatcher`.\n   *\n   *     assert.doesNotThrow(fn, 'Any Error thrown must not have this message');\n   *     assert.doesNotThrow(fn, /Any Error thrown must not match this/);\n   *     assert.doesNotThrow(fn, Error);\n   *     assert.doesNotThrow(fn, errorInstance);\n   *     assert.doesNotThrow(fn, Error, 'Error must not have this message');\n   *     assert.doesNotThrow(fn, errorInstance, 'Error must not have this message');\n   *     assert.doesNotThrow(fn, Error, /Error must not match this/);\n   *     assert.doesNotThrow(fn, errorInstance, /Error must not match this/);\n   *\n   * @name doesNotThrow\n   * @param {Function} fn\n   * @param {ErrorConstructor} errorLike\n   * @param {RegExp|String} errMsgMatcher\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.doesNotThrow = function (fn, errorLike, errMsgMatcher, msg) {\n    if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    new Assertion(fn, msg, assert.doesNotThrow, true).to.not.throw(errorLike, errMsgMatcher);\n  };\n  /**\n   * ### .operator(val1, operator, val2, [message])\n   *\n   * Compares two values using `operator`.\n   *\n   *     assert.operator(1, '<', 2, 'everything is ok');\n   *     assert.operator(1, '>', 2, 'this will fail');\n   *\n   * @name operator\n   * @param {Mixed} val1\n   * @param {String} operator\n   * @param {Mixed} val2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.operator = function (val, operator, val2, msg) {\n    var ok;\n\n    switch (operator) {\n      case '==':\n        ok = val == val2;\n        break;\n\n      case '===':\n        ok = val === val2;\n        break;\n\n      case '>':\n        ok = val > val2;\n        break;\n\n      case '>=':\n        ok = val >= val2;\n        break;\n\n      case '<':\n        ok = val < val2;\n        break;\n\n      case '<=':\n        ok = val <= val2;\n        break;\n\n      case '!=':\n        ok = val != val2;\n        break;\n\n      case '!==':\n        ok = val !== val2;\n        break;\n\n      default:\n        msg = msg ? msg + ': ' : msg;\n        throw new chai.AssertionError(msg + 'Invalid operator \"' + operator + '\"', undefined, assert.operator);\n    }\n\n    var test = new Assertion(ok, msg, assert.operator, true);\n    test.assert(true === flag(test, 'object'), 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2), 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2));\n  };\n  /**\n   * ### .closeTo(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name closeTo\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.closeTo = function (act, exp, delta, msg) {\n    new Assertion(act, msg, assert.closeTo, true).to.be.closeTo(exp, delta);\n  };\n  /**\n   * ### .approximately(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name approximately\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.approximately = function (act, exp, delta, msg) {\n    new Assertion(act, msg, assert.approximately, true).to.be.approximately(exp, delta);\n  };\n  /**\n   * ### .sameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in any order. Uses a\n   * strict equality check (===).\n   *\n   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');\n   *\n   * @name sameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.sameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameMembers, true).to.have.same.members(set2);\n  };\n  /**\n   * ### .notSameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in any order.\n   * Uses a strict equality check (===).\n   *\n   *     assert.notSameMembers([ 1, 2, 3 ], [ 5, 1, 3 ], 'not same members');\n   *\n   * @name notSameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.notSameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameMembers, true).to.not.have.same.members(set2);\n  };\n  /**\n   * ### .sameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in any order. Uses a\n   * deep equality check.\n   *\n   *     assert.sameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { c: 3 }], 'same deep members');\n   *\n   * @name sameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.sameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameDeepMembers, true).to.have.same.deep.members(set2);\n  };\n  /**\n   * ### .notSameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in any order.\n   * Uses a deep equality check.\n   *\n   *     assert.notSameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { f: 5 }], 'not same deep members');\n   *\n   * @name notSameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.notSameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameDeepMembers, true).to.not.have.same.deep.members(set2);\n  };\n  /**\n   * ### .sameOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in the same order.\n   * Uses a strict equality check (===).\n   *\n   *     assert.sameOrderedMembers([ 1, 2, 3 ], [ 1, 2, 3 ], 'same ordered members');\n   *\n   * @name sameOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.sameOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameOrderedMembers, true).to.have.same.ordered.members(set2);\n  };\n  /**\n   * ### .notSameOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in the same\n   * order. Uses a strict equality check (===).\n   *\n   *     assert.notSameOrderedMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'not same ordered members');\n   *\n   * @name notSameOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.notSameOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameOrderedMembers, true).to.not.have.same.ordered.members(set2);\n  };\n  /**\n   * ### .sameDeepOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in the same order.\n   * Uses a deep equality check.\n   *\n   *     assert.sameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { c: 3 } ], 'same deep ordered members');\n   *\n   * @name sameDeepOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.sameDeepOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameDeepOrderedMembers, true).to.have.same.deep.ordered.members(set2);\n  };\n  /**\n   * ### .notSameDeepOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in the same\n   * order. Uses a deep equality check.\n   *\n   *     assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { z: 5 } ], 'not same deep ordered members');\n   *     assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { c: 3 } ], 'not same deep ordered members');\n   *\n   * @name notSameDeepOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.notSameDeepOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameDeepOrderedMembers, true).to.not.have.same.deep.ordered.members(set2);\n  };\n  /**\n   * ### .includeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in any order. Uses a\n   * strict equality check (===). Duplicates are ignored.\n   *\n   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1, 2 ], 'include members');\n   *\n   * @name includeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.includeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeMembers, true).to.include.members(subset);\n  };\n  /**\n   * ### .notIncludeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in any order. Uses a\n   * strict equality check (===). Duplicates are ignored.\n   *\n   *     assert.notIncludeMembers([ 1, 2, 3 ], [ 5, 1 ], 'not include members');\n   *\n   * @name notIncludeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.notIncludeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeMembers, true).to.not.include.members(subset);\n  };\n  /**\n   * ### .includeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in any order. Uses a deep\n   * equality check. Duplicates are ignored.\n   *\n   *     assert.includeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { b: 2 } ], 'include deep members');\n   *\n   * @name includeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.includeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeDeepMembers, true).to.include.deep.members(subset);\n  };\n  /**\n   * ### .notIncludeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in any order. Uses a\n   * deep equality check. Duplicates are ignored.\n   *\n   *     assert.notIncludeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { f: 5 } ], 'not include deep members');\n   *\n   * @name notIncludeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.notIncludeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeDeepMembers, true).to.not.include.deep.members(subset);\n  };\n  /**\n   * ### .includeOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a strict equality\n   * check (===).\n   *\n   *     assert.includeOrderedMembers([ 1, 2, 3 ], [ 1, 2 ], 'include ordered members');\n   *\n   * @name includeOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.includeOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeOrderedMembers, true).to.include.ordered.members(subset);\n  };\n  /**\n   * ### .notIncludeOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a strict equality\n   * check (===).\n   *\n   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 1 ], 'not include ordered members');\n   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 3 ], 'not include ordered members');\n   *\n   * @name notIncludeOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.notIncludeOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeOrderedMembers, true).to.not.include.ordered.members(subset);\n  };\n  /**\n   * ### .includeDeepOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a deep equality\n   * check.\n   *\n   *     assert.includeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 } ], 'include deep ordered members');\n   *\n   * @name includeDeepOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.includeDeepOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeDeepOrderedMembers, true).to.include.deep.ordered.members(subset);\n  };\n  /**\n   * ### .notIncludeDeepOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a deep equality\n   * check.\n   *\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { f: 5 } ], 'not include deep ordered members');\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 } ], 'not include deep ordered members');\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { c: 3 } ], 'not include deep ordered members');\n   *\n   * @name notIncludeDeepOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.notIncludeDeepOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeDeepOrderedMembers, true).to.not.include.deep.ordered.members(subset);\n  };\n  /**\n   * ### .oneOf(inList, list, [message])\n   *\n   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.\n   *\n   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');\n   *\n   * @name oneOf\n   * @param {*} inList\n   * @param {Array<*>} list\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.oneOf = function (inList, list, msg) {\n    new Assertion(inList, msg, assert.oneOf, true).to.be.oneOf(list);\n  };\n  /**\n   * ### .changes(function, object, property, [message])\n   *\n   * Asserts that a function changes the value of a property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 22 };\n   *     assert.changes(fn, obj, 'val');\n   *\n   * @name changes\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.changes = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changes, true).to.change(obj, prop);\n  };\n  /**\n  * ### .changesBy(function, object, property, delta, [message])\n  *\n  * Asserts that a function changes the value of a property by an amount (delta).\n  *\n  *     var obj = { val: 10 };\n  *     var fn = function() { obj.val += 2 };\n  *     assert.changesBy(fn, obj, 'val', 2);\n  *\n  * @name changesBy\n  * @param {Function} modifier function\n  * @param {Object} object or getter function\n  * @param {String} property name _optional_\n  * @param {Number} change amount (delta)\n  * @param {String} message _optional_\n  * @namespace Assert\n  * @api public\n  */\n\n\n  assert.changesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changesBy, true).to.change(obj, prop).by(delta);\n  };\n  /**\n  * ### .doesNotChange(function, object, property, [message])\n  *\n  * Asserts that a function does not change the value of a property.\n  *\n  *     var obj = { val: 10 };\n  *     var fn = function() { console.log('foo'); };\n  *     assert.doesNotChange(fn, obj, 'val');\n  *\n  * @name doesNotChange\n  * @param {Function} modifier function\n  * @param {Object} object or getter function\n  * @param {String} property name _optional_\n  * @param {String} message _optional_\n  * @namespace Assert\n  * @api public\n  */\n\n\n  assert.doesNotChange = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotChange, true).to.not.change(obj, prop);\n  };\n  /**\n   * ### .changesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not change the value of a property or of a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 10 };\n   *     assert.changesButNotBy(fn, obj, 'val', 5);\n   *\n   * @name changesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.changesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changesButNotBy, true).to.change(obj, prop).but.not.by(delta);\n  };\n  /**\n   * ### .increases(function, object, property, [message])\n   *\n   * Asserts that a function increases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 13 };\n   *     assert.increases(fn, obj, 'val');\n   *\n   * @name increases\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.increases = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.increases, true).to.increase(obj, prop);\n  };\n  /**\n   * ### .increasesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function increases a numeric object property or a function's return value by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 10 };\n   *     assert.increasesBy(fn, obj, 'val', 10);\n   *\n   * @name increasesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.increasesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.increasesBy, true).to.increase(obj, prop).by(delta);\n  };\n  /**\n   * ### .doesNotIncrease(function, object, property, [message])\n   *\n   * Asserts that a function does not increase a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 8 };\n   *     assert.doesNotIncrease(fn, obj, 'val');\n   *\n   * @name doesNotIncrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.doesNotIncrease = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotIncrease, true).to.not.increase(obj, prop);\n  };\n  /**\n   * ### .increasesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not increase a numeric object property or function's return value by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.increasesButNotBy(fn, obj, 'val', 10);\n   *\n   * @name increasesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.increasesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.increasesButNotBy, true).to.increase(obj, prop).but.not.by(delta);\n  };\n  /**\n   * ### .decreases(function, object, property, [message])\n   *\n   * Asserts that a function decreases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreases(fn, obj, 'val');\n   *\n   * @name decreases\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.decreases = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.decreases, true).to.decrease(obj, prop);\n  };\n  /**\n   * ### .decreasesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val -= 5 };\n   *     assert.decreasesBy(fn, obj, 'val', 5);\n   *\n   * @name decreasesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.decreasesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.decreasesBy, true).to.decrease(obj, prop).by(delta);\n  };\n  /**\n   * ### .doesNotDecrease(function, object, property, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.doesNotDecrease(fn, obj, 'val');\n   *\n   * @name doesNotDecrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.doesNotDecrease = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotDecrease, true).to.not.decrease(obj, prop);\n  };\n  /**\n   * ### .doesNotDecreaseBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.doesNotDecreaseBy(fn, obj, 'val', 1);\n   *\n   * @name doesNotDecreaseBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.doesNotDecreaseBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotDecreaseBy, true).to.not.decrease(obj, prop).by(delta);\n  };\n  /**\n   * ### .decreasesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreasesButNotBy(fn, obj, 'val', 1);\n   *\n   * @name decreasesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.decreasesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.decreasesButNotBy, true).to.decrease(obj, prop).but.not.by(delta);\n  };\n  /*!\n   * ### .ifError(object)\n   *\n   * Asserts if value is not a false value, and throws if it is a true value.\n   * This is added to allow for chai to be a drop-in replacement for Node's\n   * assert class.\n   *\n   *     var err = new Error('I am a custom error');\n   *     assert.ifError(err); // Rethrows err!\n   *\n   * @name ifError\n   * @param {Object} object\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.ifError = function (val) {\n    if (val) {\n      throw val;\n    }\n  };\n  /**\n   * ### .isExtensible(object)\n   *\n   * Asserts that `object` is extensible (can have new properties added to it).\n   *\n   *     assert.isExtensible({});\n   *\n   * @name isExtensible\n   * @alias extensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.isExtensible = function (obj, msg) {\n    new Assertion(obj, msg, assert.isExtensible, true).to.be.extensible;\n  };\n  /**\n   * ### .isNotExtensible(object)\n   *\n   * Asserts that `object` is _not_ extensible.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({});\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     assert.isNotExtensible(nonExtensibleObject);\n   *     assert.isNotExtensible(sealedObject);\n   *     assert.isNotExtensible(frozenObject);\n   *\n   * @name isNotExtensible\n   * @alias notExtensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.isNotExtensible = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotExtensible, true).to.not.be.extensible;\n  };\n  /**\n   * ### .isSealed(object)\n   *\n   * Asserts that `object` is sealed (cannot have new properties added to it\n   * and its existing properties cannot be removed).\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.seal({});\n   *\n   *     assert.isSealed(sealedObject);\n   *     assert.isSealed(frozenObject);\n   *\n   * @name isSealed\n   * @alias sealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.isSealed = function (obj, msg) {\n    new Assertion(obj, msg, assert.isSealed, true).to.be.sealed;\n  };\n  /**\n   * ### .isNotSealed(object)\n   *\n   * Asserts that `object` is _not_ sealed.\n   *\n   *     assert.isNotSealed({});\n   *\n   * @name isNotSealed\n   * @alias notSealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.isNotSealed = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotSealed, true).to.not.be.sealed;\n  };\n  /**\n   * ### .isFrozen(object)\n   *\n   * Asserts that `object` is frozen (cannot have new properties added to it\n   * and its existing properties cannot be modified).\n   *\n   *     var frozenObject = Object.freeze({});\n   *     assert.frozen(frozenObject);\n   *\n   * @name isFrozen\n   * @alias frozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.isFrozen = function (obj, msg) {\n    new Assertion(obj, msg, assert.isFrozen, true).to.be.frozen;\n  };\n  /**\n   * ### .isNotFrozen(object)\n   *\n   * Asserts that `object` is _not_ frozen.\n   *\n   *     assert.isNotFrozen({});\n   *\n   * @name isNotFrozen\n   * @alias notFrozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.isNotFrozen = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotFrozen, true).to.not.be.frozen;\n  };\n  /**\n   * ### .isEmpty(target)\n   *\n   * Asserts that the target does not contain any values.\n   * For arrays and strings, it checks the `length` property.\n   * For `Map` and `Set` instances, it checks the `size` property.\n   * For non-function objects, it gets the count of own\n   * enumerable string keys.\n   *\n   *     assert.isEmpty([]);\n   *     assert.isEmpty('');\n   *     assert.isEmpty(new Map);\n   *     assert.isEmpty({});\n   *\n   * @name isEmpty\n   * @alias empty\n   * @param {Object|Array|String|Map|Set} target\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.isEmpty = function (val, msg) {\n    new Assertion(val, msg, assert.isEmpty, true).to.be.empty;\n  };\n  /**\n   * ### .isNotEmpty(target)\n   *\n   * Asserts that the target contains values.\n   * For arrays and strings, it checks the `length` property.\n   * For `Map` and `Set` instances, it checks the `size` property.\n   * For non-function objects, it gets the count of own\n   * enumerable string keys.\n   *\n   *     assert.isNotEmpty([1, 2]);\n   *     assert.isNotEmpty('34');\n   *     assert.isNotEmpty(new Set([5, 6]));\n   *     assert.isNotEmpty({ key: 7 });\n   *\n   * @name isNotEmpty\n   * @alias notEmpty\n   * @param {Object|Array|String|Map|Set} target\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n\n  assert.isNotEmpty = function (val, msg) {\n    new Assertion(val, msg, assert.isNotEmpty, true).to.not.be.empty;\n  };\n  /*!\n   * Aliases.\n   */\n\n\n  (function alias(name, as) {\n    assert[as] = assert[name];\n    return alias;\n  })('isOk', 'ok')('isNotOk', 'notOk')('throws', 'throw')('throws', 'Throw')('isExtensible', 'extensible')('isNotExtensible', 'notExtensible')('isSealed', 'sealed')('isNotSealed', 'notSealed')('isFrozen', 'frozen')('isNotFrozen', 'notFrozen')('isEmpty', 'empty')('isNotEmpty', 'notEmpty');\n};","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nmodule.exports = function (chai, util) {\n  chai.expect = function (val, message) {\n    return new chai.Assertion(val, message);\n  };\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure.\n   *\n   *     expect.fail();\n   *     expect.fail(\"custom error message\");\n   *     expect.fail(1, 2);\n   *     expect.fail(1, 2, \"custom error message\");\n   *     expect.fail(1, 2, \"custom error message\", \">\");\n   *     expect.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace BDD\n   * @api public\n   */\n\n\n  chai.expect.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n      message = actual;\n      actual = undefined;\n    }\n\n    message = message || 'expect.fail()';\n    throw new chai.AssertionError(message, {\n      actual: actual,\n      expected: expected,\n      operator: operator\n    }, chai.expect.fail);\n  };\n};","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nmodule.exports = function (chai, util) {\n  var Assertion = chai.Assertion;\n\n  function loadShould() {\n    // explicitly define this method as function as to have it's name to include as `ssfi`\n    function shouldGetter() {\n      if (this instanceof String || this instanceof Number || this instanceof Boolean || typeof Symbol === 'function' && this instanceof Symbol || typeof BigInt === 'function' && this instanceof BigInt) {\n        return new Assertion(this.valueOf(), null, shouldGetter);\n      }\n\n      return new Assertion(this, null, shouldGetter);\n    }\n\n    function shouldSetter(value) {\n      // See https://github.com/chaijs/chai/issues/86: this makes\n      // `whatever.should = someValue` actually set `someValue`, which is\n      // especially useful for `global.should = require('chai').should()`.\n      //\n      // Note that we have to use [[DefineProperty]] instead of [[Put]]\n      // since otherwise we would trigger this very setter!\n      Object.defineProperty(this, 'should', {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } // modify Object.prototype to have `should`\n\n\n    Object.defineProperty(Object.prototype, 'should', {\n      set: shouldSetter,\n      get: shouldGetter,\n      configurable: true\n    });\n    var should = {};\n    /**\n     * ### .fail([message])\n     * ### .fail(actual, expected, [message], [operator])\n     *\n     * Throw a failure.\n     *\n     *     should.fail();\n     *     should.fail(\"custom error message\");\n     *     should.fail(1, 2);\n     *     should.fail(1, 2, \"custom error message\");\n     *     should.fail(1, 2, \"custom error message\", \">\");\n     *     should.fail(1, 2, undefined, \">\");\n     *\n     *\n     * @name fail\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @param {String} operator\n     * @namespace BDD\n     * @api public\n     */\n\n    should.fail = function (actual, expected, message, operator) {\n      if (arguments.length < 2) {\n        message = actual;\n        actual = undefined;\n      }\n\n      message = message || 'should.fail()';\n      throw new chai.AssertionError(message, {\n        actual: actual,\n        expected: expected,\n        operator: operator\n      }, should.fail);\n    };\n    /**\n     * ### .equal(actual, expected, [message])\n     *\n     * Asserts non-strict equality (`==`) of `actual` and `expected`.\n     *\n     *     should.equal(3, '3', '== coerces values to strings');\n     *\n     * @name equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n\n    should.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.equal(val2);\n    };\n    /**\n     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])\n     *\n     * Asserts that `function` will throw an error that is an instance of\n     * `constructor`, or alternately that it will throw an error with message\n     * matching `regexp`.\n     *\n     *     should.throw(fn, 'function throws a reference error');\n     *     should.throw(fn, /function throws a reference error/);\n     *     should.throw(fn, ReferenceError);\n     *     should.throw(fn, ReferenceError, 'function throws a reference error');\n     *     should.throw(fn, ReferenceError, /function throws a reference error/);\n     *\n     * @name throw\n     * @alias Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n\n    should.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.Throw(errt, errs);\n    };\n    /**\n     * ### .exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var foo = 'hi';\n     *\n     *     should.exist(foo, 'foo exists');\n     *\n     * @name exist\n     * @namespace Should\n     * @api public\n     */\n\n\n    should.exist = function (val, msg) {\n      new Assertion(val, msg).to.exist;\n    }; // negation\n\n\n    should.not = {};\n    /**\n     * ### .not.equal(actual, expected, [message])\n     *\n     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n     *\n     *     should.not.equal(3, 4, 'these numbers are not equal');\n     *\n     * @name not.equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.not.equal(val2);\n    };\n    /**\n     * ### .throw(function, [constructor/regexp], [message])\n     *\n     * Asserts that `function` will _not_ throw an error that is an instance of\n     * `constructor`, or alternately that it will not throw an error with message\n     * matching `regexp`.\n     *\n     *     should.not.throw(fn, Error, 'function does not throw');\n     *\n     * @name not.throw\n     * @alias not.Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n\n    should.not.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.not.Throw(errt, errs);\n    };\n    /**\n     * ### .not.exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var bar = null;\n     *\n     *     should.not.exist(bar, 'bar does not exist');\n     *\n     * @name not.exist\n     * @namespace Should\n     * @api public\n     */\n\n\n    should.not.exist = function (val, msg) {\n      new Assertion(val, msg).to.not.exist;\n    };\n\n    should['throw'] = should['Throw'];\n    should.not['throw'] = should.not['Throw'];\n    return should;\n  }\n\n  ;\n  chai.should = loadShould;\n  chai.Should = loadShould;\n};","/*!\n * Chai - addChainingMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\nvar addLengthGuard = require('./addLengthGuard');\n\nvar chai = require('../../chai');\n\nvar flag = require('./flag');\n\nvar proxify = require('./proxify');\n\nvar transferFlags = require('./transferFlags');\n/*!\n * Module variables\n */\n// Check whether `Object.setPrototypeOf` is supported\n\n\nvar canSetPrototype = typeof Object.setPrototypeOf === 'function'; // Without `Object.setPrototypeOf` support, this module will need to add properties to a function.\n// However, some of functions' own props are not configurable and should be skipped.\n\nvar testFn = function testFn() {};\n\nvar excludeNames = Object.getOwnPropertyNames(testFn).filter(function (name) {\n  var propDesc = Object.getOwnPropertyDescriptor(testFn, name); // Note: PhantomJS 1.x includes `callee` as one of `testFn`'s own properties,\n  // but then returns `undefined` as the property descriptor for `callee`. As a\n  // workaround, we perform an otherwise unnecessary type-check for `propDesc`,\n  // and then filter it out if it's not an object as it should be.\n\n  if (typeof propDesc !== 'object') return true;\n  return !propDesc.configurable;\n}); // Cache `Function` properties\n\nvar call = Function.prototype.call,\n    apply = Function.prototype.apply;\n/**\n * ### .addChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Adds a method to an object, such that the method can also be chained.\n *\n *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n *\n * The result can then be used as both a method assertion, executing both `method` and\n * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n *\n *     expect(fooStr).to.be.foo('bar');\n *     expect(fooStr).to.be.foo.equal('foo');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for `name`, when called\n * @param {Function} chainingBehavior function to be called every time the property is accessed\n * @namespace Utils\n * @name addChainableMethod\n * @api public\n */\n\nmodule.exports = function addChainableMethod(ctx, name, method, chainingBehavior) {\n  if (typeof chainingBehavior !== 'function') {\n    chainingBehavior = function chainingBehavior() {};\n  }\n\n  var chainableBehavior = {\n    method: method,\n    chainingBehavior: chainingBehavior\n  }; // save the methods so we can overwrite them later, if we need to.\n\n  if (!ctx.__methods) {\n    ctx.__methods = {};\n  }\n\n  ctx.__methods[name] = chainableBehavior;\n  Object.defineProperty(ctx, name, {\n    get: function chainableMethodGetter() {\n      chainableBehavior.chainingBehavior.call(this);\n\n      var chainableMethodWrapper = function chainableMethodWrapper() {\n        // Setting the `ssfi` flag to `chainableMethodWrapper` causes this\n        // function to be the starting point for removing implementation\n        // frames from the stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set.\n        //\n        // If the `lockSsfi` flag is set, then this assertion is being\n        // invoked from inside of another assertion. In this case, the `ssfi`\n        // flag has already been set by the outer assertion.\n        //\n        // Note that overwriting a chainable method merely replaces the saved\n        // methods in `ctx.__methods` instead of completely replacing the\n        // overwritten assertion. Therefore, an overwriting assertion won't\n        // set the `ssfi` or `lockSsfi` flags.\n        if (!flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', chainableMethodWrapper);\n        }\n\n        var result = chainableBehavior.method.apply(this, arguments);\n\n        if (result !== undefined) {\n          return result;\n        }\n\n        var newAssertion = new chai.Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      };\n\n      addLengthGuard(chainableMethodWrapper, name, true); // Use `Object.setPrototypeOf` if available\n\n      if (canSetPrototype) {\n        // Inherit all properties from the object by replacing the `Function` prototype\n        var prototype = Object.create(this); // Restore the `call` and `apply` methods from `Function`\n\n        prototype.call = call;\n        prototype.apply = apply;\n        Object.setPrototypeOf(chainableMethodWrapper, prototype);\n      } // Otherwise, redefine all properties (slow!)\n      else {\n          var asserterNames = Object.getOwnPropertyNames(ctx);\n          asserterNames.forEach(function (asserterName) {\n            if (excludeNames.indexOf(asserterName) !== -1) {\n              return;\n            }\n\n            var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);\n            Object.defineProperty(chainableMethodWrapper, asserterName, pd);\n          });\n        }\n\n      transferFlags(this, chainableMethodWrapper);\n      return proxify(chainableMethodWrapper);\n    },\n    configurable: true\n  });\n};","var fnLengthDesc = Object.getOwnPropertyDescriptor(function () {}, 'length');\n/*!\n * Chai - addLengthGuard utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .addLengthGuard(fn, assertionName, isChainable)\n *\n * Define `length` as a getter on the given uninvoked method assertion. The\n * getter acts as a guard against chaining `length` directly off of an uninvoked\n * method assertion, which is a problem because it references `function`'s\n * built-in `length` property instead of Chai's `length` assertion. When the\n * getter catches the user making this mistake, it throws an error with a\n * helpful message.\n *\n * There are two ways in which this mistake can be made. The first way is by\n * chaining the `length` assertion directly off of an uninvoked chainable\n * method. In this case, Chai suggests that the user use `lengthOf` instead. The\n * second way is by chaining the `length` assertion directly off of an uninvoked\n * non-chainable method. Non-chainable methods must be invoked prior to\n * chaining. In this case, Chai suggests that the user consult the docs for the\n * given assertion.\n *\n * If the `length` property of functions is unconfigurable, then return `fn`\n * without modification.\n *\n * Note that in ES6, the function's `length` property is configurable, so once\n * support for legacy environments is dropped, Chai's `length` property can\n * replace the built-in function's `length` property, and this length guard will\n * no longer be necessary. In the mean time, maintaining consistency across all\n * environments is the priority.\n *\n * @param {Function} fn\n * @param {String} assertionName\n * @param {Boolean} isChainable\n * @namespace Utils\n * @name addLengthGuard\n */\n\nmodule.exports = function addLengthGuard(fn, assertionName, isChainable) {\n  if (!fnLengthDesc.configurable) return fn;\n  Object.defineProperty(fn, 'length', {\n    get: function get() {\n      if (isChainable) {\n        throw Error('Invalid Chai property: ' + assertionName + '.length. Due' + ' to a compatibility issue, \"length\" cannot directly follow \"' + assertionName + '\". Use \"' + assertionName + '.lengthOf\" instead.');\n      }\n\n      throw Error('Invalid Chai property: ' + assertionName + '.length. See' + ' docs for proper usage of \"' + assertionName + '\".');\n    }\n  });\n  return fn;\n};","/*!\n * Chai - addMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nvar addLengthGuard = require('./addLengthGuard');\n\nvar chai = require('../../chai');\n\nvar flag = require('./flag');\n\nvar proxify = require('./proxify');\n\nvar transferFlags = require('./transferFlags');\n/**\n * ### .addMethod(ctx, name, method)\n *\n * Adds a method to the prototype of an object.\n *\n *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(fooStr).to.be.foo('bar');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for name\n * @namespace Utils\n * @name addMethod\n * @api public\n */\n\n\nmodule.exports = function addMethod(ctx, name, method) {\n  var methodWrapper = function methodWrapper() {\n    // Setting the `ssfi` flag to `methodWrapper` causes this function to be the\n    // starting point for removing implementation frames from the stack trace of\n    // a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!flag(this, 'lockSsfi')) {\n      flag(this, 'ssfi', methodWrapper);\n    }\n\n    var result = method.apply(this, arguments);\n    if (result !== undefined) return result;\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  addLengthGuard(methodWrapper, name, false);\n  ctx[name] = proxify(methodWrapper, name);\n};","/*!\n * Chai - addProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nvar chai = require('../../chai');\n\nvar flag = require('./flag');\n\nvar isProxyEnabled = require('./isProxyEnabled');\n\nvar transferFlags = require('./transferFlags');\n/**\n * ### .addProperty(ctx, name, getter)\n *\n * Adds a property to the prototype of an object.\n *\n *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.instanceof(Foo);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.foo;\n *\n * @param {Object} ctx object to which the property is added\n * @param {String} name of property to add\n * @param {Function} getter function to be used for name\n * @namespace Utils\n * @name addProperty\n * @api public\n */\n\n\nmodule.exports = function addProperty(ctx, name, getter) {\n  getter = getter === undefined ? function () {} : getter;\n  Object.defineProperty(ctx, name, {\n    get: function propertyGetter() {\n      // Setting the `ssfi` flag to `propertyGetter` causes this function to\n      // be the starting point for removing implementation frames from the\n      // stack trace of a failed assertion.\n      //\n      // However, we only want to use this function as the starting point if\n      // the `lockSsfi` flag isn't set and proxy protection is disabled.\n      //\n      // If the `lockSsfi` flag is set, then either this assertion has been\n      // overwritten by another assertion, or this assertion is being invoked\n      // from inside of another assertion. In the first case, the `ssfi` flag\n      // has already been set by the overwriting assertion. In the second\n      // case, the `ssfi` flag has already been set by the outer assertion.\n      //\n      // If proxy protection is enabled, then the `ssfi` flag has already been\n      // set by the proxy getter.\n      if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n        flag(this, 'ssfi', propertyGetter);\n      }\n\n      var result = getter.call(this);\n      if (result !== undefined) return result;\n      var newAssertion = new chai.Assertion();\n      transferFlags(this, newAssertion);\n      return newAssertion;\n    },\n    configurable: true\n  });\n};","/*!\n * Chai - compareByInspect utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\nvar inspect = require('./inspect');\n/**\n * ### .compareByInspect(mixed, mixed)\n *\n * To be used as a compareFunction with Array.prototype.sort. Compares elements\n * using inspect instead of default behavior of using toString so that Symbols\n * and objects with irregular/missing toString can still be sorted without a\n * TypeError.\n *\n * @param {Mixed} first element to compare\n * @param {Mixed} second element to compare\n * @returns {Number} -1 if 'a' should come before 'b'; otherwise 1\n * @name compareByInspect\n * @namespace Utils\n * @api public\n */\n\n\nmodule.exports = function compareByInspect(a, b) {\n  return inspect(a) < inspect(b) ? -1 : 1;\n};","/*!\n * Chai - expectTypes utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .expectTypes(obj, types)\n *\n * Ensures that the object being tested against is of a valid type.\n *\n *     utils.expectTypes(this, ['array', 'object', 'string']);\n *\n * @param {Mixed} obj constructed Assertion\n * @param {Array} type A list of allowed types for this assertion\n * @namespace Utils\n * @name expectTypes\n * @api public\n */\nvar AssertionError = require('assertion-error');\n\nvar flag = require('./flag');\n\nvar type = require('type-detect');\n\nmodule.exports = function expectTypes(obj, types) {\n  var flagMsg = flag(obj, 'message');\n  var ssfi = flag(obj, 'ssfi');\n  flagMsg = flagMsg ? flagMsg + ': ' : '';\n  obj = flag(obj, 'object');\n  types = types.map(function (t) {\n    return t.toLowerCase();\n  });\n  types.sort(); // Transforms ['lorem', 'ipsum'] into 'a lorem, or an ipsum'\n\n  var str = types.map(function (t, index) {\n    var art = ~['a', 'e', 'i', 'o', 'u'].indexOf(t.charAt(0)) ? 'an' : 'a';\n    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';\n    return or + art + ' ' + t;\n  }).join(', ');\n  var objType = type(obj).toLowerCase();\n\n  if (!types.some(function (expected) {\n    return objType === expected;\n  })) {\n    throw new AssertionError(flagMsg + 'object tested must be ' + str + ', but ' + objType + ' given', undefined, ssfi);\n  }\n};","/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .flag(object, key, [value])\n *\n * Get or set a flag value on an object. If a\n * value is provided it will be set, else it will\n * return the currently set value or `undefined` if\n * the value is not set.\n *\n *     utils.flag(this, 'foo', 'bar'); // setter\n *     utils.flag(this, 'foo'); // getter, returns `bar`\n *\n * @param {Object} object constructed Assertion\n * @param {String} key\n * @param {Mixed} value (optional)\n * @namespace Utils\n * @name flag\n * @api private\n */\nmodule.exports = function flag(obj, key, value) {\n  var flags = obj.__flags || (obj.__flags = Object.create(null));\n\n  if (arguments.length === 3) {\n    flags[key] = value;\n  } else {\n    return flags[key];\n  }\n};","/*!\n * Chai - getActual utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getActual(object, [actual])\n *\n * Returns the `actual` value for an Assertion.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getActual\n */\nmodule.exports = function getActual(obj, args) {\n  return args.length > 4 ? args[4] : obj._obj;\n};","/*!\n * Chai - getEnumerableProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getEnumerableProperties(object)\n *\n * This allows the retrieval of enumerable property names of an object,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getEnumerableProperties\n * @api public\n */\nmodule.exports = function getEnumerableProperties(object) {\n  var result = [];\n\n  for (var name in object) {\n    result.push(name);\n  }\n\n  return result;\n};","/*!\n * Chai - message composition utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\nvar flag = require('./flag'),\n    getActual = require('./getActual'),\n    objDisplay = require('./objDisplay');\n/**\n * ### .getMessage(object, message, negateMessage)\n *\n * Construct the error message based on flags\n * and template tags. Template tags will return\n * a stringified inspection of the object referenced.\n *\n * Message template tags:\n * - `#{this}` current asserted object\n * - `#{act}` actual value\n * - `#{exp}` expected value\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getMessage\n * @api public\n */\n\n\nmodule.exports = function getMessage(obj, args) {\n  var negate = flag(obj, 'negate'),\n      val = flag(obj, 'object'),\n      expected = args[3],\n      actual = getActual(obj, args),\n      msg = negate ? args[2] : args[1],\n      flagMsg = flag(obj, 'message');\n  if (typeof msg === \"function\") msg = msg();\n  msg = msg || '';\n  msg = msg.replace(/#\\{this\\}/g, function () {\n    return objDisplay(val);\n  }).replace(/#\\{act\\}/g, function () {\n    return objDisplay(actual);\n  }).replace(/#\\{exp\\}/g, function () {\n    return objDisplay(expected);\n  });\n  return flagMsg ? flagMsg + ': ' + msg : msg;\n};","var type = require('type-detect');\n\nvar flag = require('./flag');\n\nfunction isObjectType(obj) {\n  var objectType = type(obj);\n  var objectTypes = ['Array', 'Object', 'function'];\n  return objectTypes.indexOf(objectType) !== -1;\n}\n/**\n * ### .getOperator(message)\n *\n * Extract the operator from error message.\n * Operator defined is based on below link\n * https://nodejs.org/api/assert.html#assert_assert.\n *\n * Returns the `operator` or `undefined` value for an Assertion.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getOperator\n * @api public\n */\n\n\nmodule.exports = function getOperator(obj, args) {\n  var operator = flag(obj, 'operator');\n  var negate = flag(obj, 'negate');\n  var expected = args[3];\n  var msg = negate ? args[2] : args[1];\n\n  if (operator) {\n    return operator;\n  }\n\n  if (typeof msg === 'function') msg = msg();\n  msg = msg || '';\n\n  if (!msg) {\n    return undefined;\n  }\n\n  if (/\\shave\\s/.test(msg)) {\n    return undefined;\n  }\n\n  var isObject = isObjectType(expected);\n\n  if (/\\snot\\s/.test(msg)) {\n    return isObject ? 'notDeepStrictEqual' : 'notStrictEqual';\n  }\n\n  return isObject ? 'deepStrictEqual' : 'strictEqual';\n};","/*!\n * Chai - getOwnEnumerableProperties utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\nvar getOwnEnumerablePropertySymbols = require('./getOwnEnumerablePropertySymbols');\n/**\n * ### .getOwnEnumerableProperties(object)\n *\n * This allows the retrieval of directly-owned enumerable property names and\n * symbols of an object. This function is necessary because Object.keys only\n * returns enumerable property names, not enumerable property symbols.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerableProperties\n * @api public\n */\n\n\nmodule.exports = function getOwnEnumerableProperties(obj) {\n  return Object.keys(obj).concat(getOwnEnumerablePropertySymbols(obj));\n};","/*!\n * Chai - getOwnEnumerablePropertySymbols utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getOwnEnumerablePropertySymbols(object)\n *\n * This allows the retrieval of directly-owned enumerable property symbols of an\n * object. This function is necessary because Object.getOwnPropertySymbols\n * returns both enumerable and non-enumerable property symbols.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerablePropertySymbols\n * @api public\n */\nmodule.exports = function getOwnEnumerablePropertySymbols(obj) {\n  if (typeof Object.getOwnPropertySymbols !== 'function') return [];\n  return Object.getOwnPropertySymbols(obj).filter(function (sym) {\n    return Object.getOwnPropertyDescriptor(obj, sym).enumerable;\n  });\n};","/*!\n * Chai - getProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getProperties(object)\n *\n * This allows the retrieval of property names of an object, enumerable or not,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getProperties\n * @api public\n */\nmodule.exports = function getProperties(object) {\n  var result = Object.getOwnPropertyNames(object);\n\n  function addProperty(property) {\n    if (result.indexOf(property) === -1) {\n      result.push(property);\n    }\n  }\n\n  var proto = Object.getPrototypeOf(object);\n\n  while (proto !== null) {\n    Object.getOwnPropertyNames(proto).forEach(addProperty);\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return result;\n};","/*!\n * chai\n * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Dependencies that are used for multiple exports are required here only once\n */\nvar pathval = require('pathval');\n/*!\n * test utility\n */\n\n\nexports.test = require('./test');\n/*!\n * type utility\n */\n\nexports.type = require('type-detect');\n/*!\n * expectTypes utility\n */\n\nexports.expectTypes = require('./expectTypes');\n/*!\n * message utility\n */\n\nexports.getMessage = require('./getMessage');\n/*!\n * actual utility\n */\n\nexports.getActual = require('./getActual');\n/*!\n * Inspect util\n */\n\nexports.inspect = require('./inspect');\n/*!\n * Object Display util\n */\n\nexports.objDisplay = require('./objDisplay');\n/*!\n * Flag utility\n */\n\nexports.flag = require('./flag');\n/*!\n * Flag transferring utility\n */\n\nexports.transferFlags = require('./transferFlags');\n/*!\n * Deep equal utility\n */\n\nexports.eql = require('deep-eql');\n/*!\n * Deep path info\n */\n\nexports.getPathInfo = pathval.getPathInfo;\n/*!\n * Check if a property exists\n */\n\nexports.hasProperty = pathval.hasProperty;\n/*!\n * Function name\n */\n\nexports.getName = require('get-func-name');\n/*!\n * add Property\n */\n\nexports.addProperty = require('./addProperty');\n/*!\n * add Method\n */\n\nexports.addMethod = require('./addMethod');\n/*!\n * overwrite Property\n */\n\nexports.overwriteProperty = require('./overwriteProperty');\n/*!\n * overwrite Method\n */\n\nexports.overwriteMethod = require('./overwriteMethod');\n/*!\n * Add a chainable method\n */\n\nexports.addChainableMethod = require('./addChainableMethod');\n/*!\n * Overwrite chainable method\n */\n\nexports.overwriteChainableMethod = require('./overwriteChainableMethod');\n/*!\n * Compare by inspect method\n */\n\nexports.compareByInspect = require('./compareByInspect');\n/*!\n * Get own enumerable property symbols method\n */\n\nexports.getOwnEnumerablePropertySymbols = require('./getOwnEnumerablePropertySymbols');\n/*!\n * Get own enumerable properties method\n */\n\nexports.getOwnEnumerableProperties = require('./getOwnEnumerableProperties');\n/*!\n * Checks error against a given set of criteria\n */\n\nexports.checkError = require('check-error');\n/*!\n * Proxify util\n */\n\nexports.proxify = require('./proxify');\n/*!\n * addLengthGuard util\n */\n\nexports.addLengthGuard = require('./addLengthGuard');\n/*!\n * isProxyEnabled helper\n */\n\nexports.isProxyEnabled = require('./isProxyEnabled');\n/*!\n * isNaN method\n */\n\nexports.isNaN = require('./isNaN');\n/*!\n * getOperator method\n */\n\nexports.getOperator = require('./getOperator');","// This is (almost) directly from Node.js utils\n// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js\nvar getName = require('get-func-name');\n\nvar getProperties = require('./getProperties');\n\nvar getEnumerableProperties = require('./getEnumerableProperties');\n\nvar config = require('../config');\n\nmodule.exports = inspect;\n/**\n * ### .inspect(obj, [showHidden], [depth], [colors])\n *\n * Echoes the value of a value. Tries to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Boolean} showHidden Flag that shows hidden (not enumerable)\n *    properties of objects. Default is false.\n * @param {Number} depth Depth in which to descend in object. Default is 2.\n * @param {Boolean} colors Flag to turn on ANSI escape codes to color the\n *    output. Default is false (no coloring).\n * @namespace Utils\n * @name inspect\n */\n\nfunction inspect(obj, showHidden, depth, colors) {\n  var ctx = {\n    showHidden: showHidden,\n    seen: [],\n    stylize: function stylize(str) {\n      return str;\n    }\n  };\n  return formatValue(ctx, obj, typeof depth === 'undefined' ? 2 : depth);\n} // Returns true if object is a DOM element.\n\n\nvar isDOMElement = function isDOMElement(object) {\n  if (typeof HTMLElement === 'object') {\n    return object instanceof HTMLElement;\n  } else {\n    return object && typeof object === 'object' && 'nodeType' in object && object.nodeType === 1 && typeof object.nodeName === 'string';\n  }\n};\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (value && typeof value.inspect === 'function' && // Filter out the util module, it's inspect function is special\n  value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.\n  !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n\n    if (typeof ret !== 'string') {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n\n    return ret;\n  } // Primitive types cannot have properties\n\n\n  var primitive = formatPrimitive(ctx, value);\n\n  if (primitive) {\n    return primitive;\n  } // If this is a DOM element, try to get the outer HTML.\n\n\n  if (isDOMElement(value)) {\n    if ('outerHTML' in value) {\n      return value.outerHTML; // This value does not have an outerHTML attribute,\n      //   it could still be an XML element\n    } else {\n      // Attempt to serialize it\n      try {\n        if (document.xmlVersion) {\n          var xmlSerializer = new XMLSerializer();\n          return xmlSerializer.serializeToString(value);\n        } else {\n          // Firefox 11- do not support outerHTML\n          //   It does, however, support innerHTML\n          //   Use the following to render the element\n          var ns = \"http://www.w3.org/1999/xhtml\";\n          var container = document.createElementNS(ns, '_');\n          container.appendChild(value.cloneNode(false));\n          var html = container.innerHTML.replace('><', '>' + value.innerHTML + '<');\n          container.innerHTML = '';\n          return html;\n        }\n      } catch (err) {// This could be a non-native DOM implementation,\n        //   continue with the normal flow:\n        //   printing the element as if it is an object.\n      }\n    }\n  } // Look up the keys of the object.\n\n\n  var visibleKeys = getEnumerableProperties(value);\n  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;\n  var name, nameSuffix; // Some type of object without properties can be shortcut.\n  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,\n  // a `stack` plus `description` property; ignore those for consistency.\n\n  if (keys.length === 0 || isError(value) && (keys.length === 1 && keys[0] === 'stack' || keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')) {\n    if (typeof value === 'function') {\n      name = getName(value);\n      nameSuffix = name ? ': ' + name : '';\n      return ctx.stylize('[Function' + nameSuffix + ']', 'special');\n    }\n\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');\n    }\n\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '',\n      array = false,\n      typedArray = false,\n      braces = ['{', '}'];\n\n  if (isTypedArray(value)) {\n    typedArray = true;\n    braces = ['[', ']'];\n  } // Make Array say that they are Array\n\n\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  } // Make functions say that they are functions\n\n\n  if (typeof value === 'function') {\n    name = getName(value);\n    nameSuffix = name ? ': ' + name : '';\n    base = ' [Function' + nameSuffix + ']';\n  } // Make RegExps say that they are RegExps\n\n\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  } // Make dates with properties first say the date\n\n\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  } // Make error with message first say the error\n\n\n  if (isError(value)) {\n    return formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n  var output;\n\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else if (typedArray) {\n    return formatTypedArray(value);\n  } else {\n    output = keys.map(function (key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n  return reduceToSingleString(output, base, braces);\n}\n\nfunction formatPrimitive(ctx, value) {\n  switch (typeof value) {\n    case 'undefined':\n      return ctx.stylize('undefined', 'undefined');\n\n    case 'string':\n      var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '').replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"') + '\\'';\n      return ctx.stylize(simple, 'string');\n\n    case 'number':\n      if (value === 0 && 1 / value === -Infinity) {\n        return ctx.stylize('-0', 'number');\n      }\n\n      return ctx.stylize('' + value, 'number');\n\n    case 'boolean':\n      return ctx.stylize('' + value, 'boolean');\n\n    case 'symbol':\n      return ctx.stylize(value.toString(), 'symbol');\n\n    case 'bigint':\n      return ctx.stylize(value.toString() + 'n', 'bigint');\n  } // For some reason typeof null is \"object\", so special case here.\n\n\n  if (value === null) {\n    return ctx.stylize('null', 'null');\n  }\n}\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (Object.prototype.hasOwnProperty.call(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n\n  keys.forEach(function (key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));\n    }\n  });\n  return output;\n}\n\nfunction formatTypedArray(value) {\n  var str = '[ ';\n\n  for (var i = 0; i < value.length; ++i) {\n    if (str.length >= config.truncateThreshold - 7) {\n      str += '...';\n      break;\n    }\n\n    str += value[i] + ', ';\n  }\n\n  str += ' ]'; // Removing trailing `, ` if the array was not truncated\n\n  if (str.indexOf(',  ]') !== -1) {\n    str = str.replace(',  ]', ' ]');\n  }\n\n  return str;\n}\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name;\n  var propDescriptor = Object.getOwnPropertyDescriptor(value, key);\n  var str;\n\n  if (propDescriptor) {\n    if (propDescriptor.get) {\n      if (propDescriptor.set) {\n        str = ctx.stylize('[Getter/Setter]', 'special');\n      } else {\n        str = ctx.stylize('[Getter]', 'special');\n      }\n    } else {\n      if (propDescriptor.set) {\n        str = ctx.stylize('[Setter]', 'special');\n      }\n    }\n  }\n\n  if (visibleKeys.indexOf(key) < 0) {\n    name = '[' + key + ']';\n  }\n\n  if (!str) {\n    if (ctx.seen.indexOf(value[key]) < 0) {\n      if (recurseTimes === null) {\n        str = formatValue(ctx, value[key], null);\n      } else {\n        str = formatValue(ctx, value[key], recurseTimes - 1);\n      }\n\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function (line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function (line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n\n  if (typeof name === 'undefined') {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n\n    name = JSON.stringify('' + key);\n\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"').replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\nfunction reduceToSingleString(output, base, braces) {\n  var length = output.reduce(function (prev, cur) {\n    return prev + cur.length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] + (base === '' ? '' : base + '\\n ') + ' ' + output.join(',\\n  ') + ' ' + braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\nfunction isTypedArray(ar) {\n  // Unfortunately there's no way to check if an object is a TypedArray\n  // We have to check if it's one of these types\n  return typeof ar === 'object' && /\\w+Array]$/.test(objectToString(ar));\n}\n\nfunction isArray(ar) {\n  return Array.isArray(ar) || typeof ar === 'object' && objectToString(ar) === '[object Array]';\n}\n\nfunction isRegExp(re) {\n  return typeof re === 'object' && objectToString(re) === '[object RegExp]';\n}\n\nfunction isDate(d) {\n  return typeof d === 'object' && objectToString(d) === '[object Date]';\n}\n\nfunction isError(e) {\n  return typeof e === 'object' && objectToString(e) === '[object Error]';\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}","/*!\n * Chai - isNaN utility\n * Copyright(c) 2012-2015 Sakthipriyan Vairamani <thechargingvolcano@gmail.com>\n * MIT Licensed\n */\n\n/**\n * ### .isNaN(value)\n *\n * Checks if the given value is NaN or not.\n *\n *     utils.isNaN(NaN); // true\n *\n * @param {Value} The value which has to be checked if it is NaN\n * @name isNaN\n * @api private\n */\nfunction isNaN(value) {\n  // Refer http://www.ecma-international.org/ecma-262/6.0/#sec-isnan-number\n  // section's NOTE.\n  return value !== value;\n} // If ECMAScript 6's Number.isNaN is present, prefer that.\n\n\nmodule.exports = Number.isNaN || isNaN;","var config = require('../config');\n/*!\n * Chai - isProxyEnabled helper\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .isProxyEnabled()\n *\n * Helper function to check if Chai's proxy protection feature is enabled. If\n * proxies are unsupported or disabled via the user's Chai config, then return\n * false. Otherwise, return true.\n *\n * @namespace Utils\n * @name isProxyEnabled\n */\n\n\nmodule.exports = function isProxyEnabled() {\n  return config.useProxy && typeof Proxy !== 'undefined' && typeof Reflect !== 'undefined';\n};","/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\nvar inspect = require('./inspect');\n\nvar config = require('../config');\n/**\n * ### .objDisplay(object)\n *\n * Determines if an object or an array matches\n * criteria to be inspected in-line for error\n * messages or should be truncated.\n *\n * @param {Mixed} javascript object to inspect\n * @name objDisplay\n * @namespace Utils\n * @api public\n */\n\n\nmodule.exports = function objDisplay(obj) {\n  var str = inspect(obj),\n      type = Object.prototype.toString.call(obj);\n\n  if (config.truncateThreshold && str.length >= config.truncateThreshold) {\n    if (type === '[object Function]') {\n      return !obj.name || obj.name === '' ? '[Function]' : '[Function: ' + obj.name + ']';\n    } else if (type === '[object Array]') {\n      return '[ Array(' + obj.length + ') ]';\n    } else if (type === '[object Object]') {\n      var keys = Object.keys(obj),\n          kstr = keys.length > 2 ? keys.splice(0, 2).join(', ') + ', ...' : keys.join(', ');\n      return '{ Object (' + kstr + ') }';\n    } else {\n      return str;\n    }\n  } else {\n    return str;\n  }\n};","/*!\n * Chai - overwriteChainableMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nvar chai = require('../../chai');\n\nvar transferFlags = require('./transferFlags');\n/**\n * ### .overwriteChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Overwrites an already existing chainable method\n * and provides access to the previous function or\n * property.  Must return functions to be used for\n * name.\n *\n *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'lengthOf',\n *       function (_super) {\n *       }\n *     , function (_super) {\n *       }\n *     );\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.have.lengthOf(3);\n *     expect(myFoo).to.have.lengthOf.above(3);\n *\n * @param {Object} ctx object whose method / property is to be overwritten\n * @param {String} name of method / property to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @param {Function} chainingBehavior function that returns a function to be used for property\n * @namespace Utils\n * @name overwriteChainableMethod\n * @api public\n */\n\n\nmodule.exports = function overwriteChainableMethod(ctx, name, method, chainingBehavior) {\n  var chainableBehavior = ctx.__methods[name];\n  var _chainingBehavior = chainableBehavior.chainingBehavior;\n\n  chainableBehavior.chainingBehavior = function overwritingChainableMethodGetter() {\n    var result = chainingBehavior(_chainingBehavior).call(this);\n\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  var _method = chainableBehavior.method;\n\n  chainableBehavior.method = function overwritingChainableMethodWrapper() {\n    var result = method(_method).apply(this, arguments);\n\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n};","/*!\n * Chai - overwriteMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nvar addLengthGuard = require('./addLengthGuard');\n\nvar chai = require('../../chai');\n\nvar flag = require('./flag');\n\nvar proxify = require('./proxify');\n\nvar transferFlags = require('./transferFlags');\n/**\n * ### .overwriteMethod(ctx, name, fn)\n *\n * Overwrites an already existing method and provides\n * access to previous function. Must return function\n * to be used for name.\n *\n *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n *       return function (str) {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.value).to.equal(str);\n *         } else {\n *           _super.apply(this, arguments);\n *         }\n *       }\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.equal('bar');\n *\n * @param {Object} ctx object whose method is to be overwritten\n * @param {String} name of method to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @namespace Utils\n * @name overwriteMethod\n * @api public\n */\n\n\nmodule.exports = function overwriteMethod(ctx, name, method) {\n  var _method = ctx[name],\n      _super = function _super() {\n    throw new Error(name + ' is not a function');\n  };\n\n  if (_method && 'function' === typeof _method) _super = _method;\n\n  var overwritingMethodWrapper = function overwritingMethodWrapper() {\n    // Setting the `ssfi` flag to `overwritingMethodWrapper` causes this\n    // function to be the starting point for removing implementation frames from\n    // the stack trace of a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!flag(this, 'lockSsfi')) {\n      flag(this, 'ssfi', overwritingMethodWrapper);\n    } // Setting the `lockSsfi` flag to `true` prevents the overwritten assertion\n    // from changing the `ssfi` flag. By this point, the `ssfi` flag is already\n    // set to the correct starting point for this assertion.\n\n\n    var origLockSsfi = flag(this, 'lockSsfi');\n    flag(this, 'lockSsfi', true);\n    var result = method(_super).apply(this, arguments);\n    flag(this, 'lockSsfi', origLockSsfi);\n\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  addLengthGuard(overwritingMethodWrapper, name, false);\n  ctx[name] = proxify(overwritingMethodWrapper, name);\n};","/*!\n * Chai - overwriteProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nvar chai = require('../../chai');\n\nvar flag = require('./flag');\n\nvar isProxyEnabled = require('./isProxyEnabled');\n\nvar transferFlags = require('./transferFlags');\n/**\n * ### .overwriteProperty(ctx, name, fn)\n *\n * Overwrites an already existing property getter and provides\n * access to previous value. Must return function to use as getter.\n *\n *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n *       return function () {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.name).to.equal('bar');\n *         } else {\n *           _super.call(this);\n *         }\n *       }\n *     });\n *\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.ok;\n *\n * @param {Object} ctx object whose property is to be overwritten\n * @param {String} name of property to overwrite\n * @param {Function} getter function that returns a getter function to be used for name\n * @namespace Utils\n * @name overwriteProperty\n * @api public\n */\n\n\nmodule.exports = function overwriteProperty(ctx, name, getter) {\n  var _get = Object.getOwnPropertyDescriptor(ctx, name),\n      _super = function _super() {};\n\n  if (_get && 'function' === typeof _get.get) _super = _get.get;\n  Object.defineProperty(ctx, name, {\n    get: function overwritingPropertyGetter() {\n      // Setting the `ssfi` flag to `overwritingPropertyGetter` causes this\n      // function to be the starting point for removing implementation frames\n      // from the stack trace of a failed assertion.\n      //\n      // However, we only want to use this function as the starting point if\n      // the `lockSsfi` flag isn't set and proxy protection is disabled.\n      //\n      // If the `lockSsfi` flag is set, then either this assertion has been\n      // overwritten by another assertion, or this assertion is being invoked\n      // from inside of another assertion. In the first case, the `ssfi` flag\n      // has already been set by the overwriting assertion. In the second\n      // case, the `ssfi` flag has already been set by the outer assertion.\n      //\n      // If proxy protection is enabled, then the `ssfi` flag has already been\n      // set by the proxy getter.\n      if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n        flag(this, 'ssfi', overwritingPropertyGetter);\n      } // Setting the `lockSsfi` flag to `true` prevents the overwritten\n      // assertion from changing the `ssfi` flag. By this point, the `ssfi`\n      // flag is already set to the correct starting point for this assertion.\n\n\n      var origLockSsfi = flag(this, 'lockSsfi');\n      flag(this, 'lockSsfi', true);\n      var result = getter(_super).call(this);\n      flag(this, 'lockSsfi', origLockSsfi);\n\n      if (result !== undefined) {\n        return result;\n      }\n\n      var newAssertion = new chai.Assertion();\n      transferFlags(this, newAssertion);\n      return newAssertion;\n    },\n    configurable: true\n  });\n};","var config = require('../config');\n\nvar flag = require('./flag');\n\nvar getProperties = require('./getProperties');\n\nvar isProxyEnabled = require('./isProxyEnabled');\n/*!\n * Chai - proxify utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .proxify(object)\n *\n * Return a proxy of given object that throws an error when a non-existent\n * property is read. By default, the root cause is assumed to be a misspelled\n * property, and thus an attempt is made to offer a reasonable suggestion from\n * the list of existing properties. However, if a nonChainableMethodName is\n * provided, then the root cause is instead a failure to invoke a non-chainable\n * method prior to reading the non-existent property.\n *\n * If proxies are unsupported or disabled via the user's Chai config, then\n * return object without modification.\n *\n * @param {Object} obj\n * @param {String} nonChainableMethodName\n * @namespace Utils\n * @name proxify\n */\n\n\nvar builtins = ['__flags', '__methods', '_obj', 'assert'];\n\nmodule.exports = function proxify(obj, nonChainableMethodName) {\n  if (!isProxyEnabled()) return obj;\n  return new Proxy(obj, {\n    get: function proxyGetter(target, property) {\n      // This check is here because we should not throw errors on Symbol properties\n      // such as `Symbol.toStringTag`.\n      // The values for which an error should be thrown can be configured using\n      // the `config.proxyExcludedKeys` setting.\n      if (typeof property === 'string' && config.proxyExcludedKeys.indexOf(property) === -1 && !Reflect.has(target, property)) {\n        // Special message for invalid property access of non-chainable methods.\n        if (nonChainableMethodName) {\n          throw Error('Invalid Chai property: ' + nonChainableMethodName + '.' + property + '. See docs for proper usage of \"' + nonChainableMethodName + '\".');\n        } // If the property is reasonably close to an existing Chai property,\n        // suggest that property to the user. Only suggest properties with a\n        // distance less than 4.\n\n\n        var suggestion = null;\n        var suggestionDistance = 4;\n        getProperties(target).forEach(function (prop) {\n          if (!Object.prototype.hasOwnProperty(prop) && builtins.indexOf(prop) === -1) {\n            var dist = stringDistanceCapped(property, prop, suggestionDistance);\n\n            if (dist < suggestionDistance) {\n              suggestion = prop;\n              suggestionDistance = dist;\n            }\n          }\n        });\n\n        if (suggestion !== null) {\n          throw Error('Invalid Chai property: ' + property + '. Did you mean \"' + suggestion + '\"?');\n        } else {\n          throw Error('Invalid Chai property: ' + property);\n        }\n      } // Use this proxy getter as the starting point for removing implementation\n      // frames from the stack trace of a failed assertion. For property\n      // assertions, this prevents the proxy getter from showing up in the stack\n      // trace since it's invoked before the property getter. For method and\n      // chainable method assertions, this flag will end up getting changed to\n      // the method wrapper, which is good since this frame will no longer be in\n      // the stack once the method is invoked. Note that Chai builtin assertion\n      // properties such as `__flags` are skipped since this is only meant to\n      // capture the starting point of an assertion. This step is also skipped\n      // if the `lockSsfi` flag is set, thus indicating that this assertion is\n      // being called from within another assertion. In that case, the `ssfi`\n      // flag is already set to the outer assertion's starting point.\n\n\n      if (builtins.indexOf(property) === -1 && !flag(target, 'lockSsfi')) {\n        flag(target, 'ssfi', proxyGetter);\n      }\n\n      return Reflect.get(target, property);\n    }\n  });\n};\n/**\n * # stringDistanceCapped(strA, strB, cap)\n * Return the Levenshtein distance between two strings, but no more than cap.\n * @param {string} strA\n * @param {string} strB\n * @param {number} number\n * @return {number} min(string distance between strA and strB, cap)\n * @api private\n */\n\n\nfunction stringDistanceCapped(strA, strB, cap) {\n  if (Math.abs(strA.length - strB.length) >= cap) {\n    return cap;\n  }\n\n  var memo = []; // `memo` is a two-dimensional array containing distances.\n  // memo[i][j] is the distance between strA.slice(0, i) and\n  // strB.slice(0, j).\n\n  for (var i = 0; i <= strA.length; i++) {\n    memo[i] = Array(strB.length + 1).fill(0);\n    memo[i][0] = i;\n  }\n\n  for (var j = 0; j < strB.length; j++) {\n    memo[0][j] = j;\n  }\n\n  for (var i = 1; i <= strA.length; i++) {\n    var ch = strA.charCodeAt(i - 1);\n\n    for (var j = 1; j <= strB.length; j++) {\n      if (Math.abs(i - j) >= cap) {\n        memo[i][j] = cap;\n        continue;\n      }\n\n      memo[i][j] = Math.min(memo[i - 1][j] + 1, memo[i][j - 1] + 1, memo[i - 1][j - 1] + (ch === strB.charCodeAt(j - 1) ? 0 : 1));\n    }\n  }\n\n  return memo[strA.length][strB.length];\n}","/*!\n * Chai - test utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\nvar flag = require('./flag');\n/**\n * ### .test(object, expression)\n *\n * Test and object for expression.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name test\n */\n\n\nmodule.exports = function test(obj, args) {\n  var negate = flag(obj, 'negate'),\n      expr = args[0];\n  return negate ? !expr : expr;\n};","/*!\n * Chai - transferFlags utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .transferFlags(assertion, object, includeAll = true)\n *\n * Transfer all the flags for `assertion` to `object`. If\n * `includeAll` is set to `false`, then the base Chai\n * assertion flags (namely `object`, `ssfi`, `lockSsfi`,\n * and `message`) will not be transferred.\n *\n *\n *     var newAssertion = new Assertion();\n *     utils.transferFlags(assertion, newAssertion);\n *\n *     var anotherAssertion = new Assertion(myObj);\n *     utils.transferFlags(assertion, anotherAssertion, false);\n *\n * @param {Assertion} assertion the assertion to transfer the flags from\n * @param {Object} object the object to transfer the flags to; usually a new assertion\n * @param {Boolean} includeAll\n * @namespace Utils\n * @name transferFlags\n * @api private\n */\nmodule.exports = function transferFlags(assertion, object, includeAll) {\n  var flags = assertion.__flags || (assertion.__flags = Object.create(null));\n\n  if (!object.__flags) {\n    object.__flags = Object.create(null);\n  }\n\n  includeAll = arguments.length === 3 ? includeAll : true;\n\n  for (var flag in flags) {\n    if (includeAll || flag !== 'object' && flag !== 'ssfi' && flag !== 'lockSsfi' && flag != 'message') {\n      object.__flags[flag] = flags[flag];\n    }\n  }\n};","'use strict';\n/* !\n * Chai - checkError utility\n * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .checkError\n *\n * Checks that an error conforms to a given set of criteria and/or retrieves information about it.\n *\n * @api public\n */\n\n/**\n * ### .compatibleInstance(thrown, errorLike)\n *\n * Checks if two instances are compatible (strict equal).\n * Returns false if errorLike is not an instance of Error, because instances\n * can only be compatible if they're both error instances.\n *\n * @name compatibleInstance\n * @param {Error} thrown error\n * @param {Error|ErrorConstructor} errorLike object to compare against\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleInstance(thrown, errorLike) {\n  return errorLike instanceof Error && thrown === errorLike;\n}\n/**\n * ### .compatibleConstructor(thrown, errorLike)\n *\n * Checks if two constructors are compatible.\n * This function can receive either an error constructor or\n * an error instance as the `errorLike` argument.\n * Constructors are compatible if they're the same or if one is\n * an instance of another.\n *\n * @name compatibleConstructor\n * @param {Error} thrown error\n * @param {Error|ErrorConstructor} errorLike object to compare against\n * @namespace Utils\n * @api public\n */\n\n\nfunction compatibleConstructor(thrown, errorLike) {\n  if (errorLike instanceof Error) {\n    // If `errorLike` is an instance of any error we compare their constructors\n    return thrown.constructor === errorLike.constructor || thrown instanceof errorLike.constructor;\n  } else if (errorLike.prototype instanceof Error || errorLike === Error) {\n    // If `errorLike` is a constructor that inherits from Error, we compare `thrown` to `errorLike` directly\n    return thrown.constructor === errorLike || thrown instanceof errorLike;\n  }\n\n  return false;\n}\n/**\n * ### .compatibleMessage(thrown, errMatcher)\n *\n * Checks if an error's message is compatible with a matcher (String or RegExp).\n * If the message contains the String or passes the RegExp test,\n * it is considered compatible.\n *\n * @name compatibleMessage\n * @param {Error} thrown error\n * @param {String|RegExp} errMatcher to look for into the message\n * @namespace Utils\n * @api public\n */\n\n\nfunction compatibleMessage(thrown, errMatcher) {\n  var comparisonString = typeof thrown === 'string' ? thrown : thrown.message;\n\n  if (errMatcher instanceof RegExp) {\n    return errMatcher.test(comparisonString);\n  } else if (typeof errMatcher === 'string') {\n    return comparisonString.indexOf(errMatcher) !== -1; // eslint-disable-line no-magic-numbers\n  }\n\n  return false;\n}\n/**\n * ### .getFunctionName(constructorFn)\n *\n * Returns the name of a function.\n * This also includes a polyfill function if `constructorFn.name` is not defined.\n *\n * @name getFunctionName\n * @param {Function} constructorFn\n * @namespace Utils\n * @api private\n */\n\n\nvar functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\(\\/]+)/;\n\nfunction getFunctionName(constructorFn) {\n  var name = '';\n\n  if (typeof constructorFn.name === 'undefined') {\n    // Here we run a polyfill if constructorFn.name is not defined\n    var match = String(constructorFn).match(functionNameMatch);\n\n    if (match) {\n      name = match[1];\n    }\n  } else {\n    name = constructorFn.name;\n  }\n\n  return name;\n}\n/**\n * ### .getConstructorName(errorLike)\n *\n * Gets the constructor name for an Error instance or constructor itself.\n *\n * @name getConstructorName\n * @param {Error|ErrorConstructor} errorLike\n * @namespace Utils\n * @api public\n */\n\n\nfunction getConstructorName(errorLike) {\n  var constructorName = errorLike;\n\n  if (errorLike instanceof Error) {\n    constructorName = getFunctionName(errorLike.constructor);\n  } else if (typeof errorLike === 'function') {\n    // If `err` is not an instance of Error it is an error constructor itself or another function.\n    // If we've got a common function we get its name, otherwise we may need to create a new instance\n    // of the error just in case it's a poorly-constructed error. Please see chaijs/chai/issues/45 to know more.\n    constructorName = getFunctionName(errorLike).trim() || getFunctionName(new errorLike()); // eslint-disable-line new-cap\n  }\n\n  return constructorName;\n}\n/**\n * ### .getMessage(errorLike)\n *\n * Gets the error message from an error.\n * If `err` is a String itself, we return it.\n * If the error has no message, we return an empty string.\n *\n * @name getMessage\n * @param {Error|String} errorLike\n * @namespace Utils\n * @api public\n */\n\n\nfunction getMessage(errorLike) {\n  var msg = '';\n\n  if (errorLike && errorLike.message) {\n    msg = errorLike.message;\n  } else if (typeof errorLike === 'string') {\n    msg = errorLike;\n  }\n\n  return msg;\n}\n\nmodule.exports = {\n  compatibleInstance: compatibleInstance,\n  compatibleConstructor: compatibleConstructor,\n  compatibleMessage: compatibleMessage,\n  getMessage: getMessage,\n  getConstructorName: getConstructorName\n};","'use strict';\n/* globals Symbol: false, Uint8Array: false, WeakMap: false */\n\n/*!\n * deep-eql\n * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar type = require('type-detect');\n\nfunction FakeMap() {\n  this._key = 'chai/deep-eql__' + Math.random() + Date.now();\n}\n\nFakeMap.prototype = {\n  get: function getMap(key) {\n    return key[this._key];\n  },\n  set: function setMap(key, value) {\n    if (Object.isExtensible(key)) {\n      Object.defineProperty(key, this._key, {\n        value: value,\n        configurable: true\n      });\n    }\n  }\n};\nvar MemoizeMap = typeof WeakMap === 'function' ? WeakMap : FakeMap;\n/*!\n * Check to see if the MemoizeMap has recorded a result of the two operands\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @returns {Boolean|null} result\n*/\n\nfunction memoizeCompare(leftHandOperand, rightHandOperand, memoizeMap) {\n  // Technically, WeakMap keys can *only* be objects, not primitives.\n  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    return null;\n  }\n\n  var leftHandMap = memoizeMap.get(leftHandOperand);\n\n  if (leftHandMap) {\n    var result = leftHandMap.get(rightHandOperand);\n\n    if (typeof result === 'boolean') {\n      return result;\n    }\n  }\n\n  return null;\n}\n/*!\n * Set the result of the equality into the MemoizeMap\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @param {Boolean} result\n*/\n\n\nfunction memoizeSet(leftHandOperand, rightHandOperand, memoizeMap, result) {\n  // Technically, WeakMap keys can *only* be objects, not primitives.\n  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    return;\n  }\n\n  var leftHandMap = memoizeMap.get(leftHandOperand);\n\n  if (leftHandMap) {\n    leftHandMap.set(rightHandOperand, result);\n  } else {\n    leftHandMap = new MemoizeMap();\n    leftHandMap.set(rightHandOperand, result);\n    memoizeMap.set(leftHandOperand, leftHandMap);\n  }\n}\n/*!\n * Primary Export\n */\n\n\nmodule.exports = deepEqual;\nmodule.exports.MemoizeMap = MemoizeMap;\n/**\n * Assert deeply nested sameValue equality between two objects of any type.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n */\n\nfunction deepEqual(leftHandOperand, rightHandOperand, options) {\n  // If we have a comparator, we can't assume anything; so bail to its check first.\n  if (options && options.comparator) {\n    return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);\n  }\n\n  var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);\n\n  if (simpleResult !== null) {\n    return simpleResult;\n  } // Deeper comparisons are pushed through to a larger function\n\n\n  return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);\n}\n/**\n * Many comparisons can be canceled out early via simple equality or primitive checks.\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @return {Boolean|null} equal match\n */\n\n\nfunction simpleEqual(leftHandOperand, rightHandOperand) {\n  // Equal references (except for Numbers) can be returned early\n  if (leftHandOperand === rightHandOperand) {\n    // Handle +-0 cases\n    return leftHandOperand !== 0 || 1 / leftHandOperand === 1 / rightHandOperand;\n  } // handle NaN cases\n\n\n  if (leftHandOperand !== leftHandOperand && // eslint-disable-line no-self-compare\n  rightHandOperand !== rightHandOperand // eslint-disable-line no-self-compare\n  ) {\n      return true;\n    } // Anything that is not an 'object', i.e. symbols, functions, booleans, numbers,\n  // strings, and undefined, can be compared by reference.\n\n\n  if (isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    // Easy out b/c it would have passed the first equality check\n    return false;\n  }\n\n  return null;\n}\n/*!\n * The main logic of the `deepEqual` function.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n*/\n\n\nfunction extensiveDeepEqual(leftHandOperand, rightHandOperand, options) {\n  options = options || {};\n  options.memoize = options.memoize === false ? false : options.memoize || new MemoizeMap();\n  var comparator = options && options.comparator; // Check if a memoized result exists.\n\n  var memoizeResultLeft = memoizeCompare(leftHandOperand, rightHandOperand, options.memoize);\n\n  if (memoizeResultLeft !== null) {\n    return memoizeResultLeft;\n  }\n\n  var memoizeResultRight = memoizeCompare(rightHandOperand, leftHandOperand, options.memoize);\n\n  if (memoizeResultRight !== null) {\n    return memoizeResultRight;\n  } // If a comparator is present, use it.\n\n\n  if (comparator) {\n    var comparatorResult = comparator(leftHandOperand, rightHandOperand); // Comparators may return null, in which case we want to go back to default behavior.\n\n    if (comparatorResult === false || comparatorResult === true) {\n      memoizeSet(leftHandOperand, rightHandOperand, options.memoize, comparatorResult);\n      return comparatorResult;\n    } // To allow comparators to override *any* behavior, we ran them first. Since it didn't decide\n    // what to do, we need to make sure to return the basic tests first before we move on.\n\n\n    var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);\n\n    if (simpleResult !== null) {\n      // Don't memoize this, it takes longer to set/retrieve than to just compare.\n      return simpleResult;\n    }\n  }\n\n  var leftHandType = type(leftHandOperand);\n\n  if (leftHandType !== type(rightHandOperand)) {\n    memoizeSet(leftHandOperand, rightHandOperand, options.memoize, false);\n    return false;\n  } // Temporarily set the operands in the memoize object to prevent blowing the stack\n\n\n  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, true);\n  var result = extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options);\n  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, result);\n  return result;\n}\n\nfunction extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options) {\n  switch (leftHandType) {\n    case 'String':\n    case 'Number':\n    case 'Boolean':\n    case 'Date':\n      // If these types are their instance types (e.g. `new Number`) then re-deepEqual against their values\n      return deepEqual(leftHandOperand.valueOf(), rightHandOperand.valueOf());\n\n    case 'Promise':\n    case 'Symbol':\n    case 'function':\n    case 'WeakMap':\n    case 'WeakSet':\n    case 'Error':\n      return leftHandOperand === rightHandOperand;\n\n    case 'Arguments':\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n    case 'Array':\n      return iterableEqual(leftHandOperand, rightHandOperand, options);\n\n    case 'RegExp':\n      return regexpEqual(leftHandOperand, rightHandOperand);\n\n    case 'Generator':\n      return generatorEqual(leftHandOperand, rightHandOperand, options);\n\n    case 'DataView':\n      return iterableEqual(new Uint8Array(leftHandOperand.buffer), new Uint8Array(rightHandOperand.buffer), options);\n\n    case 'ArrayBuffer':\n      return iterableEqual(new Uint8Array(leftHandOperand), new Uint8Array(rightHandOperand), options);\n\n    case 'Set':\n      return entriesEqual(leftHandOperand, rightHandOperand, options);\n\n    case 'Map':\n      return entriesEqual(leftHandOperand, rightHandOperand, options);\n\n    default:\n      return objectEqual(leftHandOperand, rightHandOperand, options);\n  }\n}\n/*!\n * Compare two Regular Expressions for equality.\n *\n * @param {RegExp} leftHandOperand\n * @param {RegExp} rightHandOperand\n * @return {Boolean} result\n */\n\n\nfunction regexpEqual(leftHandOperand, rightHandOperand) {\n  return leftHandOperand.toString() === rightHandOperand.toString();\n}\n/*!\n * Compare two Sets/Maps for equality. Faster than other equality functions.\n *\n * @param {Set} leftHandOperand\n * @param {Set} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\n\nfunction entriesEqual(leftHandOperand, rightHandOperand, options) {\n  // IE11 doesn't support Set#entries or Set#@@iterator, so we need manually populate using Set#forEach\n  if (leftHandOperand.size !== rightHandOperand.size) {\n    return false;\n  }\n\n  if (leftHandOperand.size === 0) {\n    return true;\n  }\n\n  var leftHandItems = [];\n  var rightHandItems = [];\n  leftHandOperand.forEach(function gatherEntries(key, value) {\n    leftHandItems.push([key, value]);\n  });\n  rightHandOperand.forEach(function gatherEntries(key, value) {\n    rightHandItems.push([key, value]);\n  });\n  return iterableEqual(leftHandItems.sort(), rightHandItems.sort(), options);\n}\n/*!\n * Simple equality for flat iterable objects such as Arrays, TypedArrays or Node.js buffers.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\n\nfunction iterableEqual(leftHandOperand, rightHandOperand, options) {\n  var length = leftHandOperand.length;\n\n  if (length !== rightHandOperand.length) {\n    return false;\n  }\n\n  if (length === 0) {\n    return true;\n  }\n\n  var index = -1;\n\n  while (++index < length) {\n    if (deepEqual(leftHandOperand[index], rightHandOperand[index], options) === false) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/*!\n * Simple equality for generator objects such as those returned by generator functions.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\n\nfunction generatorEqual(leftHandOperand, rightHandOperand, options) {\n  return iterableEqual(getGeneratorEntries(leftHandOperand), getGeneratorEntries(rightHandOperand), options);\n}\n/*!\n * Determine if the given object has an @@iterator function.\n *\n * @param {Object} target\n * @return {Boolean} `true` if the object has an @@iterator function.\n */\n\n\nfunction hasIteratorFunction(target) {\n  return typeof Symbol !== 'undefined' && typeof target === 'object' && typeof Symbol.iterator !== 'undefined' && typeof target[Symbol.iterator] === 'function';\n}\n/*!\n * Gets all iterator entries from the given Object. If the Object has no @@iterator function, returns an empty array.\n * This will consume the iterator - which could have side effects depending on the @@iterator implementation.\n *\n * @param {Object} target\n * @returns {Array} an array of entries from the @@iterator function\n */\n\n\nfunction getIteratorEntries(target) {\n  if (hasIteratorFunction(target)) {\n    try {\n      return getGeneratorEntries(target[Symbol.iterator]());\n    } catch (iteratorError) {\n      return [];\n    }\n  }\n\n  return [];\n}\n/*!\n * Gets all entries from a Generator. This will consume the generator - which could have side effects.\n *\n * @param {Generator} target\n * @returns {Array} an array of entries from the Generator.\n */\n\n\nfunction getGeneratorEntries(generator) {\n  var generatorResult = generator.next();\n  var accumulator = [generatorResult.value];\n\n  while (generatorResult.done === false) {\n    generatorResult = generator.next();\n    accumulator.push(generatorResult.value);\n  }\n\n  return accumulator;\n}\n/*!\n * Gets all own and inherited enumerable keys from a target.\n *\n * @param {Object} target\n * @returns {Array} an array of own and inherited enumerable keys from the target.\n */\n\n\nfunction getEnumerableKeys(target) {\n  var keys = [];\n\n  for (var key in target) {\n    keys.push(key);\n  }\n\n  return keys;\n}\n/*!\n * Determines if two objects have matching values, given a set of keys. Defers to deepEqual for the equality check of\n * each key. If any value of the given key is not equal, the function will return false (early).\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Array} keys An array of keys to compare the values of leftHandOperand and rightHandOperand against\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\n\nfunction keysEqual(leftHandOperand, rightHandOperand, keys, options) {\n  var length = keys.length;\n\n  if (length === 0) {\n    return true;\n  }\n\n  for (var i = 0; i < length; i += 1) {\n    if (deepEqual(leftHandOperand[keys[i]], rightHandOperand[keys[i]], options) === false) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/*!\n * Recursively check the equality of two Objects. Once basic sameness has been established it will defer to `deepEqual`\n * for each enumerable key in the object.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\n\nfunction objectEqual(leftHandOperand, rightHandOperand, options) {\n  var leftHandKeys = getEnumerableKeys(leftHandOperand);\n  var rightHandKeys = getEnumerableKeys(rightHandOperand);\n\n  if (leftHandKeys.length && leftHandKeys.length === rightHandKeys.length) {\n    leftHandKeys.sort();\n    rightHandKeys.sort();\n\n    if (iterableEqual(leftHandKeys, rightHandKeys) === false) {\n      return false;\n    }\n\n    return keysEqual(leftHandOperand, rightHandOperand, leftHandKeys, options);\n  }\n\n  var leftHandEntries = getIteratorEntries(leftHandOperand);\n  var rightHandEntries = getIteratorEntries(rightHandOperand);\n\n  if (leftHandEntries.length && leftHandEntries.length === rightHandEntries.length) {\n    leftHandEntries.sort();\n    rightHandEntries.sort();\n    return iterableEqual(leftHandEntries, rightHandEntries, options);\n  }\n\n  if (leftHandKeys.length === 0 && leftHandEntries.length === 0 && rightHandKeys.length === 0 && rightHandEntries.length === 0) {\n    return true;\n  }\n\n  return false;\n}\n/*!\n * Returns true if the argument is a primitive.\n *\n * This intentionally returns true for all objects that can be compared by reference,\n * including functions and symbols.\n *\n * @param {Mixed} value\n * @return {Boolean} result\n */\n\n\nfunction isPrimitive(value) {\n  return value === null || typeof value !== 'object';\n}","'use strict';\n/* !\n * Chai - getFuncName utility\n * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getFuncName(constructorFn)\n *\n * Returns the name of a function.\n * When a non-function instance is passed, returns `null`.\n * This also includes a polyfill function if `aFunc.name` is not defined.\n *\n * @name getFuncName\n * @param {Function} funct\n * @namespace Utils\n * @api public\n */\n\nvar toString = Function.prototype.toString;\nvar functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\s\\(\\/]+)/;\n\nfunction getFuncName(aFunc) {\n  if (typeof aFunc !== 'function') {\n    return null;\n  }\n\n  var name = '';\n\n  if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {\n    // Here we run a polyfill if Function does not support the `name` property and if aFunc.name is not defined\n    var match = toString.call(aFunc).match(functionNameMatch);\n\n    if (match) {\n      name = match[1];\n    }\n  } else {\n    // If we've got a `name` property we just use it\n    name = aFunc.name;\n  }\n\n  return name;\n}\n\nmodule.exports = getFuncName;","'use strict';\n/* !\n * Chai - pathval utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * @see https://github.com/logicalparadox/filtr\n * MIT Licensed\n */\n\n/**\n * ### .hasProperty(object, name)\n *\n * This allows checking whether an object has own\n * or inherited from prototype chain named property.\n *\n * Basically does the same thing as the `in`\n * operator but works properly with null/undefined values\n * and other primitives.\n *\n *     var obj = {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *\n * The following would be the results.\n *\n *     hasProperty(obj, 'str');  // true\n *     hasProperty(obj, 'constructor');  // true\n *     hasProperty(obj, 'bar');  // false\n *\n *     hasProperty(obj.str, 'length'); // true\n *     hasProperty(obj.str, 1);  // true\n *     hasProperty(obj.str, 5);  // false\n *\n *     hasProperty(obj.arr, 'length');  // true\n *     hasProperty(obj.arr, 2);  // true\n *     hasProperty(obj.arr, 3);  // false\n *\n * @param {Object} object\n * @param {String|Symbol} name\n * @returns {Boolean} whether it exists\n * @namespace Utils\n * @name hasProperty\n * @api public\n */\n\nfunction hasProperty(obj, name) {\n  if (typeof obj === 'undefined' || obj === null) {\n    return false;\n  } // The `in` operator does not work with primitives.\n\n\n  return name in Object(obj);\n}\n/* !\n * ## parsePath(path)\n *\n * Helper function used to parse string object\n * paths. Use in conjunction with `internalGetPathValue`.\n *\n *      var parsed = parsePath('myobject.property.subprop');\n *\n * ### Paths:\n *\n * * Can be infinitely deep and nested.\n * * Arrays are also valid using the formal `myobject.document[3].property`.\n * * Literal dots and brackets (not delimiter) must be backslash-escaped.\n *\n * @param {String} path\n * @returns {Object} parsed\n * @api private\n */\n\n\nfunction parsePath(path) {\n  var str = path.replace(/([^\\\\])\\[/g, '$1.[');\n  var parts = str.match(/(\\\\\\.|[^.]+?)+/g);\n  return parts.map(function mapMatches(value) {\n    if (value === 'constructor' || value === '__proto__' || value === 'prototype') {\n      return {};\n    }\n\n    var regexp = /^\\[(\\d+)\\]$/;\n    var mArr = regexp.exec(value);\n    var parsed = null;\n\n    if (mArr) {\n      parsed = {\n        i: parseFloat(mArr[1])\n      };\n    } else {\n      parsed = {\n        p: value.replace(/\\\\([.[\\]])/g, '$1')\n      };\n    }\n\n    return parsed;\n  });\n}\n/* !\n * ## internalGetPathValue(obj, parsed[, pathDepth])\n *\n * Helper companion function for `.parsePath` that returns\n * the value located at the parsed address.\n *\n *      var value = getPathValue(obj, parsed);\n *\n * @param {Object} object to search against\n * @param {Object} parsed definition from `parsePath`.\n * @param {Number} depth (nesting level) of the property we want to retrieve\n * @returns {Object|Undefined} value\n * @api private\n */\n\n\nfunction internalGetPathValue(obj, parsed, pathDepth) {\n  var temporaryValue = obj;\n  var res = null;\n  pathDepth = typeof pathDepth === 'undefined' ? parsed.length : pathDepth;\n\n  for (var i = 0; i < pathDepth; i++) {\n    var part = parsed[i];\n\n    if (temporaryValue) {\n      if (typeof part.p === 'undefined') {\n        temporaryValue = temporaryValue[part.i];\n      } else {\n        temporaryValue = temporaryValue[part.p];\n      }\n\n      if (i === pathDepth - 1) {\n        res = temporaryValue;\n      }\n    }\n  }\n\n  return res;\n}\n/* !\n * ## internalSetPathValue(obj, value, parsed)\n *\n * Companion function for `parsePath` that sets\n * the value located at a parsed address.\n *\n *  internalSetPathValue(obj, 'value', parsed);\n *\n * @param {Object} object to search and define on\n * @param {*} value to use upon set\n * @param {Object} parsed definition from `parsePath`\n * @api private\n */\n\n\nfunction internalSetPathValue(obj, val, parsed) {\n  var tempObj = obj;\n  var pathDepth = parsed.length;\n  var part = null; // Here we iterate through every part of the path\n\n  for (var i = 0; i < pathDepth; i++) {\n    var propName = null;\n    var propVal = null;\n    part = parsed[i]; // If it's the last part of the path, we set the 'propName' value with the property name\n\n    if (i === pathDepth - 1) {\n      propName = typeof part.p === 'undefined' ? part.i : part.p; // Now we set the property with the name held by 'propName' on object with the desired val\n\n      tempObj[propName] = val;\n    } else if (typeof part.p !== 'undefined' && tempObj[part.p]) {\n      tempObj = tempObj[part.p];\n    } else if (typeof part.i !== 'undefined' && tempObj[part.i]) {\n      tempObj = tempObj[part.i];\n    } else {\n      // If the obj doesn't have the property we create one with that name to define it\n      var next = parsed[i + 1]; // Here we set the name of the property which will be defined\n\n      propName = typeof part.p === 'undefined' ? part.i : part.p; // Here we decide if this property will be an array or a new object\n\n      propVal = typeof next.p === 'undefined' ? [] : {};\n      tempObj[propName] = propVal;\n      tempObj = tempObj[propName];\n    }\n  }\n}\n/**\n * ### .getPathInfo(object, path)\n *\n * This allows the retrieval of property info in an\n * object given a string path.\n *\n * The path info consists of an object with the\n * following properties:\n *\n * * parent - The parent object of the property referenced by `path`\n * * name - The name of the final property, a number if it was an array indexer\n * * value - The value of the property, if it exists, otherwise `undefined`\n * * exists - Whether the property exists or not\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} info\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\n\nfunction getPathInfo(obj, path) {\n  var parsed = parsePath(path);\n  var last = parsed[parsed.length - 1];\n  var info = {\n    parent: parsed.length > 1 ? internalGetPathValue(obj, parsed, parsed.length - 1) : obj,\n    name: last.p || last.i,\n    value: internalGetPathValue(obj, parsed)\n  };\n  info.exists = hasProperty(info.parent, info.name);\n  return info;\n}\n/**\n * ### .getPathValue(object, path)\n *\n * This allows the retrieval of values in an\n * object given a string path.\n *\n *     var obj = {\n *         prop1: {\n *             arr: ['a', 'b', 'c']\n *           , str: 'Hello'\n *         }\n *       , prop2: {\n *             arr: [ { nested: 'Universe' } ]\n *           , str: 'Hello again!'\n *         }\n *     }\n *\n * The following would be the results.\n *\n *     getPathValue(obj, 'prop1.str'); // Hello\n *     getPathValue(obj, 'prop1.att[2]'); // b\n *     getPathValue(obj, 'prop2.arr[0].nested'); // Universe\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} value or `undefined`\n * @namespace Utils\n * @name getPathValue\n * @api public\n */\n\n\nfunction getPathValue(obj, path) {\n  var info = getPathInfo(obj, path);\n  return info.value;\n}\n/**\n * ### .setPathValue(object, path, value)\n *\n * Define the value in an object at a given string path.\n *\n * ```js\n * var obj = {\n *     prop1: {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *   , prop2: {\n *         arr: [ { nested: 'Universe' } ]\n *       , str: 'Hello again!'\n *     }\n * };\n * ```\n *\n * The following would be acceptable.\n *\n * ```js\n * var properties = require('tea-properties');\n * properties.set(obj, 'prop1.str', 'Hello Universe!');\n * properties.set(obj, 'prop1.arr[2]', 'B');\n * properties.set(obj, 'prop2.arr[0].nested.value', { hello: 'universe' });\n * ```\n *\n * @param {Object} object\n * @param {String} path\n * @param {Mixed} value\n * @api private\n */\n\n\nfunction setPathValue(obj, path, val) {\n  var parsed = parsePath(path);\n  internalSetPathValue(obj, val, parsed);\n  return obj;\n}\n\nmodule.exports = {\n  hasProperty: hasProperty,\n  getPathInfo: getPathInfo,\n  getPathValue: getPathValue,\n  setPathValue: setPathValue\n};","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.typeDetect = factory();\n})(this, function () {\n  'use strict';\n  /* !\n   * type-detect\n   * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n   * MIT Licensed\n   */\n\n  var promiseExists = typeof Promise === 'function';\n  /* eslint-disable no-undef */\n\n  var globalObject = typeof self === 'object' ? self : global; // eslint-disable-line id-blacklist\n\n  var symbolExists = typeof Symbol !== 'undefined';\n  var mapExists = typeof Map !== 'undefined';\n  var setExists = typeof Set !== 'undefined';\n  var weakMapExists = typeof WeakMap !== 'undefined';\n  var weakSetExists = typeof WeakSet !== 'undefined';\n  var dataViewExists = typeof DataView !== 'undefined';\n  var symbolIteratorExists = symbolExists && typeof Symbol.iterator !== 'undefined';\n  var symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag !== 'undefined';\n  var setEntriesExists = setExists && typeof Set.prototype.entries === 'function';\n  var mapEntriesExists = mapExists && typeof Map.prototype.entries === 'function';\n  var setIteratorPrototype = setEntriesExists && Object.getPrototypeOf(new Set().entries());\n  var mapIteratorPrototype = mapEntriesExists && Object.getPrototypeOf(new Map().entries());\n  var arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';\n  var arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]());\n  var stringIteratorExists = symbolIteratorExists && typeof String.prototype[Symbol.iterator] === 'function';\n  var stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(''[Symbol.iterator]());\n  var toStringLeftSliceLength = 8;\n  var toStringRightSliceLength = -1;\n  /**\n   * ### typeOf (obj)\n   *\n   * Uses `Object.prototype.toString` to determine the type of an object,\n   * normalising behaviour across engine versions & well optimised.\n   *\n   * @param {Mixed} object\n   * @return {String} object type\n   * @api public\n   */\n\n  function typeDetect(obj) {\n    /* ! Speed optimisation\n     * Pre:\n     *   string literal     x 3,039,035 ops/sec ±1.62% (78 runs sampled)\n     *   boolean literal    x 1,424,138 ops/sec ±4.54% (75 runs sampled)\n     *   number literal     x 1,653,153 ops/sec ±1.91% (82 runs sampled)\n     *   undefined          x 9,978,660 ops/sec ±1.92% (75 runs sampled)\n     *   function           x 2,556,769 ops/sec ±1.73% (77 runs sampled)\n     * Post:\n     *   string literal     x 38,564,796 ops/sec ±1.15% (79 runs sampled)\n     *   boolean literal    x 31,148,940 ops/sec ±1.10% (79 runs sampled)\n     *   number literal     x 32,679,330 ops/sec ±1.90% (78 runs sampled)\n     *   undefined          x 32,363,368 ops/sec ±1.07% (82 runs sampled)\n     *   function           x 31,296,870 ops/sec ±0.96% (83 runs sampled)\n     */\n    var typeofObj = typeof obj;\n\n    if (typeofObj !== 'object') {\n      return typeofObj;\n    }\n    /* ! Speed optimisation\n     * Pre:\n     *   null               x 28,645,765 ops/sec ±1.17% (82 runs sampled)\n     * Post:\n     *   null               x 36,428,962 ops/sec ±1.37% (84 runs sampled)\n     */\n\n\n    if (obj === null) {\n      return 'null';\n    }\n    /* ! Spec Conformance\n     * Test: `Object.prototype.toString.call(window)``\n     *  - Node === \"[object global]\"\n     *  - Chrome === \"[object global]\"\n     *  - Firefox === \"[object Window]\"\n     *  - PhantomJS === \"[object Window]\"\n     *  - Safari === \"[object Window]\"\n     *  - IE 11 === \"[object Window]\"\n     *  - IE Edge === \"[object Window]\"\n     * Test: `Object.prototype.toString.call(this)``\n     *  - Chrome Worker === \"[object global]\"\n     *  - Firefox Worker === \"[object DedicatedWorkerGlobalScope]\"\n     *  - Safari Worker === \"[object DedicatedWorkerGlobalScope]\"\n     *  - IE 11 Worker === \"[object WorkerGlobalScope]\"\n     *  - IE Edge Worker === \"[object WorkerGlobalScope]\"\n     */\n\n\n    if (obj === globalObject) {\n      return 'global';\n    }\n    /* ! Speed optimisation\n     * Pre:\n     *   array literal      x 2,888,352 ops/sec ±0.67% (82 runs sampled)\n     * Post:\n     *   array literal      x 22,479,650 ops/sec ±0.96% (81 runs sampled)\n     */\n\n\n    if (Array.isArray(obj) && (symbolToStringTagExists === false || !(Symbol.toStringTag in obj))) {\n      return 'Array';\n    } // Not caching existence of `window` and related properties due to potential\n    // for `window` to be unset before tests in quasi-browser environments.\n\n\n    if (typeof window === 'object' && window !== null) {\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/multipage/browsers.html#location)\n       * WhatWG HTML$7.7.3 - The `Location` interface\n       * Test: `Object.prototype.toString.call(window.location)``\n       *  - IE <=11 === \"[object Object]\"\n       *  - IE Edge <=13 === \"[object Object]\"\n       */\n      if (typeof window.location === 'object' && obj === window.location) {\n        return 'Location';\n      }\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/#document)\n       * WhatWG HTML$3.1.1 - The `Document` object\n       * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-26809268)\n       *       which suggests that browsers should use HTMLTableCellElement for\n       *       both TD and TH elements. WhatWG separates these.\n       *       WhatWG HTML states:\n       *         > For historical reasons, Window objects must also have a\n       *         > writable, configurable, non-enumerable property named\n       *         > HTMLDocument whose value is the Document interface object.\n       * Test: `Object.prototype.toString.call(document)``\n       *  - Chrome === \"[object HTMLDocument]\"\n       *  - Firefox === \"[object HTMLDocument]\"\n       *  - Safari === \"[object HTMLDocument]\"\n       *  - IE <=10 === \"[object Document]\"\n       *  - IE 11 === \"[object HTMLDocument]\"\n       *  - IE Edge <=13 === \"[object HTMLDocument]\"\n       */\n\n\n      if (typeof window.document === 'object' && obj === window.document) {\n        return 'Document';\n      }\n\n      if (typeof window.navigator === 'object') {\n        /* ! Spec Conformance\n         * (https://html.spec.whatwg.org/multipage/webappapis.html#mimetypearray)\n         * WhatWG HTML$8.6.1.5 - Plugins - Interface MimeTypeArray\n         * Test: `Object.prototype.toString.call(navigator.mimeTypes)``\n         *  - IE <=10 === \"[object MSMimeTypesCollection]\"\n         */\n        if (typeof window.navigator.mimeTypes === 'object' && obj === window.navigator.mimeTypes) {\n          return 'MimeTypeArray';\n        }\n        /* ! Spec Conformance\n         * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)\n         * WhatWG HTML$8.6.1.5 - Plugins - Interface PluginArray\n         * Test: `Object.prototype.toString.call(navigator.plugins)``\n         *  - IE <=10 === \"[object MSPluginsCollection]\"\n         */\n\n\n        if (typeof window.navigator.plugins === 'object' && obj === window.navigator.plugins) {\n          return 'PluginArray';\n        }\n      }\n\n      if ((typeof window.HTMLElement === 'function' || typeof window.HTMLElement === 'object') && obj instanceof window.HTMLElement) {\n        /* ! Spec Conformance\n        * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)\n        * WhatWG HTML$4.4.4 - The `blockquote` element - Interface `HTMLQuoteElement`\n        * Test: `Object.prototype.toString.call(document.createElement('blockquote'))``\n        *  - IE <=10 === \"[object HTMLBlockElement]\"\n        */\n        if (obj.tagName === 'BLOCKQUOTE') {\n          return 'HTMLQuoteElement';\n        }\n        /* ! Spec Conformance\n         * (https://html.spec.whatwg.org/#htmltabledatacellelement)\n         * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableDataCellElement`\n         * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n         *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)\n         *       which suggests that browsers should use HTMLTableCellElement for\n         *       both TD and TH elements. WhatWG separates these.\n         * Test: Object.prototype.toString.call(document.createElement('td'))\n         *  - Chrome === \"[object HTMLTableCellElement]\"\n         *  - Firefox === \"[object HTMLTableCellElement]\"\n         *  - Safari === \"[object HTMLTableCellElement]\"\n         */\n\n\n        if (obj.tagName === 'TD') {\n          return 'HTMLTableDataCellElement';\n        }\n        /* ! Spec Conformance\n         * (https://html.spec.whatwg.org/#htmltableheadercellelement)\n         * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableHeaderCellElement`\n         * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n         *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)\n         *       which suggests that browsers should use HTMLTableCellElement for\n         *       both TD and TH elements. WhatWG separates these.\n         * Test: Object.prototype.toString.call(document.createElement('th'))\n         *  - Chrome === \"[object HTMLTableCellElement]\"\n         *  - Firefox === \"[object HTMLTableCellElement]\"\n         *  - Safari === \"[object HTMLTableCellElement]\"\n         */\n\n\n        if (obj.tagName === 'TH') {\n          return 'HTMLTableHeaderCellElement';\n        }\n      }\n    }\n    /* ! Speed optimisation\n    * Pre:\n    *   Float64Array       x 625,644 ops/sec ±1.58% (80 runs sampled)\n    *   Float32Array       x 1,279,852 ops/sec ±2.91% (77 runs sampled)\n    *   Uint32Array        x 1,178,185 ops/sec ±1.95% (83 runs sampled)\n    *   Uint16Array        x 1,008,380 ops/sec ±2.25% (80 runs sampled)\n    *   Uint8Array         x 1,128,040 ops/sec ±2.11% (81 runs sampled)\n    *   Int32Array         x 1,170,119 ops/sec ±2.88% (80 runs sampled)\n    *   Int16Array         x 1,176,348 ops/sec ±5.79% (86 runs sampled)\n    *   Int8Array          x 1,058,707 ops/sec ±4.94% (77 runs sampled)\n    *   Uint8ClampedArray  x 1,110,633 ops/sec ±4.20% (80 runs sampled)\n    * Post:\n    *   Float64Array       x 7,105,671 ops/sec ±13.47% (64 runs sampled)\n    *   Float32Array       x 5,887,912 ops/sec ±1.46% (82 runs sampled)\n    *   Uint32Array        x 6,491,661 ops/sec ±1.76% (79 runs sampled)\n    *   Uint16Array        x 6,559,795 ops/sec ±1.67% (82 runs sampled)\n    *   Uint8Array         x 6,463,966 ops/sec ±1.43% (85 runs sampled)\n    *   Int32Array         x 5,641,841 ops/sec ±3.49% (81 runs sampled)\n    *   Int16Array         x 6,583,511 ops/sec ±1.98% (80 runs sampled)\n    *   Int8Array          x 6,606,078 ops/sec ±1.74% (81 runs sampled)\n    *   Uint8ClampedArray  x 6,602,224 ops/sec ±1.77% (83 runs sampled)\n    */\n\n\n    var stringTag = symbolToStringTagExists && obj[Symbol.toStringTag];\n\n    if (typeof stringTag === 'string') {\n      return stringTag;\n    }\n\n    var objPrototype = Object.getPrototypeOf(obj);\n    /* ! Speed optimisation\n    * Pre:\n    *   regex literal      x 1,772,385 ops/sec ±1.85% (77 runs sampled)\n    *   regex constructor  x 2,143,634 ops/sec ±2.46% (78 runs sampled)\n    * Post:\n    *   regex literal      x 3,928,009 ops/sec ±0.65% (78 runs sampled)\n    *   regex constructor  x 3,931,108 ops/sec ±0.58% (84 runs sampled)\n    */\n\n    if (objPrototype === RegExp.prototype) {\n      return 'RegExp';\n    }\n    /* ! Speed optimisation\n    * Pre:\n    *   date               x 2,130,074 ops/sec ±4.42% (68 runs sampled)\n    * Post:\n    *   date               x 3,953,779 ops/sec ±1.35% (77 runs sampled)\n    */\n\n\n    if (objPrototype === Date.prototype) {\n      return 'Date';\n    }\n    /* ! Spec Conformance\n     * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-promise.prototype-@@tostringtag)\n     * ES6$25.4.5.4 - Promise.prototype[@@toStringTag] should be \"Promise\":\n     * Test: `Object.prototype.toString.call(Promise.resolve())``\n     *  - Chrome <=47 === \"[object Object]\"\n     *  - Edge <=20 === \"[object Object]\"\n     *  - Firefox 29-Latest === \"[object Promise]\"\n     *  - Safari 7.1-Latest === \"[object Promise]\"\n     */\n\n\n    if (promiseExists && objPrototype === Promise.prototype) {\n      return 'Promise';\n    }\n    /* ! Speed optimisation\n    * Pre:\n    *   set                x 2,222,186 ops/sec ±1.31% (82 runs sampled)\n    * Post:\n    *   set                x 4,545,879 ops/sec ±1.13% (83 runs sampled)\n    */\n\n\n    if (setExists && objPrototype === Set.prototype) {\n      return 'Set';\n    }\n    /* ! Speed optimisation\n    * Pre:\n    *   map                x 2,396,842 ops/sec ±1.59% (81 runs sampled)\n    * Post:\n    *   map                x 4,183,945 ops/sec ±6.59% (82 runs sampled)\n    */\n\n\n    if (mapExists && objPrototype === Map.prototype) {\n      return 'Map';\n    }\n    /* ! Speed optimisation\n    * Pre:\n    *   weakset            x 1,323,220 ops/sec ±2.17% (76 runs sampled)\n    * Post:\n    *   weakset            x 4,237,510 ops/sec ±2.01% (77 runs sampled)\n    */\n\n\n    if (weakSetExists && objPrototype === WeakSet.prototype) {\n      return 'WeakSet';\n    }\n    /* ! Speed optimisation\n    * Pre:\n    *   weakmap            x 1,500,260 ops/sec ±2.02% (78 runs sampled)\n    * Post:\n    *   weakmap            x 3,881,384 ops/sec ±1.45% (82 runs sampled)\n    */\n\n\n    if (weakMapExists && objPrototype === WeakMap.prototype) {\n      return 'WeakMap';\n    }\n    /* ! Spec Conformance\n     * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-dataview.prototype-@@tostringtag)\n     * ES6$24.2.4.21 - DataView.prototype[@@toStringTag] should be \"DataView\":\n     * Test: `Object.prototype.toString.call(new DataView(new ArrayBuffer(1)))``\n     *  - Edge <=13 === \"[object Object]\"\n     */\n\n\n    if (dataViewExists && objPrototype === DataView.prototype) {\n      return 'DataView';\n    }\n    /* ! Spec Conformance\n     * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%mapiteratorprototype%-@@tostringtag)\n     * ES6$23.1.5.2.2 - %MapIteratorPrototype%[@@toStringTag] should be \"Map Iterator\":\n     * Test: `Object.prototype.toString.call(new Map().entries())``\n     *  - Edge <=13 === \"[object Object]\"\n     */\n\n\n    if (mapExists && objPrototype === mapIteratorPrototype) {\n      return 'Map Iterator';\n    }\n    /* ! Spec Conformance\n     * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%setiteratorprototype%-@@tostringtag)\n     * ES6$23.2.5.2.2 - %SetIteratorPrototype%[@@toStringTag] should be \"Set Iterator\":\n     * Test: `Object.prototype.toString.call(new Set().entries())``\n     *  - Edge <=13 === \"[object Object]\"\n     */\n\n\n    if (setExists && objPrototype === setIteratorPrototype) {\n      return 'Set Iterator';\n    }\n    /* ! Spec Conformance\n     * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%arrayiteratorprototype%-@@tostringtag)\n     * ES6$22.1.5.2.2 - %ArrayIteratorPrototype%[@@toStringTag] should be \"Array Iterator\":\n     * Test: `Object.prototype.toString.call([][Symbol.iterator]())``\n     *  - Edge <=13 === \"[object Object]\"\n     */\n\n\n    if (arrayIteratorExists && objPrototype === arrayIteratorPrototype) {\n      return 'Array Iterator';\n    }\n    /* ! Spec Conformance\n     * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%stringiteratorprototype%-@@tostringtag)\n     * ES6$21.1.5.2.2 - %StringIteratorPrototype%[@@toStringTag] should be \"String Iterator\":\n     * Test: `Object.prototype.toString.call(''[Symbol.iterator]())``\n     *  - Edge <=13 === \"[object Object]\"\n     */\n\n\n    if (stringIteratorExists && objPrototype === stringIteratorPrototype) {\n      return 'String Iterator';\n    }\n    /* ! Speed optimisation\n    * Pre:\n    *   object from null   x 2,424,320 ops/sec ±1.67% (76 runs sampled)\n    * Post:\n    *   object from null   x 5,838,000 ops/sec ±0.99% (84 runs sampled)\n    */\n\n\n    if (objPrototype === null) {\n      return 'Object';\n    }\n\n    return Object.prototype.toString.call(obj).slice(toStringLeftSliceLength, toStringRightSliceLength);\n  }\n\n  return typeDetect;\n});","import * as tf from \"@tensorflow/tfjs\";\r\nimport * as tfvis from \"@tensorflow/tfjs-vis\";\r\nimport { assert } from \"chai\";\r\nimport _ from \"lodash\";\r\n\r\nclass Classifier {\r\n    constructor(ClassifierOptions) {\r\n\r\n        if(ClassifierOptions === undefined){\r\n            throw new Error(\"Classifier Error: ClassifierOptions not passed in\")\r\n        }\r\n\r\n        if (ClassifierOptions.classifierType === undefined ||   \r\n            ClassifierOptions.featuresToUse === undefined ||\r\n            ClassifierOptions.trainingData === undefined ||\r\n            ClassifierOptions.trainingLabels === undefined)\r\n        {\r\n            throw new Error(\"Classifier Error: ClassifierOptions missing fields\")\r\n        }\r\n\r\n        this.classifierType = ClassifierOptions.classifierType;\r\n        this.numberFeatures = ClassifierOptions.featuresToUse.length;\r\n        this.featuresToUse = ClassifierOptions.featuresToUse;\r\n        this.trainingData = ClassifierOptions.trainingData;\r\n        this.trainingLabels = ClassifierOptions.trainingLabels;\r\n        this.model = Classifier.createLogisticRegressionModel(this.numberFeatures);\r\n        this.test_feature_preconditions();\r\n    }\r\n\r\n    test_feature_preconditions() {\r\n        const first_row_features = _.keys(this.trainingData[0])\r\n\r\n        // make sure first row features includes all feature names\r\n\r\n        const superset = first_row_features\r\n        const subset = this.featuresToUse\r\n        const includes_all_feature_names = _.difference(subset, superset).length === 0\r\n\r\n        if (!includes_all_feature_names) {\r\n            throw new Error(\"Constructor Error thrown that features names doesn't match training data row 0\")\r\n        }\r\n\r\n        if (this.trainingLabels.length != this.trainingData.length) {\r\n            throw new Error(\"Classifier trainingData size doesn't match labels size\")\r\n        }\r\n    }\r\n\r\n    trainPromise(number_epochs=60) {\r\n        return new Promise(async (resolve, reject) => {\r\n\r\n            const tf_batched_dataset = Classifier.createBasicDataset(\r\n                this.trainingData,\r\n                this.trainingLabels,\r\n                this.featuresToUse,\r\n                16\r\n            );\r\n            this.model = await Classifier.basicTrainPromise(\r\n                this.model,\r\n                tf_batched_dataset,\r\n                number_epochs,       \r\n            )\r\n            \r\n            \r\n\r\n            resolve(null)\r\n        });\r\n    }\r\n\r\n    predict_tf(test_data, true_labels=null) {\r\n        if (true_labels) {\r\n            const [tf_dataset, tf_labels] = Classifier.createBasicTestset(test_data, this.featuresToUse, true_labels)\r\n            const tf_predictions = this.model.predict(tf_dataset).argMax(-1);\r\n            return [tf_predictions, tf_labels.argMax(-1)]\r\n        }\r\n        const tf_dataset = Classifier.createBasicTestset(test_data, this.featuresToUse)\r\n        const tf_predictions = this.model.predict(tf_dataset).argMax(-1);\r\n        return tf_predictions\r\n    }\r\n\r\n    predict(test_data, true_labels=null) {\r\n        if (true_labels) {\r\n            const [tf_dataset, tf_labels] = Classifier.createBasicTestset(test_data, this.featuresToUse, true_labels)\r\n            const tf_predictions = this.model.predict(tf_dataset).argMax(-1);\r\n            return [tf_predictions.arraySync(), tf_labels.argMax(-1).arraySync()]\r\n        }\r\n        const tf_dataset = Classifier.createBasicTestset(test_data, this.featuresToUse)\r\n        const tf_predictions = this.model.predict(tf_dataset).argMax(-1);\r\n        return tf_predictions.arraySync()\r\n    }\r\n    // TrainingDataConfusionMatrixDataURLPromise(label_names, canvasElement) {\r\n    //     return this.confusionMatrixDataURLPromise(this.trainingData, this.trainingLabels, label_names, canvasElement)\r\n    // }\r\n\r\n    getTrainingDataConfusionMatrixPromise() {\r\n        const [tf_predict_labels, tf_true_labels] = this.predict_tf(this.trainingData, this.trainingLabels)\r\n        return tfvis.metrics.confusionMatrix(tf_true_labels, tf_predict_labels)\r\n    }\r\n\r\n\r\n    confusionMatrixDataURLPromise(predict_data, true_labels, tick_labels, canvasElement) {\r\n        const [tf_predict_labels, tf_true_labels] = this.predict_tf(predict_data, true_labels)\r\n\r\n\r\n        // const confusionMatrixCanvas = document.createElement(\"canvas\")\r\n        tf_predict_labels.print()\r\n        tf_true_labels.print()\r\n\r\n        return tfvis.metrics.confusionMatrix(tf_true_labels, tf_predict_labels)\r\n                .then(confusionMatrix => \r\n                    {\r\n                        console.log(confusionMatrix)\r\n                        confusionMatrix.print()\r\n                        tfvis.render.confusionMatrix(canvasElement, {\r\n                            values: confusionMatrix,\r\n                            tickLabels: tick_labels\r\n                        })\r\n                    }\r\n                )\r\n                .then(() =>\r\n                canvasElement.toDataURL()\r\n                )\r\n\r\n\r\n\r\n        \r\n\r\n    }\r\n\r\n    DownloadModelPromise() {\r\n        this.model.save(`downloads://${this.classifierType}`)\r\n    }\r\n\r\n    static hasMultiple (feature_names, object) {\r\n        return _.every(feature_names, _.partial(_.has, object));\r\n    }\r\n\r\n    static norm2DArray (array) {\r\n\r\n        // var means_array = new Array(array[0].length).fill(0)\r\n        // for (var j = 0; j < array[0].length; j++) {\r\n        //     var sum = new Array(array[0].length).fill(0)\r\n        //     for (var i = 0; i < array.length; i++) {\r\n        //         sum[j] += array[i][j]\r\n        //     }\r\n        //     means_array[j] = sum[j]/array[0].length\r\n        // }\r\n\r\n\r\n        // var stddevs_array = new Array(array[0].length).fill(0)\r\n\r\n        // for (var j = 0; j < array[0].length; j++) {\r\n        //     var sum_squares = new Array(array[0].length).fill(0)\r\n        //     for (var i = 0; i <array.length; i++) {\r\n        //         sum_squares[j] += Math.pow((array[i][j] - means_array[j]),2)\r\n        //     }\r\n        //     stddevs_array[j] = Math.sqrt(sum_squares[j])\r\n        // }\r\n\r\n\r\n        // const normed_array = array.map(data_row => \r\n        //     {\r\n        //         return data_row.map( (value, idx) => (value - means_array[idx])/stddevs_array[idx])\r\n        //     }\r\n        // )\r\n\r\n        // return normed_array;\r\n\r\n        return array\r\n\r\n    }\r\n\r\n    static createBasicDataset (data, labels, feature_names, batchSize) {\r\n        console.assert(Object.values(data[0]).reduce((accum, currVal)=>accum&&(typeof currVal === \"number\")), \"First row object is numbers\")\r\n        console.assert(Classifier.hasMultiple(feature_names, data[0]), \"First row object has all the feature columns fields\");\r\n        console.assert(data.length===labels.length, \"data and labels match in length\")\r\n\r\n        // turn data into a 2d array, and make all undefined data_row fields 0\r\n        const X = data.map(data_row =>\r\n            feature_names.map(feature_name => {\r\n                const feature_value = data_row[feature_name];\r\n                return feature_value === undefined ? 0 : feature_value;\r\n            })\r\n        )\r\n\r\n        const normed_X = Classifier.norm2DArray(X)\r\n        \r\n\r\n        // make undefined labels into 0s and then convert into tensorflow format for categorical ML\r\n        const Y = labels.map(label => {\r\n            const outcome = label === undefined ? 0 : label;\r\n            return Array.from(tf.oneHot(outcome, 2).dataSync());\r\n        })\r\n\r\n        // turn the dataset into a tensorflow dataset object\r\n        const tf_dataset = tf.data\r\n        .zip({ xs: tf.data.array(normed_X), ys: tf.data.array(Y) })\r\n        .shuffle(data.length, Date.now()%100000);\r\n\r\n        return tf_dataset.batch(batchSize);\r\n\r\n    }\r\n\r\n    static createBasicTestset (data, feature_names, labels=null){\r\n        const X = data.map(data_row =>\r\n            feature_names.map(feature_name => {\r\n                const feature_value = data_row[feature_name];\r\n                return feature_value === undefined ? 0 : feature_value;\r\n            })\r\n        )\r\n\r\n        const normed_X = Classifier.norm2DArray(X)\r\n\r\n        if(!labels) {\r\n            return tf.tensor(normed_X)\r\n        }\r\n\r\n        const Y = labels.map(label => {\r\n            const outcome = label === undefined ? 0 : label;\r\n            return Array.from(tf.oneHot(outcome, 2).dataSync());\r\n        })\r\n\r\n        return [tf.tensor(normed_X), tf.tensor(Y)]\r\n        \r\n    }\r\n\r\n    static createLogisticRegressionModel  (feature_count)  {\r\n        const model = tf.sequential();\r\n\r\n        model.add(\r\n        tf.layers.dense({\r\n            units: 2,\r\n            activation: \"softmax\",\r\n            inputShape: [feature_count],\r\n            kernelRegularizer: tf.regularizers.l1({l1: 0.1})\r\n        }));\r\n\r\n        const optimizer = tf.train.adam(0.001);\r\n        model.compile({\r\n        optimizer: optimizer,\r\n        loss: \"binaryCrossentropy\",\r\n        metrics: [\"accuracy\"]\r\n        });\r\n\r\n        return model;\r\n    }\r\n\r\n\r\n    static async basicTrainPromise (model, training_dataset, number_epochs, render_containers=null ) {\r\n        \r\n\r\n        \r\n        if (render_containers !== null) {\r\n            var lossContainer = render_containers.lossContainer;\r\n            var accContainer = render_containers.accContainer;\r\n        }\r\n        \r\n        const trainLogs = [];\r\n        return new Promise(\r\n            (resolve, reject) => {\r\n                model.fitDataset(training_dataset, {\r\n                    epochs: number_epochs,\r\n                    callbacks: {\r\n                        onEpochEnd: render_containers? async (epoch, logs) => {\r\n                                trainLogs.push(logs);\r\n                                console.log(\"epoch end:\", epoch)\r\n                                if (render_containers){\r\n                                    tfvis.show.history(lossContainer, trainLogs, [\"loss\"]);\r\n                                    tfvis.show.history(accContainer, trainLogs, [\"acc\"]);\r\n                                }\r\n                            \r\n                            } : undefined,\r\n                        onTrainEnd: ()=>resolve(model)\r\n                    } \r\n                });\r\n            }\r\n        )\r\n        \r\n        \r\n    }\r\n}\r\n\r\nexport {Classifier}","import chai from './index.js';\nexport var expect = chai.expect;\nexport var version = chai.version;\nexport var Assertion = chai.Assertion;\nexport var AssertionError = chai.AssertionError;\nexport var util = chai.util;\nexport var config = chai.config;\nexport var use = chai.use;\nexport var should = chai.should;\nexport var assert = chai.assert;\nexport var core = chai.core;\nexport default chai;","import * as Papa from \"papaparse\"\r\nexport default class PapaParser {\r\n\r\n    constructor() {\r\n        // Could do the whole thing in here by keeping what configs mapped by key name\r\n        // Maybe faster?\r\n        //Is making multiple of these smart\r\n        this.basicPapaConfig = {\r\n            worker: true,\r\n            skipEmptyLines: true,\r\n            dynamicTyping: true\r\n        }\r\n        this.file_config_options = {\r\n            \"per_object.csv\" :  {fastMode: true, error: (e)=>console.error(e)} ,\r\n            \"per_image.csv\" : { error: (e)=>console.error(e)} ,\r\n            \"MyTrainingSet.txt\" : {delimiter: \" \", comments: \"#\" }\r\n        }\r\n\r\n        Papa.parsePromise = function(file, config) {\r\n            return new Promise(function(complete, error) {\r\n              Papa.parse(file, {...config, complete, error});\r\n            });\r\n        };  \r\n         Promise.prototype.notify = function(strMsg) {\r\n             return this.then(x=>{console.log(strMsg); return x});\r\n          }\r\n          Promise.prototype.debugPrint = function() {\r\n            return this.then(x=>{console.log(x); return x});\r\n        }  \r\n        Papa.papaparseFilePromise = function(file, options={}, onEndMsg=\"\") {\r\n    \r\n            return Papa.parsePromise(file, options)\r\n            .then((result)=> result.data)\r\n            .notify(onEndMsg);\r\n        }\r\n        Papa.papaparseFilePromise_noReturn = function(file, options={}, onEndMsg=\"\") {\r\n            return Papa.parsePromise(file, options)\r\n            .notify(onEndMsg);\r\n        }\r\n}\r\n    papaTextfromCSV(file_object) {\r\n        var file_for_papa = file_object.file;\r\n        var option = Object.assign(this.basicPapaConfig, this.file_config_options[file_object.name])\r\n        return Papa.papaparseFilePromise(file_for_papa, option)\r\n    }\r\n\r\n}","\r\nexport default class ImageTable{\r\n    constructor(image_lines, column_lines) {\r\n        this.column_lines = column_lines\r\n        this.image_lines = image_lines;\r\n        this.image_column = {}\r\n        this.image_mapped = {}\r\n        for (var i = 0; i < this.column_lines.length; i++) {\r\n            this.image_column[this.column_lines[i]] = i;\r\n        }\r\n        var obj_index = this.image_column.imageNumber\r\n        var img_index = this.image_column.ImageNumber\r\n        for (var i = 0; i < this.image_lines.length; i++) {\r\n            var key = this.image_lines[i][img_index].toString() \r\n            this.image_mapped[key] = i\r\n        }\r\n\r\n    }\r\n    find (search_obj) {\r\n        var row = {}\r\n        var index = this.findIndex(search_obj)\r\n        return this.indexTableGetRow(index)\r\n    }\r\n    get(index, key) {\r\n        if (key in this.image_column && index < this.getSize())\r\n            return this.image_lines[index][this.image_column[key]] \r\n        return -1\r\n\r\n    }    \r\n    findIndex (search_obj) {\r\n        var img;\r\n        var obj;\r\n        var key;\r\n        if (search_obj.hasOwnProperty('ImageNumber')) {\r\n            key = search_obj.ImageNumber.toString() \r\n        }\r\n        if (key in this.image_mapped)\r\n            return this.image_mapped[key]\r\n        \r\n        return -1\r\n    }\r\n    indexTableGetRow(index) {\r\n        var row = {}\r\n        if(index != -1) {\r\n            var line = this.image_lines[index]\r\n            for(var i = 0; i < this.column_lines.length; i++) {\r\n                var key = this.column_lines[i]\r\n                row[key] = line[i];\r\n            }\r\n            return row\r\n        }\r\n        return index;\r\n    }\r\n    getColumnLines(){\r\n        return this.column_lines;\r\n    }\r\n    getSize() {\r\n    return this.image_lines.length;\r\n    }\r\n}\r\n    \r\n","export default class ObjectTable {\r\n    constructor(object_lines, column_lines) {\r\n        this.column_lines = column_lines\r\n        this.object_lines = object_lines;\r\n        this.object_column = {}\r\n        this.object_mapped = {}\r\n        this.imgs_size = {}\r\n        for (var i = 0; i < this.column_lines.length; i++) {\r\n            this.object_column[this.column_lines[i]] = i;\r\n        }\r\n        var obj_index = this.object_column.ObjectNumber\r\n        var img_index = this.object_column.ImageNumber\r\n        var size = 0\r\n        for (var i = 0, size = 0; i < this.object_lines.length; i++, size++) {\r\n            var img = this.object_lines[i][img_index].toString() \r\n            var obj = this.object_lines[i][obj_index].toString() \r\n            var index = img.concat(',',obj)\r\n            this.object_mapped[index] = i\r\n            if (!this.imgs_size.hasOwnProperty(img)) {\r\n                this.imgs_size[img] = 0; \r\n            }\r\n            this.imgs_size[img]++\r\n        }\r\n        console.log(this.imgs_size)\r\n     }\r\n     returnObjsPerImg(img) {\r\n        if (img.toString() in this.imgs_size) {\r\n            return this.imgs_size[img.toString()]\r\n        }\r\n        return -1\r\n    }\r\n    firstObjinImg(n) {\r\n        var img = n.toString()\r\n        if (!(this.imgs_size.hasOwnProperty(img))) {\r\n            return -1\r\n        }\r\n        if (this.imgs_size[img] <= 0) {\r\n            return -1\r\n        }\r\n        var i = 1;\r\n        var obj = i.toString()\r\n        var index_key = img.concat(',',obj)  \r\n        while(!(this.object_mapped.hasOwnProperty(index_key))) {\r\n            i++\r\n            obj = i.toString()\r\n            index_key = img.concat(',',obj)  \r\n        }\r\n        return parseInt(obj)\r\n    }\r\n    find (search_obj = {}) {\r\n        var row = {}\r\n        var index = this.findIndex(search_obj)\r\n        return this.indexTableGetRow(index)\r\n    }\r\n    get(index, key) {\r\n        if (key in this.object_column && index < this.getSize())\r\n            return this.object_lines[index][this.object_column[key]] \r\n        return -1\r\n\r\n    }    \r\n    findIndex(search_obj) {\r\n        var img;\r\n        var obj;\r\n        var key;\r\n        if (search_obj.hasOwnProperty('ImageNumber') && search_obj.hasOwnProperty('ObjectNumber')) {\r\n            img = search_obj.ImageNumber.toString() \r\n            obj = search_obj.ObjectNumber.toString() \r\n            key = img.concat(',',obj)\r\n        }\r\n        if (key in this.object_mapped)\r\n            return this.object_mapped[key]\r\n        \r\n        return -1\r\n    }\r\n    indexTableGetRow(index) {\r\n        var row = {}\r\n        if(index != -1 && index < this.getSize()) {\r\n            var line = this.object_lines[index]\r\n            for(var i = 0; i < this.column_lines.length; i++) {\r\n                var column = this.column_lines[i]\r\n                row[column] = line[i];\r\n            }\r\n            return row\r\n        }\r\n        return index;\r\n    }\r\n    getColumnLines(){\r\n        return this.column_lines;\r\n    }\r\n    getSize() {\r\n    return this.object_lines.length;\r\n    }\r\n\r\n}\r\n\r\n\r\n","\r\nimport { ThreeSixty, ThumbDownSharp } from \"@material-ui/icons\";\r\nimport ImageTable from \"./ImageTable.js\";\r\nimport ObjectTable from \"./ObjectTable.js\";\r\nexport default class DataProvider {\r\n    constructor(uniform_data) {\r\n        this.testConstructorInputPreconditions(uniform_data);\r\n\r\n        this.data = {\r\n            'object_data' : new ObjectTable(uniform_data.object_data, uniform_data.object_columns),\r\n            'image_data' :  new ImageTable(uniform_data.image_data, uniform_data.image_columns)\r\n        }  \r\n    }\r\n    testConstructorInputPreconditions(uniform_data) {\r\n        if (uniform_data == undefined) {\r\n            throw new Error(\"Constructor Error on uniform_data is not defined\")\r\n        }\r\n        if (uniform_data.image_data == undefined || \r\n            uniform_data.object_data == undefined ||\r\n            uniform_data.image_columns == undefined ||\r\n            uniform_data.object_columns == undefined) {\r\n            \r\n            throw new Error(\"Constructor Error on uniform_data is missing fields\")\r\n        }\r\n        if (uniform_data.object_data[0][0] == undefined) {\r\n            throw new Error(\"Constructor Error on object_data is not a 2d array\")\r\n        }\r\n        if (uniform_data.image_data[0][0] == undefined) {\r\n            throw new Error(\"Constructor Error on image_data is not a 2d array\")\r\n        }\r\n        if (uniform_data.object_data[0].length !== uniform_data.object_columns.length) {\r\n            throw new Error(\"Constructor Error on object_data length mismatch with object_columns length\")\r\n        }\r\n        if (uniform_data.image_data[0].length !== uniform_data.image_columns.length) {\r\n            throw new Error(\"Constructor Error on image_data length mismatch with image_columns length\")\r\n        }\r\n        if (!uniform_data.object_columns.includes(\"ObjectNumber\") ||\r\n            !uniform_data.object_columns.includes(\"ImageNumber\")) {\r\n                throw new Error(\"Constructor Error on object_columns doesn't have ObjectNumber and ImageNumber\")\r\n            }\r\n        if (!uniform_data.image_columns.includes(\"ImageNumber\")) {\r\n                throw new Error(\"Constructor Error on image_columns doesn't have ImageNumber\")\r\n            }\r\n        if (!uniform_data.object_columns.includes(\"Nuclei_Location_CenterX\") ||\r\n            !uniform_data.object_columns.includes(\"Nuclei_Location_CenterY\")) {\r\n                throw new Error(\"Constructor Error on uniform_data doesn't have Nuclei_Location_CenterX or Nuclei_Location_CenterY\")\r\n            }\r\n    }\r\n    \r\n    returnAllImgFileNames(img) {\r\n        var channels = [\r\n            {'file_lookup' : 'Image_FileNames_Filename_OrigActin', 'color' : \"red\" }, \r\n            {'file_lookup' : 'Image_FileNames_Filename_OrigpH3'  , 'color' : \"green\"},\r\n            {'file_lookup' : \"Image_FileNames_Filename_OrigDNA\"  , 'color' : \"blue\"}\r\n        ]\r\n         var image_paths = channels.map( channel => {\r\n            var file_name =  this.getValue('image_data', {'ImageNumber': img, 'value': channel.file_lookup}) \r\n            return {'filename' : file_name , 'color' : channel.color}   \r\n         });\r\n        return image_paths;\r\n    }\r\n    //TODO what if cell is on edge of image\r\n    getObjsPerImg(img) {\r\n        var size = this.data.object_data.returnObjsPerImg(img);\r\n        if (size <= 0) {\r\n            return -1;\r\n        }\r\n        var first = this.data.object_data.firstObjinImg(img)\r\n        var objsInImg = [];\r\n        for (var obj = first, count = 0; count < size ; obj++) {\r\n            var row = this.data.object_data.find({'ImageNumber': img, 'ObjectNumber': obj})\r\n            if (row != -1) {\r\n                count++\r\n                objsInImg.push(row)\r\n            }\r\n        }\r\n        return objsInImg;\r\n    }\r\n    getToolTip(search_obj) {\r\n        var index = this.data.image_data.findIndex(search_obj)\r\n        var plate = this.data.image_data.get(index, 'plate')\r\n        var well = this.data.image_data.get(index, 'well')\r\n        return \"Plate: \" + plate + \" Well: \" + well + \" ImageNumber: \" + search_obj.ImageNumber\r\n    }\r\n    getNRandomObjs(n) {\r\n        var num_of_objs = this.data.object_data.getSize()\r\n        var rand_objs = []\r\n        var i;\r\n        for (i = 0; i < n; i++) {\r\n            var index = Math.floor(Math.random() * num_of_objs);\r\n            var obj = this.data.object_data.indexTableGetRow(index)\r\n            rand_objs.push({'ImageNumber': obj.ImageNumber, 'ObjectNumber': obj.ObjectNumber })\r\n        }\r\n        return rand_objs\r\n    }\r\n    getRow(key, search_obj, ) { //Where key is a member of data and search obj is of form {'img': , 'objs': , 'index': }\r\n        if (!(this.data.hasOwnProperty(key))) return -1;\r\n        var row = this.data[key].find(search_obj)\r\n        return row;\r\n\r\n    }\r\n    getAllObjRowsIn2DArray(objs) {\r\n        \r\n\r\n    }\r\n    getCordsforCellDisplay(search_obj) {\r\n        var cords = {};        \r\n        var cellinObj = this.data.object_data.findIndex(search_obj)\r\n        var cellx = parseInt(this.data.object_data.get(cellinObj, 'Nuclei_Location_CenterX'))\r\n        var celly = parseInt(this.data.object_data.get(cellinObj, 'Nuclei_Location_CenterY'))\r\n        cords.x = Math.max(0, cellx - 20) \r\n       // var hi_x = lo_x + 40\r\n        cords.y = (Math.max(0, celly - 20))\r\n        return cords;\r\n    }\r\n\r\n    getValue(key, search_obj) {\r\n        if (!this.data.hasOwnProperty(key)) return -1;         \r\n        var value = -1\r\n        var index =  this.data[key].findIndex(search_obj)\r\n        if (index !== -1) {\r\n            value = this.data[key].get(index, search_obj.value);\r\n        }\r\n        return value;\r\n    }\r\n    getColumnLines(key) {\r\n        if (this.data.hasOwnProperty(key)) {\r\n            return this.data[key].getColumnLines();\r\n        }\r\n        return -1;\r\n\r\n    }                     \r\n\r\n}\r\n\r\nexport {DataProvider}","import { DataTables } from \"./DataTables\";\r\nexport default class TrainingTable extends DataTables{\r\n    constructor(data_lines, column_lines) {\r\n        super(data_lines, column_lines)\r\n        this.training_lines = data_lines;\r\n    }\r\n    getTrainingLabels() {\r\n        return this.data_table.map(row_object => {\r\n            return row_object['label'] === 'positive'? 1 : 0\r\n        })\r\n\r\n\r\n    }\r\n}","import _ from \"lodash\";\r\nexport class DataTables {\r\n    constructor(data_lines, column_lines) {\r\n        this.data_table = data_lines.map(data_row=>{ return _.zipObject(column_lines, data_row)})\r\n        this.column_lines = column_lines;\r\n    }\r\n    find (search_obj = {}) {\r\n                return  _.find(this.data_table, search_obj)\r\n           \r\n        }\r\n    size() {\r\n        return this.data_table.length;\r\n    }\r\n    get(index, key) {\r\n        return _.get(this.data_table[index], key)    \r\n        \r\n    }\r\n    findIndex (search_obj) {\r\n        return _.findIndex(this.data_table, search_obj)\r\n    }\r\n    indexTable (index) {\r\n        return this.data_table[index];\r\n    }\r\n    getColumnLines(){\r\n        return this.column_lines;\r\n    }\r\n    getSize() {\r\n        return this.data_table.length;\r\n    }\r\n\r\n    getDataColumnsPaired() {\r\n        return this.data_table;\r\n        \r\n    }\r\n} ","//import DataUtils from \"./DataUtils\";\r\nimport PapaParser from \"./PapaParser.js\";\r\nimport UserUploadFileHandler from \"./UserUploadFileHandler.js\";\r\nimport _ from \"lodash\";                                                                                                                                                                                                         \r\nimport DataProvider from \"./DataProvider.js\";\r\nimport TrainingTable from \"./TrainingTable.js\";\r\nexport default class UploadHandler {\r\n\r\n    constructor(fileListObject) {\r\n        this.fileListObject = fileListObject\r\n    }\r\n    // TODO\r\n    // getProperties(file_handler) {\r\n\r\n    // }\r\n    sliceArrayByValue = function (array, value1, value2) {\r\n        const index1 = array.indexOf(value1);\r\n        const index2 = array.indexOf(value2);\r\n      \r\n        if (value1 === -1 || value2 === -1) {\r\n            console.error(\"Values not found to slice\");\r\n            return null;\r\n        }\r\n      \r\n        return array.slice(index1, index2);\r\n      }\r\n\r\n    basicPapaConfig = {\r\n        worker: true,\r\n        skipEmptyLines: true,\r\n        dynamicTyping: true\r\n    }\r\n    getFiles() {\r\n        var file_names = [\r\n            \"example_SETUP.SQL\",\r\n            \"per_object.csv\",\r\n            \"per_image.csv\",\r\n            \"MyTrainingSet.txt\"\r\n        ]\r\n        var file_handlers = [];\r\n        var i = 0;\r\n        var file_handler = new UserUploadFileHandler(this.fileListObject)\r\n        return  file_names.map(file_name => {\r\n                var file = file_handler.findFile(file_name)\r\n                return {'file': file, 'name' : file_name};\r\n            })\r\n    }\r\n\r\n     \r\n    getText(file_objects) {\r\n        return Promise.all( file_objects.map( file_object => {\r\n            if (file_object.name.endsWith(\".csv\") || file_object.name.endsWith(\".txt\")) {\r\n                var papa_parser = new PapaParser();\r\n                return papa_parser.papaTextfromCSV(file_object);\r\n            }\r\n            else {\r\n                var file_handler = new UserUploadFileHandler(this.fileListObject)\r\n                return file_handler.fileReaderPromiseText(file_object.file);\r\n            }\r\n        }))\r\n    }\r\n        //return Promise.all([this.fileReaderPromiseText(fileListObject, setup_name).split('\\n').map(e=>e.trim()),\r\n    getColumnLines(column_lines_txt) {\r\n        var data_columns = [] \r\n        var column_lines = column_lines_txt.split('\\n').map(e=>e.trim())\r\n        const object_column_lines = this.sliceArrayByValue(\r\n            column_lines,\r\n            \"CREATE TABLE per_object (\", \r\n            \"PRIMARY KEY  (ImageNumber,ObjectNumber)\"\r\n        );\r\n        data_columns.push(object_column_lines.map((name)=>name.split(' ')[0]).slice(1));\r\n        const image_column_lines = this.sliceArrayByValue(\r\n            column_lines,\r\n            \"CREATE TABLE per_image (\", \r\n            \"PRIMARY KEY  (ImageNumber)\"\r\n        );\r\n        data_columns.push(image_column_lines.map((name)=>name.split(' ')[0]).slice(1));\r\n        data_columns.push(\"label imagenum objectnum x y\".split(\" \"));\r\n        return data_columns\r\n    }\r\n    getDataHandlerandStartingTrainingSet = async function() {\r\n        var data_types = [\r\n            'column_lines',\r\n            'object_data',\r\n            'image_data',\r\n            'training_data'\r\n        ]  \r\n\r\n        var data = [];\r\n        var file_objects = this.getFiles();\r\n        var text_data = await this.getText(file_objects);\r\n        var column_lines = this.getColumnLines(text_data[0]);\r\n        // console.log(text_data[1])\r\n        // console.log(column_lines[0])\r\n        var dp = new DataProvider({'object_data' : text_data[1], 'image_data' : text_data[2], \r\n                                       'object_columns' : column_lines[0], 'image_columns' : column_lines[1]})\r\n        var tt = new TrainingTable( text_data[3].slice(1) , column_lines[2])\r\n        return {'data_provider' : dp, 'training_data' : {'features' : column_lines[0],  'training_table' :  tt}}\r\n\r\n\r\n        // var image_data = text_data[2].map(data_row=>{ return _.zipObject(column_lines[1], data_row)})\r\n        // var object_data = text_data[1].map(data_row=>{ return _.zipObject(column_lines[0], data_row)})\r\n        // var training_data = text_data[3].map(data_row=>{ return _.zipObject(column_lines[2], data_row)})\r\n\r\n \r\n\r\n\r\n    }\r\n\r\n}","export default class UserUploadFileHandler {\r\n\r\n    constructor(fileListObject) {\r\n\r\n        this.fileListObject = fileListObject\r\n    }\r\n    findAllFiles(file_names) {\r\n        return file_names.map(file_name => {\r\n            return this.findFile(file_name)\r\n        })\r\n    }\r\n    findFile = (file_name) => {\r\n        const fileIndex = Array.from(this.fileListObject.target.files).findIndex((elem) => {\r\n            return (elem.name === file_name);\r\n        });\r\n        return this.fileListObject.target.files[fileIndex];\r\n    }\r\n    fileReaderPromiseText =  function(file_result) {\r\n        return new Promise((resolve, reject)=> {\r\n            var fr = new FileReader();\r\n            fr.onload = () => {\r\n                resolve(fr.result)\r\n            };\r\n            fr.readAsText(file_result)\r\n        })\r\n    }\r\n    fileReaderPromiseImage(file_result) {\r\n        return new Promise((resolve, reject)=> {\r\n            var fr = new FileReader();\r\n            fr.onload = () => {\r\n                resolve(fr.result)\r\n            };\r\n            fr.readAsDataURL(file_result)\r\n        })\r\n    }\r\n\r\n    \r\n\r\n}","var baseCreate = require('./_baseCreate'),\n    baseLodash = require('./_baseLodash');\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/**\n * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.\n *\n * @private\n * @constructor\n * @param {*} value The value to wrap.\n */\nfunction LazyWrapper(value) {\n  this.__wrapped__ = value;\n  this.__actions__ = [];\n  this.__dir__ = 1;\n  this.__filtered__ = false;\n  this.__iteratees__ = [];\n  this.__takeCount__ = MAX_ARRAY_LENGTH;\n  this.__views__ = [];\n}\n\n// Ensure `LazyWrapper` is an instance of `baseLodash`.\nLazyWrapper.prototype = baseCreate(baseLodash.prototype);\nLazyWrapper.prototype.constructor = LazyWrapper;\n\nmodule.exports = LazyWrapper;\n","var baseCreate = require('./_baseCreate'),\n    baseLodash = require('./_baseLodash');\n\n/**\n * The base constructor for creating `lodash` wrapper objects.\n *\n * @private\n * @param {*} value The value to wrap.\n * @param {boolean} [chainAll] Enable explicit method chain sequences.\n */\nfunction LodashWrapper(value, chainAll) {\n  this.__wrapped__ = value;\n  this.__actions__ = [];\n  this.__chain__ = !!chainAll;\n  this.__index__ = 0;\n  this.__values__ = undefined;\n}\n\nLodashWrapper.prototype = baseCreate(baseLodash.prototype);\nLodashWrapper.prototype.constructor = LodashWrapper;\n\nmodule.exports = LodashWrapper;\n","/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\nmodule.exports = apply;\n","/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nmodule.exports = arrayEach;\n","/**\n * A specialized version of `_.every` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`.\n */\nfunction arrayEvery(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (!predicate(array[index], index, array)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = arrayEvery;\n","var baseIndexOf = require('./_baseIndexOf');\n\n/**\n * A specialized version of `_.includes` for arrays without support for\n * specifying an index to search from.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludes(array, value) {\n  var length = array == null ? 0 : array.length;\n  return !!length && baseIndexOf(array, value, 0) > -1;\n}\n\nmodule.exports = arrayIncludes;\n","/**\n * This function is like `arrayIncludes` except that it accepts a comparator.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @param {Function} comparator The comparator invoked per element.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludesWith(array, value, comparator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (comparator(value, array[index])) {\n      return true;\n    }\n  }\n  return false;\n}\n\nmodule.exports = arrayIncludesWith;\n","var isObject = require('./isObject');\n\n/** Built-in value references. */\nvar objectCreate = Object.create;\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nvar baseCreate = (function() {\n  function object() {}\n  return function(proto) {\n    if (!isObject(proto)) {\n      return {};\n    }\n    if (objectCreate) {\n      return objectCreate(proto);\n    }\n    object.prototype = proto;\n    var result = new object;\n    object.prototype = undefined;\n    return result;\n  };\n}());\n\nmodule.exports = baseCreate;\n","var SetCache = require('./_SetCache'),\n    arrayIncludes = require('./_arrayIncludes'),\n    arrayIncludesWith = require('./_arrayIncludesWith'),\n    arrayMap = require('./_arrayMap'),\n    baseUnary = require('./_baseUnary'),\n    cacheHas = require('./_cacheHas');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of methods like `_.difference` without support\n * for excluding multiple arrays or iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values.length;\n\n  if (!length) {\n    return result;\n  }\n  if (iteratee) {\n    values = arrayMap(values, baseUnary(iteratee));\n  }\n  if (comparator) {\n    includes = arrayIncludesWith;\n    isCommon = false;\n  }\n  else if (values.length >= LARGE_ARRAY_SIZE) {\n    includes = cacheHas;\n    isCommon = false;\n    values = new SetCache(values);\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee == null ? value : iteratee(value);\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    }\n    else if (!includes(values, computed, comparator)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseDifference;\n","var baseForOwn = require('./_baseForOwn'),\n    createBaseEach = require('./_createBaseEach');\n\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\nmodule.exports = baseEach;\n","var baseEach = require('./_baseEach');\n\n/**\n * The base implementation of `_.every` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`\n */\nfunction baseEvery(collection, predicate) {\n  var result = true;\n  baseEach(collection, function(value, index, collection) {\n    result = !!predicate(value, index, collection);\n    return result;\n  });\n  return result;\n}\n\nmodule.exports = baseEvery;\n","var arrayPush = require('./_arrayPush'),\n    isFlattenable = require('./_isFlattenable');\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseFlatten;\n","var createBaseFor = require('./_createBaseFor');\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\nmodule.exports = baseFor;\n","var baseFor = require('./_baseFor'),\n    keys = require('./keys');\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\nmodule.exports = baseForOwn;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.has` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHas(object, key) {\n  return object != null && hasOwnProperty.call(object, key);\n}\n\nmodule.exports = baseHas;\n","var baseFindIndex = require('./_baseFindIndex'),\n    baseIsNaN = require('./_baseIsNaN'),\n    strictIndexOf = require('./_strictIndexOf');\n\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOf(array, value, fromIndex) {\n  return value === value\n    ? strictIndexOf(array, value, fromIndex)\n    : baseFindIndex(array, baseIsNaN, fromIndex);\n}\n\nmodule.exports = baseIndexOf;\n","/**\n * The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n */\nfunction baseIsNaN(value) {\n  return value !== value;\n}\n\nmodule.exports = baseIsNaN;\n","/**\n * The function whose prototype chain sequence wrappers inherit from.\n *\n * @private\n */\nfunction baseLodash() {\n  // No operation performed.\n}\n\nmodule.exports = baseLodash;\n","var identity = require('./identity'),\n    overRest = require('./_overRest'),\n    setToString = require('./_setToString');\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\nmodule.exports = baseRest;\n","var identity = require('./identity'),\n    metaMap = require('./_metaMap');\n\n/**\n * The base implementation of `setData` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to associate metadata with.\n * @param {*} data The metadata.\n * @returns {Function} Returns `func`.\n */\nvar baseSetData = !metaMap ? identity : function(func, data) {\n  metaMap.set(func, data);\n  return func;\n};\n\nmodule.exports = baseSetData;\n","var constant = require('./constant'),\n    defineProperty = require('./_defineProperty'),\n    identity = require('./identity');\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\nmodule.exports = baseSetToString;\n","/**\n * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n *\n * @private\n * @param {Array} props The property identifiers.\n * @param {Array} values The property values.\n * @param {Function} assignFunc The function to assign values.\n * @returns {Object} Returns the new object.\n */\nfunction baseZipObject(props, values, assignFunc) {\n  var index = -1,\n      length = props.length,\n      valsLength = values.length,\n      result = {};\n\n  while (++index < length) {\n    var value = index < valsLength ? values[index] : undefined;\n    assignFunc(result, props[index], value);\n  }\n  return result;\n}\n\nmodule.exports = baseZipObject;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Creates an array that is the composition of partially applied arguments,\n * placeholders, and provided arguments into a single array of arguments.\n *\n * @private\n * @param {Array} args The provided arguments.\n * @param {Array} partials The arguments to prepend to those provided.\n * @param {Array} holders The `partials` placeholder indexes.\n * @params {boolean} [isCurried] Specify composing for a curried function.\n * @returns {Array} Returns the new array of composed arguments.\n */\nfunction composeArgs(args, partials, holders, isCurried) {\n  var argsIndex = -1,\n      argsLength = args.length,\n      holdersLength = holders.length,\n      leftIndex = -1,\n      leftLength = partials.length,\n      rangeLength = nativeMax(argsLength - holdersLength, 0),\n      result = Array(leftLength + rangeLength),\n      isUncurried = !isCurried;\n\n  while (++leftIndex < leftLength) {\n    result[leftIndex] = partials[leftIndex];\n  }\n  while (++argsIndex < holdersLength) {\n    if (isUncurried || argsIndex < argsLength) {\n      result[holders[argsIndex]] = args[argsIndex];\n    }\n  }\n  while (rangeLength--) {\n    result[leftIndex++] = args[argsIndex++];\n  }\n  return result;\n}\n\nmodule.exports = composeArgs;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This function is like `composeArgs` except that the arguments composition\n * is tailored for `_.partialRight`.\n *\n * @private\n * @param {Array} args The provided arguments.\n * @param {Array} partials The arguments to append to those provided.\n * @param {Array} holders The `partials` placeholder indexes.\n * @params {boolean} [isCurried] Specify composing for a curried function.\n * @returns {Array} Returns the new array of composed arguments.\n */\nfunction composeArgsRight(args, partials, holders, isCurried) {\n  var argsIndex = -1,\n      argsLength = args.length,\n      holdersIndex = -1,\n      holdersLength = holders.length,\n      rightIndex = -1,\n      rightLength = partials.length,\n      rangeLength = nativeMax(argsLength - holdersLength, 0),\n      result = Array(rangeLength + rightLength),\n      isUncurried = !isCurried;\n\n  while (++argsIndex < rangeLength) {\n    result[argsIndex] = args[argsIndex];\n  }\n  var offset = argsIndex;\n  while (++rightIndex < rightLength) {\n    result[offset + rightIndex] = partials[rightIndex];\n  }\n  while (++holdersIndex < holdersLength) {\n    if (isUncurried || argsIndex < argsLength) {\n      result[offset + holders[holdersIndex]] = args[argsIndex++];\n    }\n  }\n  return result;\n}\n\nmodule.exports = composeArgsRight;\n","/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\nmodule.exports = copyArray;\n","/**\n * Gets the number of `placeholder` occurrences in `array`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} placeholder The placeholder to search for.\n * @returns {number} Returns the placeholder count.\n */\nfunction countHolders(array, placeholder) {\n  var length = array.length,\n      result = 0;\n\n  while (length--) {\n    if (array[length] === placeholder) {\n      ++result;\n    }\n  }\n  return result;\n}\n\nmodule.exports = countHolders;\n","var isArrayLike = require('./isArrayLike');\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\nmodule.exports = createBaseEach;\n","/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\nmodule.exports = createBaseFor;\n","var createCtor = require('./_createCtor'),\n    root = require('./_root');\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1;\n\n/**\n * Creates a function that wraps `func` to invoke it with the optional `this`\n * binding of `thisArg`.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @param {*} [thisArg] The `this` binding of `func`.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createBind(func, bitmask, thisArg) {\n  var isBind = bitmask & WRAP_BIND_FLAG,\n      Ctor = createCtor(func);\n\n  function wrapper() {\n    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n    return fn.apply(isBind ? thisArg : this, arguments);\n  }\n  return wrapper;\n}\n\nmodule.exports = createBind;\n","var baseCreate = require('./_baseCreate'),\n    isObject = require('./isObject');\n\n/**\n * Creates a function that produces an instance of `Ctor` regardless of\n * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n *\n * @private\n * @param {Function} Ctor The constructor to wrap.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createCtor(Ctor) {\n  return function() {\n    // Use a `switch` statement to work with class constructors. See\n    // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n    // for more details.\n    var args = arguments;\n    switch (args.length) {\n      case 0: return new Ctor;\n      case 1: return new Ctor(args[0]);\n      case 2: return new Ctor(args[0], args[1]);\n      case 3: return new Ctor(args[0], args[1], args[2]);\n      case 4: return new Ctor(args[0], args[1], args[2], args[3]);\n      case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\n      case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n      case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n    }\n    var thisBinding = baseCreate(Ctor.prototype),\n        result = Ctor.apply(thisBinding, args);\n\n    // Mimic the constructor's `return` behavior.\n    // See https://es5.github.io/#x13.2.2 for more details.\n    return isObject(result) ? result : thisBinding;\n  };\n}\n\nmodule.exports = createCtor;\n","var apply = require('./_apply'),\n    createCtor = require('./_createCtor'),\n    createHybrid = require('./_createHybrid'),\n    createRecurry = require('./_createRecurry'),\n    getHolder = require('./_getHolder'),\n    replaceHolders = require('./_replaceHolders'),\n    root = require('./_root');\n\n/**\n * Creates a function that wraps `func` to enable currying.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @param {number} arity The arity of `func`.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createCurry(func, bitmask, arity) {\n  var Ctor = createCtor(func);\n\n  function wrapper() {\n    var length = arguments.length,\n        args = Array(length),\n        index = length,\n        placeholder = getHolder(wrapper);\n\n    while (index--) {\n      args[index] = arguments[index];\n    }\n    var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)\n      ? []\n      : replaceHolders(args, placeholder);\n\n    length -= holders.length;\n    if (length < arity) {\n      return createRecurry(\n        func, bitmask, createHybrid, wrapper.placeholder, undefined,\n        args, holders, undefined, undefined, arity - length);\n    }\n    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n    return apply(fn, this, args);\n  }\n  return wrapper;\n}\n\nmodule.exports = createCurry;\n","var composeArgs = require('./_composeArgs'),\n    composeArgsRight = require('./_composeArgsRight'),\n    countHolders = require('./_countHolders'),\n    createCtor = require('./_createCtor'),\n    createRecurry = require('./_createRecurry'),\n    getHolder = require('./_getHolder'),\n    reorder = require('./_reorder'),\n    replaceHolders = require('./_replaceHolders'),\n    root = require('./_root');\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_CURRY_RIGHT_FLAG = 16,\n    WRAP_ARY_FLAG = 128,\n    WRAP_FLIP_FLAG = 512;\n\n/**\n * Creates a function that wraps `func` to invoke it with optional `this`\n * binding of `thisArg`, partial application, and currying.\n *\n * @private\n * @param {Function|string} func The function or method name to wrap.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @param {*} [thisArg] The `this` binding of `func`.\n * @param {Array} [partials] The arguments to prepend to those provided to\n *  the new function.\n * @param {Array} [holders] The `partials` placeholder indexes.\n * @param {Array} [partialsRight] The arguments to append to those provided\n *  to the new function.\n * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\n * @param {Array} [argPos] The argument positions of the new function.\n * @param {number} [ary] The arity cap of `func`.\n * @param {number} [arity] The arity of `func`.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n  var isAry = bitmask & WRAP_ARY_FLAG,\n      isBind = bitmask & WRAP_BIND_FLAG,\n      isBindKey = bitmask & WRAP_BIND_KEY_FLAG,\n      isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),\n      isFlip = bitmask & WRAP_FLIP_FLAG,\n      Ctor = isBindKey ? undefined : createCtor(func);\n\n  function wrapper() {\n    var length = arguments.length,\n        args = Array(length),\n        index = length;\n\n    while (index--) {\n      args[index] = arguments[index];\n    }\n    if (isCurried) {\n      var placeholder = getHolder(wrapper),\n          holdersCount = countHolders(args, placeholder);\n    }\n    if (partials) {\n      args = composeArgs(args, partials, holders, isCurried);\n    }\n    if (partialsRight) {\n      args = composeArgsRight(args, partialsRight, holdersRight, isCurried);\n    }\n    length -= holdersCount;\n    if (isCurried && length < arity) {\n      var newHolders = replaceHolders(args, placeholder);\n      return createRecurry(\n        func, bitmask, createHybrid, wrapper.placeholder, thisArg,\n        args, newHolders, argPos, ary, arity - length\n      );\n    }\n    var thisBinding = isBind ? thisArg : this,\n        fn = isBindKey ? thisBinding[func] : func;\n\n    length = args.length;\n    if (argPos) {\n      args = reorder(args, argPos);\n    } else if (isFlip && length > 1) {\n      args.reverse();\n    }\n    if (isAry && ary < length) {\n      args.length = ary;\n    }\n    if (this && this !== root && this instanceof wrapper) {\n      fn = Ctor || createCtor(fn);\n    }\n    return fn.apply(thisBinding, args);\n  }\n  return wrapper;\n}\n\nmodule.exports = createHybrid;\n","var apply = require('./_apply'),\n    createCtor = require('./_createCtor'),\n    root = require('./_root');\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1;\n\n/**\n * Creates a function that wraps `func` to invoke it with the `this` binding\n * of `thisArg` and `partials` prepended to the arguments it receives.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} partials The arguments to prepend to those provided to\n *  the new function.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createPartial(func, bitmask, thisArg, partials) {\n  var isBind = bitmask & WRAP_BIND_FLAG,\n      Ctor = createCtor(func);\n\n  function wrapper() {\n    var argsIndex = -1,\n        argsLength = arguments.length,\n        leftIndex = -1,\n        leftLength = partials.length,\n        args = Array(leftLength + argsLength),\n        fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n\n    while (++leftIndex < leftLength) {\n      args[leftIndex] = partials[leftIndex];\n    }\n    while (argsLength--) {\n      args[leftIndex++] = arguments[++argsIndex];\n    }\n    return apply(fn, isBind ? thisArg : this, args);\n  }\n  return wrapper;\n}\n\nmodule.exports = createPartial;\n","var isLaziable = require('./_isLaziable'),\n    setData = require('./_setData'),\n    setWrapToString = require('./_setWrapToString');\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_BOUND_FLAG = 4,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_PARTIAL_FLAG = 32,\n    WRAP_PARTIAL_RIGHT_FLAG = 64;\n\n/**\n * Creates a function that wraps `func` to continue currying.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @param {Function} wrapFunc The function to create the `func` wrapper.\n * @param {*} placeholder The placeholder value.\n * @param {*} [thisArg] The `this` binding of `func`.\n * @param {Array} [partials] The arguments to prepend to those provided to\n *  the new function.\n * @param {Array} [holders] The `partials` placeholder indexes.\n * @param {Array} [argPos] The argument positions of the new function.\n * @param {number} [ary] The arity cap of `func`.\n * @param {number} [arity] The arity of `func`.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n  var isCurry = bitmask & WRAP_CURRY_FLAG,\n      newHolders = isCurry ? holders : undefined,\n      newHoldersRight = isCurry ? undefined : holders,\n      newPartials = isCurry ? partials : undefined,\n      newPartialsRight = isCurry ? undefined : partials;\n\n  bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);\n  bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);\n\n  if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {\n    bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);\n  }\n  var newData = [\n    func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,\n    newHoldersRight, argPos, ary, arity\n  ];\n\n  var result = wrapFunc.apply(undefined, newData);\n  if (isLaziable(func)) {\n    setData(result, newData);\n  }\n  result.placeholder = placeholder;\n  return setWrapToString(result, func, bitmask);\n}\n\nmodule.exports = createRecurry;\n","var baseSetData = require('./_baseSetData'),\n    createBind = require('./_createBind'),\n    createCurry = require('./_createCurry'),\n    createHybrid = require('./_createHybrid'),\n    createPartial = require('./_createPartial'),\n    getData = require('./_getData'),\n    mergeData = require('./_mergeData'),\n    setData = require('./_setData'),\n    setWrapToString = require('./_setWrapToString'),\n    toInteger = require('./toInteger');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_CURRY_RIGHT_FLAG = 16,\n    WRAP_PARTIAL_FLAG = 32,\n    WRAP_PARTIAL_RIGHT_FLAG = 64;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Creates a function that either curries or invokes `func` with optional\n * `this` binding and partially applied arguments.\n *\n * @private\n * @param {Function|string} func The function or method name to wrap.\n * @param {number} bitmask The bitmask flags.\n *    1 - `_.bind`\n *    2 - `_.bindKey`\n *    4 - `_.curry` or `_.curryRight` of a bound function\n *    8 - `_.curry`\n *   16 - `_.curryRight`\n *   32 - `_.partial`\n *   64 - `_.partialRight`\n *  128 - `_.rearg`\n *  256 - `_.ary`\n *  512 - `_.flip`\n * @param {*} [thisArg] The `this` binding of `func`.\n * @param {Array} [partials] The arguments to be partially applied.\n * @param {Array} [holders] The `partials` placeholder indexes.\n * @param {Array} [argPos] The argument positions of the new function.\n * @param {number} [ary] The arity cap of `func`.\n * @param {number} [arity] The arity of `func`.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n  var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;\n  if (!isBindKey && typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var length = partials ? partials.length : 0;\n  if (!length) {\n    bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);\n    partials = holders = undefined;\n  }\n  ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n  arity = arity === undefined ? arity : toInteger(arity);\n  length -= holders ? holders.length : 0;\n\n  if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {\n    var partialsRight = partials,\n        holdersRight = holders;\n\n    partials = holders = undefined;\n  }\n  var data = isBindKey ? undefined : getData(func);\n\n  var newData = [\n    func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\n    argPos, ary, arity\n  ];\n\n  if (data) {\n    mergeData(newData, data);\n  }\n  func = newData[0];\n  bitmask = newData[1];\n  thisArg = newData[2];\n  partials = newData[3];\n  holders = newData[4];\n  arity = newData[9] = newData[9] === undefined\n    ? (isBindKey ? 0 : func.length)\n    : nativeMax(newData[9] - length, 0);\n\n  if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {\n    bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);\n  }\n  if (!bitmask || bitmask == WRAP_BIND_FLAG) {\n    var result = createBind(func, bitmask, thisArg);\n  } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {\n    result = createCurry(func, bitmask, arity);\n  } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {\n    result = createPartial(func, bitmask, thisArg, partials);\n  } else {\n    result = createHybrid.apply(undefined, newData);\n  }\n  var setter = data ? baseSetData : setData;\n  return setWrapToString(setter(result, newData), func, bitmask);\n}\n\nmodule.exports = createWrap;\n","var metaMap = require('./_metaMap'),\n    noop = require('./noop');\n\n/**\n * Gets metadata for `func`.\n *\n * @private\n * @param {Function} func The function to query.\n * @returns {*} Returns the metadata for `func`.\n */\nvar getData = !metaMap ? noop : function(func) {\n  return metaMap.get(func);\n};\n\nmodule.exports = getData;\n","var realNames = require('./_realNames');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the name of `func`.\n *\n * @private\n * @param {Function} func The function to query.\n * @returns {string} Returns the function name.\n */\nfunction getFuncName(func) {\n  var result = (func.name + ''),\n      array = realNames[result],\n      length = hasOwnProperty.call(realNames, result) ? array.length : 0;\n\n  while (length--) {\n    var data = array[length],\n        otherFunc = data.func;\n    if (otherFunc == null || otherFunc == func) {\n      return data.name;\n    }\n  }\n  return result;\n}\n\nmodule.exports = getFuncName;\n","/**\n * Gets the argument placeholder value for `func`.\n *\n * @private\n * @param {Function} func The function to inspect.\n * @returns {*} Returns the placeholder value.\n */\nfunction getHolder(func) {\n  var object = func;\n  return object.placeholder;\n}\n\nmodule.exports = getHolder;\n","/** Used to match wrap detail comments. */\nvar reWrapDetails = /\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/,\n    reSplitDetails = /,? & /;\n\n/**\n * Extracts wrapper details from the `source` body comment.\n *\n * @private\n * @param {string} source The source to inspect.\n * @returns {Array} Returns the wrapper details.\n */\nfunction getWrapDetails(source) {\n  var match = source.match(reWrapDetails);\n  return match ? match[1].split(reSplitDetails) : [];\n}\n\nmodule.exports = getWrapDetails;\n","/** Used to match wrap detail comments. */\nvar reWrapComment = /\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/;\n\n/**\n * Inserts wrapper `details` in a comment at the top of the `source` body.\n *\n * @private\n * @param {string} source The source to modify.\n * @returns {Array} details The details to insert.\n * @returns {string} Returns the modified source.\n */\nfunction insertWrapDetails(source, details) {\n  var length = details.length;\n  if (!length) {\n    return source;\n  }\n  var lastIndex = length - 1;\n  details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];\n  details = details.join(length > 2 ? ', ' : ' ');\n  return source.replace(reWrapComment, '{\\n/* [wrapped with ' + details + '] */\\n');\n}\n\nmodule.exports = insertWrapDetails;\n","var Symbol = require('./_Symbol'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray');\n\n/** Built-in value references. */\nvar spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\nmodule.exports = isFlattenable;\n","var eq = require('./eq'),\n    isArrayLike = require('./isArrayLike'),\n    isIndex = require('./_isIndex'),\n    isObject = require('./isObject');\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\nmodule.exports = isIterateeCall;\n","var LazyWrapper = require('./_LazyWrapper'),\n    getData = require('./_getData'),\n    getFuncName = require('./_getFuncName'),\n    lodash = require('./wrapperLodash');\n\n/**\n * Checks if `func` has a lazy counterpart.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` has a lazy counterpart,\n *  else `false`.\n */\nfunction isLaziable(func) {\n  var funcName = getFuncName(func),\n      other = lodash[funcName];\n\n  if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\n    return false;\n  }\n  if (func === other) {\n    return true;\n  }\n  var data = getData(other);\n  return !!data && func === data[0];\n}\n\nmodule.exports = isLaziable;\n","var composeArgs = require('./_composeArgs'),\n    composeArgsRight = require('./_composeArgsRight'),\n    replaceHolders = require('./_replaceHolders');\n\n/** Used as the internal argument placeholder. */\nvar PLACEHOLDER = '__lodash_placeholder__';\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_BOUND_FLAG = 4,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_ARY_FLAG = 128,\n    WRAP_REARG_FLAG = 256;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Merges the function metadata of `source` into `data`.\n *\n * Merging metadata reduces the number of wrappers used to invoke a function.\n * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n * may be applied regardless of execution order. Methods like `_.ary` and\n * `_.rearg` modify function arguments, making the order in which they are\n * executed important, preventing the merging of metadata. However, we make\n * an exception for a safe combined case where curried functions have `_.ary`\n * and or `_.rearg` applied.\n *\n * @private\n * @param {Array} data The destination metadata.\n * @param {Array} source The source metadata.\n * @returns {Array} Returns `data`.\n */\nfunction mergeData(data, source) {\n  var bitmask = data[1],\n      srcBitmask = source[1],\n      newBitmask = bitmask | srcBitmask,\n      isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);\n\n  var isCombo =\n    ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||\n    ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||\n    ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));\n\n  // Exit early if metadata can't be merged.\n  if (!(isCommon || isCombo)) {\n    return data;\n  }\n  // Use source `thisArg` if available.\n  if (srcBitmask & WRAP_BIND_FLAG) {\n    data[2] = source[2];\n    // Set when currying a bound function.\n    newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;\n  }\n  // Compose partial arguments.\n  var value = source[3];\n  if (value) {\n    var partials = data[3];\n    data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n    data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n  }\n  // Compose partial right arguments.\n  value = source[5];\n  if (value) {\n    partials = data[5];\n    data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n    data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n  }\n  // Use source `argPos` if available.\n  value = source[7];\n  if (value) {\n    data[7] = value;\n  }\n  // Use source `ary` if it's smaller.\n  if (srcBitmask & WRAP_ARY_FLAG) {\n    data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n  }\n  // Use source `arity` if one is not provided.\n  if (data[9] == null) {\n    data[9] = source[9];\n  }\n  // Use source `func` and merge bitmasks.\n  data[0] = source[0];\n  data[1] = newBitmask;\n\n  return data;\n}\n\nmodule.exports = mergeData;\n","var WeakMap = require('./_WeakMap');\n\n/** Used to store function metadata. */\nvar metaMap = WeakMap && new WeakMap;\n\nmodule.exports = metaMap;\n","var apply = require('./_apply');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nmodule.exports = overRest;\n","/** Used to lookup unminified function names. */\nvar realNames = {};\n\nmodule.exports = realNames;\n","var copyArray = require('./_copyArray'),\n    isIndex = require('./_isIndex');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Reorder `array` according to the specified indexes where the element at\n * the first index is assigned as the first element, the element at\n * the second index is assigned as the second element, and so on.\n *\n * @private\n * @param {Array} array The array to reorder.\n * @param {Array} indexes The arranged array indexes.\n * @returns {Array} Returns `array`.\n */\nfunction reorder(array, indexes) {\n  var arrLength = array.length,\n      length = nativeMin(indexes.length, arrLength),\n      oldArray = copyArray(array);\n\n  while (length--) {\n    var index = indexes[length];\n    array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n  }\n  return array;\n}\n\nmodule.exports = reorder;\n","/** Used as the internal argument placeholder. */\nvar PLACEHOLDER = '__lodash_placeholder__';\n\n/**\n * Replaces all `placeholder` elements in `array` with an internal placeholder\n * and returns an array of their indexes.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {*} placeholder The placeholder to replace.\n * @returns {Array} Returns the new array of placeholder indexes.\n */\nfunction replaceHolders(array, placeholder) {\n  var index = -1,\n      length = array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (value === placeholder || value === PLACEHOLDER) {\n      array[index] = PLACEHOLDER;\n      result[resIndex++] = index;\n    }\n  }\n  return result;\n}\n\nmodule.exports = replaceHolders;\n","var baseSetData = require('./_baseSetData'),\n    shortOut = require('./_shortOut');\n\n/**\n * Sets metadata for `func`.\n *\n * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\n * period of time, it will trip its breaker and transition to an identity\n * function to avoid garbage collection pauses in V8. See\n * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)\n * for more details.\n *\n * @private\n * @param {Function} func The function to associate metadata with.\n * @param {*} data The metadata.\n * @returns {Function} Returns `func`.\n */\nvar setData = shortOut(baseSetData);\n\nmodule.exports = setData;\n","var baseSetToString = require('./_baseSetToString'),\n    shortOut = require('./_shortOut');\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\nmodule.exports = setToString;\n","var getWrapDetails = require('./_getWrapDetails'),\n    insertWrapDetails = require('./_insertWrapDetails'),\n    setToString = require('./_setToString'),\n    updateWrapDetails = require('./_updateWrapDetails');\n\n/**\n * Sets the `toString` method of `wrapper` to mimic the source of `reference`\n * with wrapper details in a comment at the top of the source body.\n *\n * @private\n * @param {Function} wrapper The function to modify.\n * @param {Function} reference The reference function.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @returns {Function} Returns `wrapper`.\n */\nfunction setWrapToString(wrapper, reference, bitmask) {\n  var source = (reference + '');\n  return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));\n}\n\nmodule.exports = setWrapToString;\n","/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeNow = Date.now;\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\nmodule.exports = shortOut;\n","/**\n * A specialized version of `_.indexOf` which performs strict equality\n * comparisons of values, i.e. `===`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction strictIndexOf(array, value, fromIndex) {\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = strictIndexOf;\n","var arrayEach = require('./_arrayEach'),\n    arrayIncludes = require('./_arrayIncludes');\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_CURRY_RIGHT_FLAG = 16,\n    WRAP_PARTIAL_FLAG = 32,\n    WRAP_PARTIAL_RIGHT_FLAG = 64,\n    WRAP_ARY_FLAG = 128,\n    WRAP_REARG_FLAG = 256,\n    WRAP_FLIP_FLAG = 512;\n\n/** Used to associate wrap methods with their bit flags. */\nvar wrapFlags = [\n  ['ary', WRAP_ARY_FLAG],\n  ['bind', WRAP_BIND_FLAG],\n  ['bindKey', WRAP_BIND_KEY_FLAG],\n  ['curry', WRAP_CURRY_FLAG],\n  ['curryRight', WRAP_CURRY_RIGHT_FLAG],\n  ['flip', WRAP_FLIP_FLAG],\n  ['partial', WRAP_PARTIAL_FLAG],\n  ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],\n  ['rearg', WRAP_REARG_FLAG]\n];\n\n/**\n * Updates wrapper `details` based on `bitmask` flags.\n *\n * @private\n * @returns {Array} details The details to modify.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @returns {Array} Returns `details`.\n */\nfunction updateWrapDetails(details, bitmask) {\n  arrayEach(wrapFlags, function(pair) {\n    var value = '_.' + pair[0];\n    if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {\n      details.push(value);\n    }\n  });\n  return details.sort();\n}\n\nmodule.exports = updateWrapDetails;\n","var LazyWrapper = require('./_LazyWrapper'),\n    LodashWrapper = require('./_LodashWrapper'),\n    copyArray = require('./_copyArray');\n\n/**\n * Creates a clone of `wrapper`.\n *\n * @private\n * @param {Object} wrapper The wrapper to clone.\n * @returns {Object} Returns the cloned wrapper.\n */\nfunction wrapperClone(wrapper) {\n  if (wrapper instanceof LazyWrapper) {\n    return wrapper.clone();\n  }\n  var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);\n  result.__actions__ = copyArray(wrapper.__actions__);\n  result.__index__  = wrapper.__index__;\n  result.__values__ = wrapper.__values__;\n  return result;\n}\n\nmodule.exports = wrapperClone;\n","/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\nmodule.exports = constant;\n","var baseDifference = require('./_baseDifference'),\n    baseFlatten = require('./_baseFlatten'),\n    baseRest = require('./_baseRest'),\n    isArrayLikeObject = require('./isArrayLikeObject');\n\n/**\n * Creates an array of `array` values not included in the other given arrays\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. The order and references of result values are\n * determined by the first array.\n *\n * **Note:** Unlike `_.pullAll`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...Array} [values] The values to exclude.\n * @returns {Array} Returns the new array of filtered values.\n * @see _.without, _.xor\n * @example\n *\n * _.difference([2, 1], [2, 3]);\n * // => [1]\n */\nvar difference = baseRest(function(array, values) {\n  return isArrayLikeObject(array)\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n    : [];\n});\n\nmodule.exports = difference;\n","var arrayEvery = require('./_arrayEvery'),\n    baseEvery = require('./_baseEvery'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray'),\n    isIterateeCall = require('./_isIterateeCall');\n\n/**\n * Checks if `predicate` returns truthy for **all** elements of `collection`.\n * Iteration is stopped once `predicate` returns falsey. The predicate is\n * invoked with three arguments: (value, index|key, collection).\n *\n * **Note:** This method returns `true` for\n * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n * elements of empty collections.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`.\n * @example\n *\n * _.every([true, 1, null, 'yes'], Boolean);\n * // => false\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': false },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * // The `_.matches` iteratee shorthand.\n * _.every(users, { 'user': 'barney', 'active': false });\n * // => false\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.every(users, ['active', false]);\n * // => true\n *\n * // The `_.property` iteratee shorthand.\n * _.every(users, 'active');\n * // => false\n */\nfunction every(collection, predicate, guard) {\n  var func = isArray(collection) ? arrayEvery : baseEvery;\n  if (guard && isIterateeCall(collection, predicate, guard)) {\n    predicate = undefined;\n  }\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nmodule.exports = every;\n","var baseHas = require('./_baseHas'),\n    hasPath = require('./_hasPath');\n\n/**\n * Checks if `path` is a direct property of `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = { 'a': { 'b': 2 } };\n * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.has(object, 'a');\n * // => true\n *\n * _.has(object, 'a.b');\n * // => true\n *\n * _.has(object, ['a', 'b']);\n * // => true\n *\n * _.has(other, 'a');\n * // => false\n */\nfunction has(object, path) {\n  return object != null && hasPath(object, path, baseHas);\n}\n\nmodule.exports = has;\n","var isArrayLike = require('./isArrayLike'),\n    isObjectLike = require('./isObjectLike');\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\nmodule.exports = isArrayLikeObject;\n","/**\n * This method returns `undefined`.\n *\n * @static\n * @memberOf _\n * @since 2.3.0\n * @category Util\n * @example\n *\n * _.times(2, _.noop);\n * // => [undefined, undefined]\n */\nfunction noop() {\n  // No operation performed.\n}\n\nmodule.exports = noop;\n","var baseRest = require('./_baseRest'),\n    createWrap = require('./_createWrap'),\n    getHolder = require('./_getHolder'),\n    replaceHolders = require('./_replaceHolders');\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_PARTIAL_FLAG = 32;\n\n/**\n * Creates a function that invokes `func` with `partials` prepended to the\n * arguments it receives. This method is like `_.bind` except it does **not**\n * alter the `this` binding.\n *\n * The `_.partial.placeholder` value, which defaults to `_` in monolithic\n * builds, may be used as a placeholder for partially applied arguments.\n *\n * **Note:** This method doesn't set the \"length\" property of partially\n * applied functions.\n *\n * @static\n * @memberOf _\n * @since 0.2.0\n * @category Function\n * @param {Function} func The function to partially apply arguments to.\n * @param {...*} [partials] The arguments to be partially applied.\n * @returns {Function} Returns the new partially applied function.\n * @example\n *\n * function greet(greeting, name) {\n *   return greeting + ' ' + name;\n * }\n *\n * var sayHelloTo = _.partial(greet, 'hello');\n * sayHelloTo('fred');\n * // => 'hello fred'\n *\n * // Partially applied with placeholders.\n * var greetFred = _.partial(greet, _, 'fred');\n * greetFred('hi');\n * // => 'hi fred'\n */\nvar partial = baseRest(function(func, partials) {\n  var holders = replaceHolders(partials, getHolder(partial));\n  return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);\n});\n\n// Assign default placeholders.\npartial.placeholder = {};\n\nmodule.exports = partial;\n","var LazyWrapper = require('./_LazyWrapper'),\n    LodashWrapper = require('./_LodashWrapper'),\n    baseLodash = require('./_baseLodash'),\n    isArray = require('./isArray'),\n    isObjectLike = require('./isObjectLike'),\n    wrapperClone = require('./_wrapperClone');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates a `lodash` object which wraps `value` to enable implicit method\n * chain sequences. Methods that operate on and return arrays, collections,\n * and functions can be chained together. Methods that retrieve a single value\n * or may return a primitive value will automatically end the chain sequence\n * and return the unwrapped value. Otherwise, the value must be unwrapped\n * with `_#value`.\n *\n * Explicit chain sequences, which must be unwrapped with `_#value`, may be\n * enabled using `_.chain`.\n *\n * The execution of chained methods is lazy, that is, it's deferred until\n * `_#value` is implicitly or explicitly called.\n *\n * Lazy evaluation allows several methods to support shortcut fusion.\n * Shortcut fusion is an optimization to merge iteratee calls; this avoids\n * the creation of intermediate arrays and can greatly reduce the number of\n * iteratee executions. Sections of a chain sequence qualify for shortcut\n * fusion if the section is applied to an array and iteratees accept only\n * one argument. The heuristic for whether a section qualifies for shortcut\n * fusion is subject to change.\n *\n * Chaining is supported in custom builds as long as the `_#value` method is\n * directly or indirectly included in the build.\n *\n * In addition to lodash methods, wrappers have `Array` and `String` methods.\n *\n * The wrapper `Array` methods are:\n * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\n *\n * The wrapper `String` methods are:\n * `replace` and `split`\n *\n * The wrapper methods that support shortcut fusion are:\n * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\n * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\n * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\n *\n * The chainable wrapper methods are:\n * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\n * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\n * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\n * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,\n * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,\n * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,\n * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,\n * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,\n * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,\n * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,\n * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,\n * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,\n * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,\n * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,\n * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,\n * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,\n * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,\n * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,\n * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,\n * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,\n * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,\n * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,\n * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,\n * `zipObject`, `zipObjectDeep`, and `zipWith`\n *\n * The wrapper methods that are **not** chainable by default are:\n * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\n * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,\n * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,\n * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\n * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,\n * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,\n * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,\n * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,\n * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,\n * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,\n * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,\n * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,\n * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,\n * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,\n * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,\n * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,\n * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,\n * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,\n * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,\n * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,\n * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,\n * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,\n * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,\n * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,\n * `upperFirst`, `value`, and `words`\n *\n * @name _\n * @constructor\n * @category Seq\n * @param {*} value The value to wrap in a `lodash` instance.\n * @returns {Object} Returns the new `lodash` wrapper instance.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * var wrapped = _([1, 2, 3]);\n *\n * // Returns an unwrapped value.\n * wrapped.reduce(_.add);\n * // => 6\n *\n * // Returns a wrapped value.\n * var squares = wrapped.map(square);\n *\n * _.isArray(squares);\n * // => false\n *\n * _.isArray(squares.value());\n * // => true\n */\nfunction lodash(value) {\n  if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\n    if (value instanceof LodashWrapper) {\n      return value;\n    }\n    if (hasOwnProperty.call(value, '__wrapped__')) {\n      return wrapperClone(value);\n    }\n  }\n  return new LodashWrapper(value);\n}\n\n// Ensure wrappers are instances of `baseLodash`.\nlodash.prototype = baseLodash.prototype;\nlodash.prototype.constructor = lodash;\n\nmodule.exports = lodash;\n","var assignValue = require('./_assignValue'),\n    baseZipObject = require('./_baseZipObject');\n\n/**\n * This method is like `_.fromPairs` except that it accepts two arrays,\n * one of property identifiers and one of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 0.4.0\n * @category Array\n * @param {Array} [props=[]] The property identifiers.\n * @param {Array} [values=[]] The property values.\n * @returns {Object} Returns the new object.\n * @example\n *\n * _.zipObject(['a', 'b'], [1, 2]);\n * // => { 'a': 1, 'b': 2 }\n */\nfunction zipObject(props, values) {\n  return baseZipObject(props || [], values || [], assignValue);\n}\n\nmodule.exports = zipObject;\n"],"sourceRoot":""}