{"version":3,"sources":["webpack://gatsby-test/./src/pages/RoughUI.js"],"names":["React","anchorEl","setAnchorEl","dataProvider","setDataProvider","classifierManager","setClassifierManager","setTrainingObject","userUploadFileHandler","setUserUploadFileHandler","undefined","constructTileState","tileState","setTileState","handleCloseFetchDropDown","fetchType","handleFetch","console","log","classedCellPairObjects","fetchUpToNCellPairsByClass","imageProvider","ImageProvider","dataURLs","map","CellPair","promiseImages","returnAllImgFileNames","ImageNumber","name","findFile","file","fileReaderPromiseImage","Promise","all","then","images","coords","getCordsforCellDisplay","getDataURLPromise","newTileState","handleUpload","eventObject","UserUploadFileHandler","uploadHandler","UploadHandler","getDataHandlerandStartingTrainingSet","uploadReturnObject","data_provider","trainingTable","training_data","training_table","trainingDataTable","getDataColumnsPaired","trainingLabels","getTrainingLabels","initialTrainingData","row_object","ObjectNumber","getRow","totalFeatures","features","featuresToUse","filter","elem","includes","initialTrainingObject","classifierType","trainingData","ClassifierManager","initTrainPromise","unclassifed","dataURL","idx","id","address","positive","negative","style","resize","src","logo","marginRight","height","color","marginLeft","container","justify","spacing","marginBottom","key","item","variant","aria-controls","aria-haspopup","onClick","event","currentTarget","keepMounted","open","Boolean","onClose","component","type","hidden","webkitdirectory","mozdirectory","msdirectory","odirectory","directory","multiple","onChange","sourceId","sourceIndex","targetIndex","targetId","result","move","swap","textAlign","backgroundColor","paddingLeft","className","boxesPerRow","rowHeight","backgroundImage","userSelect","paddingRight","margin"],"mappings":"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","file":"component---src-pages-rough-ui-js-56dc33002b691a87bf6d.js","sourcesContent":["import React from 'react';\nimport { Row, Col, Container} from \"reactstrap\";\nimport {Box, Button, Grid, IconButton, Menu, MenuItem}from '@material-ui/core'; \nimport logo from '../CPA_newlogo.png';\nimport {Image, Dropdown, DropdownButton} from 'react-bootstrap';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\n\nimport UploadHandler from '../classes/UploadHandler'\nimport {ClassifierManager} from '../classes/ClassifierManager'\nimport {ImageProvider} from '../classes/ImageProvider.js';\nimport UserUploadFileHandler from '../classes/UserUploadFileHandler'\nimport {Classifier} from '../classes/Classifier'\n\nimport {\n    GridContextProvider,\n    GridDropZone,\n    GridItem,\n    swap,\n    move\n  } from \"react-grid-dnd\";\n  \n  import \"../dndstyles.css\";\n\nfunction TestUI(){\n    \n    \n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const [dataProvider, setDataProvider] = React.useState(null)\n\n    // var classifierManager = null;\n    const [classifierManager, setClassifierManager] = React.useState(null)\n    const [classifier, setClassifier] = React.useState(null)\n    const [trainingObject, setTrainingObject] = React.useState(null)\n    const [userUploadFileHandler, setUserUploadFileHandler] = React.useState(null)\n    const [dataURLs, setDataURLs] = React.useState(undefined)\n    const [tileState, setTileState] = React.useState( constructTileState([]) );\n    const N = 20\n\n    const handleClickFetchDropDown = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleCloseFetchDropDown = (fetchType) => {\n        setAnchorEl(null);\n        if (fetchType !== undefined) {\n            handleFetch(fetchType)\n        }\n    };\n\n    const handleFetch = async (fetchType) => {\n        console.log(\"fetch \" + fetchType)\n        const classedCellPairObjects = classifierManager.fetchUpToNCellPairsByClass(fetchType, N)\n        const imageProvider = new ImageProvider();\n        \n        if (fetchType === \"random\") {\n            const dataURLs = classedCellPairObjects.map(CellPair => {\n                const channelFileNames = dataProvider.returnAllImgFileNames(CellPair.ImageNumber)\n                const channelFiles = channelFileNames.map(name => { //Alternatively, we could have this.dp.returnAllImgPromisesPerImg({'ImageNumber': 2}, fh)\n                    return userUploadFileHandler.findFile(name)       // and abstract from 8-17 or more\n                })\n                const promiseImages = channelFiles.map(file => {\n                    const promiseImage =  userUploadFileHandler.fileReaderPromiseImage(file)\n                    return promiseImage;    \n                })\n                return Promise.all(promiseImages)\n                    .then(images => {\n                        const coords = dataProvider.getCordsforCellDisplay(CellPair)\n                        return imageProvider.getDataURLPromise(images, coords);   //The only method of imageprovider. If cords is left blank, it will produce a whole image. Should be\n                    })                                                //static class or function\n            })\n            \n            const newTileState = constructTileState(await Promise.all(dataURLs))\n            setTileState(newTileState)\n            console.log(newTileState)\n            console.log(dataURLs)\n        }\n\n    }\n\n    const handleUpload = async (eventObject) => {\n\n        const userUploadFileHandler = new UserUploadFileHandler(eventObject)\n        setUserUploadFileHandler(userUploadFileHandler)\n\n        const uploadHandler = new UploadHandler(eventObject)\n        const uploadReturnObject = await uploadHandler.getDataHandlerandStartingTrainingSet();\n\n        console.log(uploadReturnObject)\n        const dataProvider = uploadReturnObject.data_provider\n        setDataProvider(dataProvider)\n        const trainingTable = uploadReturnObject.training_data.training_table\n        const trainingDataTable = trainingTable.getDataColumnsPaired()\n        console.log(trainingTable)\n        const trainingLabels = trainingTable.getTrainingLabels()\n        const initialTrainingData = trainingDataTable.map(row_object => {\n            const ObjectNumber = row_object['objectnum']\n            const ImageNumber = row_object['imagenum']\n            return dataProvider.getRow('object_data', {ObjectNumber, ImageNumber})\n        })\n        const totalFeatures = uploadReturnObject.training_data.features\n        const featuresToUse = totalFeatures.filter((elem)=>!elem.includes(\"Location\") && (elem !== \"ObjectNumber\") && (elem !== \"ImageNumber\"))\n        console.log(\"finished data initialization\")\n        const initialTrainingObject = {\n            classifierType: \"LogisticRegression\",\n            trainingData: initialTrainingData,\n            trainingLabels: trainingLabels,\n            featuresToUse: featuresToUse\n        }\n        setTrainingObject(initialTrainingObject)\n        console.log(\"starting initial training\")\n        const classifierManager = new ClassifierManager(dataProvider, initialTrainingObject)\n        setClassifierManager(classifierManager)\n\n        await classifierManager.initTrainPromise()\n\n        console.log(\"finished upload\")\n    }\n\n    function constructTileState(dataURLs) {\n        return {\n            unclassifed: dataURLs.map((dataURL, idx) => {return {id: idx, address: dataURL}}),  \n            positive: [],\n            negative: []\n        };\n    }\n\n    function onChange(sourceId, sourceIndex, targetIndex, targetId) {\n        if (targetId) {\n          const result = move(\n            tileState[sourceId],\n            tileState[targetId],\n            sourceIndex,\n            targetIndex\n          );\n          return setTileState({\n            ...tileState,\n            [sourceId]: result[0],\n            [targetId]: result[1]\n          });\n        }\n    \n        const result = swap(tileState[sourceId], sourceIndex, targetIndex);\n        return setTileState({\n          ...tileState,\n          [sourceId]: result\n        });\n      }\n    \n    return (\n        <div style={{resize: 'horizontal'}}>\n    \n        <Row>\n       \n        \n        <Col>\n        <Image src={logo} style={{marginRight:\"40%\", height:'90px'}}></Image>\n        </Col>\n\n        <Col >\n        <IconButton style={{color: \"black\", marginLeft:\"50%\"}}> <SaveAltIcon /></IconButton> \n        </Col>\n\n\n        </Row>\n        <Row>\n        \n        <Grid container justify=\"center\" spacing={2} style={{marginBottom: 15}}>\n       \n        <Grid key={0} item>\n        {/* <DropdownButton variant=\"secondary\" title= \"Fetch\">\n        \n         <Dropdown.Item >Positive</Dropdown.Item>\n         <Dropdown.Item >Negative</Dropdown.Item>\n         <Dropdown.Item >Random</Dropdown.Item>\n        \n        </DropdownButton> */}\n            <Button variant=\"contained\" aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClickFetchDropDown}>\n            Fetch\n            </Button>\n            <Menu\n            id=\"simple-menu\"\n            anchorEl={anchorEl}\n            keepMounted\n            open={Boolean(anchorEl)}\n            onClose={handleCloseFetchDropDown}\n            >\n            <MenuItem onClick={()=>handleCloseFetchDropDown(\"random\")}>Random</MenuItem>\n            <MenuItem onClick={()=>handleCloseFetchDropDown(\"positive\")}>Positive</MenuItem>\n            <MenuItem onClick={()=>handleCloseFetchDropDown(\"negative\")}>Negative</MenuItem>\n            </Menu>\n    </Grid>\n\n\n        <Grid key={1} item>\n        <Button variant=\"contained\" onClick={()=>{}}>Train</Button>\n        </Grid>\n\n        <Grid key={2} item>\n        <Button variant=\"contained\" onClick={()=>{}}>Evaluate</Button>\n        </Grid>\n        <Grid key={3} item>\n        <Button variant=\"contained\" component=\"label\" onClick={()=>console.log(\"Upload!\")}> \n            Upload\n            <input  type=\"file\"\n                    hidden webkitdirectory=\"true\"\n                    mozdirectory=\"true\"\n                    msdirectory=\"true\"\n                    odirectory=\"true\"\n                    directory=\"true\"\n                    multiple\n                    onChange = {(eventObject)=>{handleUpload(eventObject)}}   \n            />\n        </Button>\n        </Grid>\n    </Grid>\n    </Row>\n\n    <GridContextProvider onChange={onChange}>\n        <div>\n        \n        <label style = {{textAlign:\"left\", backgroundColor: 'white', paddingLeft: \"10%\", marginBottom: 0.5} }>Unclassified</label>\n        \n        <div className=\"topContainer\">\n       \n        <GridDropZone\n             className=\"dropzone \"\n            id=\"unclassifed\"\n            boxesPerRow={8}\n            rowHeight={70}\n          >\n             \n            {tileState.unclassifed.map(item => (\n              <GridItem key={item.id}>\n                <div className=\"grid-item\" >\n                    <div className=\"grid-item-content\" style = {{backgroundImage:  `url(${item.address})`}} >\n                        \n                        </div> \n                </div>\n              </GridItem>\n            ))}\n          </GridDropZone>\n          </div>\n        \n        <Row>\n     \n          <label style = {{textAlign:\"left\", backgroundColor: 'white', paddingLeft: \"11%\", userSelect: \"none\", marginBottom:\"0.5%\"} }>Positive</label> \n    \n        \n          <label style = {{textAlign:\"left\", backgroundColor: 'white', paddingRight: \"8%\", marginBottom: 0, userSelect: \"none\", margin: \"auto\",  marginBottom:\"0.5%\"} }>Negative</label>\n       \n          </Row>\n         \n         <Row>\n\n          <GridDropZone\n            className=\"dropzone positive\"\n            id=\"positive\"\n            boxesPerRow={4}\n            rowHeight={70}\n          >\n            \n            {tileState.positive.map(item => (\n              <GridItem key={item.id}>\n                <div className=\"grid-item\"> \n                    <div className=\"grid-item-content\" style = {{backgroundImage: `url(${item.address})`}}>\n                         \n                        </div>  \n                </div>\n              </GridItem>\n            ))}\n          </GridDropZone>\n   \n      \n          <GridDropZone\n            className=\"dropzone negative\"\n            id=\"negative\"\n            boxesPerRow={4}\n            rowHeight={70}\n          >\n            {tileState.negative.map(item => (\n              <GridItem key={item.id}>\n                <div className=\"grid-item\">\n                <div className=\"grid-item-content\" style = {{backgroundImage: `url(${item.address})`}}>\n                        \n                        </div>      \n                </div>\n              </GridItem>\n            ))}\n          </GridDropZone>\n\n     \n      \n        </Row>\n        </div>\n      </GridContextProvider>\n \n    </div>\n\n    );\n}\n\n\n\n\n\nexport default TestUI; "],"sourceRoot":""}