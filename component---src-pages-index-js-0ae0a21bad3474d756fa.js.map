{"version":3,"sources":["webpack://gatsby-test/./src/pages/index.js","webpack://gatsby-test/./src/classes/test.tsx"],"names":["console","log","React","anchorEl","setAnchorEl","dataProvider","setDataProvider","trainingObject","setTrainingObject","userUploadFileHandler","setUserUploadFileHandler","constructTileState","tileState","setTileState","imageGridManager","setImageGridManager","featuresToUse","setFeaturesToUseState","fetchButtonEnabled","setFetchButtonEnabled","trainButtonEnabled","setTrainButtonEnabled","evaluateButtonEnabled","downloadButtonEnabled","setDownloadButtonEnabled","uploadButtonEnabled","setUploadButtonEnabled","classifier","setClassifier","handleCloseFetchDropDown","fetchType","undefined","handleFetch","disableIterationButtons","enableIterationButtons","unclassified","positive","negative","sampledCellPairObjects","getNRandomObjs","inputData","map","cellPair","getRow","desiredLabel","predicted_labels","predict","classedCellPairObjects","filter","pair","index","slice","imageProvider","ImageProvider","dataURLPromiseArray","CellPair","promiseImages","returnAllImgFileNames","ImageNumber","name","findFile","file","fileReaderPromiseImage","Promise","all","then","images","coords","getCordsforCellDisplay","getDataURLPromise","dataURLs","newTileState","ImageGridManager","handleTrain","negativeIDs","item","id","positiveIDs","clearedTileState","setClassByIndexArray","negativeCellPairs","getPairsByClass","positiveCellPairs","negativeObjectDataRows","ObjectNumber","positiveObjectDataRows","trainingDataAddition","negativeLabels","Array","length","fill","positiveLabels","trainingLabelsAddition","concat","UpdatedTrainingObject","classifierType","trainingData","trainingLabels","newClassifier","Classifier","trainPromise","handleUpload","eventObject","UserUploadFileHandler","uploadHandler","UploadHandler","getDataHandlerandStartingTrainingSet","uploadReturnObject","data_provider","trainingTable","training_data","training_table","trainingDataTable","getDataColumnsPaired","getTrainingLabels","initialTrainingData","row_object","totalFeatures","features","tempFeaturesToUse","elem","includes","initialTrainingObject","handleDownload","DownloadModelPromise","dataURL","idx","address","style","resize","Row","Col","Image","src","logo","marginRight","height","IconButton","color","marginLeft","SaveAlt","Grid","container","justify","spacing","marginBottom","key","Button","disabled","variant","aria-controls","aria-haspopup","onClick","event","currentTarget","Menu","keepMounted","open","Boolean","onClose","MenuItem","component","type","hidden","webkitdirectory","mozdirectory","msdirectory","odirectory","directory","multiple","onChange","GridContext","sourceId","sourceIndex","targetIndex","targetId","result","move","swap","textAlign","backgroundColor","paddingLeft","className","GridDropZone","boxesPerRow","rowHeight","GridItem","backgroundImage","userSelect","paddingRight","margin"],"mappings":"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","file":"component---src-pages-index-js-0ae0a21bad3474d756fa.js","sourcesContent":["import React from 'react';\nimport { Row, Col, Container} from \"reactstrap\";\nimport {Box, Button, Grid, IconButton, Menu, MenuItem}from '@material-ui/core'; \nimport logo from '../CPA_newlogo.png';\nimport {Image, Dropdown, DropdownButton} from 'react-bootstrap';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\n\nimport UploadHandler from '../classes/UploadHandler'\nimport {ClassifierManager} from '../classes/ClassifierManager'\nimport {ImageProvider} from '../classes/ImageProvider.js';\nimport UserUploadFileHandler from '../classes/UserUploadFileHandler'\nimport {Classifier} from '../classes/Classifier'\nimport {ImageGridManager}  from '../classes/imGridManager'\n\nimport {test} from '../classes/test'\n\nimport {\n    GridContextProvider,\n    GridDropZone,\n    GridItem,\n    swap,\n    move\n  } from \"react-grid-dnd\";\n  \n  import \"../dndstyles.css\";\n\n\n\nfunction TestUI(){\n\n    console.log(test(3))\n    \n    \n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const [dataProvider, setDataProvider] = React.useState(null)\n\n    // var classifierManager = null;\n    // const [classifierManager, setClassifierManager] = React.useState(null)\n    const [trainingObject, setTrainingObject] = React.useState(null)\n    const [userUploadFileHandler, setUserUploadFileHandler] = React.useState(null)\n    const [tileState, setTileState] = React.useState( constructTileState([]) );\n    const [imageGridManager, setImageGridManager] = React.useState(null)\n    const [lastFetchState, setLastFetchState] = React.useState(null)\n    const [featuresToUse, setFeaturesToUseState] = React.useState(null)\n\n    const [fetchButtonEnabled, setFetchButtonEnabled] = React.useState(false)\n    const [trainButtonEnabled, setTrainButtonEnabled] = React.useState(false)\n    const [evaluateButtonEnabled, setEvaluateButtonEnabled] = React.useState(false)\n    const [downloadButtonEnabled, setDownloadButtonEnabled] = React.useState(false)\n    const [uploadButtonEnabled, setUploadButtonEnabled] = React.useState(true)\n    const [classifier, setClassifier] = React.useState(null)\n    const N = 20\n\n    const handleClickFetchDropDown = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleCloseFetchDropDown = (fetchType) => {\n        setAnchorEl(null);\n        if (fetchType !== undefined) {\n            handleFetch(fetchType)\n        }\n    };\n\n    const disableIterationButtons = () => {\n      setFetchButtonEnabled(false)\n      setTrainButtonEnabled(false)\n      setDownloadButtonEnabled(false)\n    }\n    const enableIterationButtons = () => {\n      setFetchButtonEnabled(true)\n      setTrainButtonEnabled(true)\n      setDownloadButtonEnabled(true)\n    }\n\n    const handleFetch = async (fetchType) => {\n\n      disableIterationButtons()\n\n      \n      // var fakeClassifier2 = new Classifier(trainingObject);\n      \n      // await fakeClassifier2.trainPromise()\n      // console.log( Object.keys(trainingObject.trainingData[0]))\n\n      // empty grids\n      const emptyTileState = { unclassified: [], positive: [], negative: []}\n      setTileState(emptyTileState)\n\n\n      const sampledCellPairObjects = dataProvider.getNRandomObjs(100)\n      const inputData = sampledCellPairObjects.map(\n        cellPair => dataProvider.getRow('object_data', cellPair)\n      )\n\n      var desiredLabel = 0\n      if (fetchType == \"positive\") {\n          desiredLabel = 1\n      }\n\n      const predicted_labels = classifier.predict(inputData)\n      var classedCellPairObjects = sampledCellPairObjects\n      if (fetchType !== 'random'){\n        classedCellPairObjects = sampledCellPairObjects.filter(\n          (pair, index) => predicted_labels[index] === desiredLabel \n        )\n      }\n      classedCellPairObjects = classedCellPairObjects.slice(0,20)\n\n      const imageProvider = new ImageProvider();\n      var dataURLPromiseArray = null;\n      \n\n      \n        \n        if (fetchType === \"random\") {\n            const dataURLPromiseArray = classedCellPairObjects.map(CellPair => {\n                const channelFileNames = dataProvider.returnAllImgFileNames(CellPair.ImageNumber)\n                const channelFiles = channelFileNames.map(name => { //Alternatively, we could have this.dp.returnAllImgPromisesPerImg({'ImageNumber': 2}, fh)\n                    return userUploadFileHandler.findFile(name)       // and abstract from 8-17 or more\n                })\n                const promiseImages = channelFiles.map(file => {\n                    const promiseImage =  userUploadFileHandler.fileReaderPromiseImage(file)\n                    return promiseImage;    \n                })\n                return Promise.all(promiseImages)\n                    .then(images => {\n                        const coords = dataProvider.getCordsforCellDisplay(CellPair)\n                        return imageProvider.getDataURLPromise(images, coords);   //The only method of imageprovider. If cords is left blank, it will produce a whole image. Should be\n                    })                                                //static class or function\n            })\n            const dataURLs = await Promise.all(dataURLPromiseArray)\n            const newTileState = constructTileState(dataURLs)\n            setTileState(newTileState)\n            console.log(newTileState)\n            console.log(dataURLs)\n            setImageGridManager(new ImageGridManager(classedCellPairObjects, dataURLs))\n\n            \n            enableIterationButtons()\n            return\n        } \n\n        if (fetchType === \"positive\") {\n          dataURLPromiseArray = classedCellPairObjects.map(CellPair => {\n            const channelFileNames = dataProvider.returnAllImgFileNames(CellPair.ImageNumber)\n            const channelFiles = channelFileNames.map(name => { //Alternatively, we could have this.dp.returnAllImgPromisesPerImg({'ImageNumber': 2}, fh)\n                return userUploadFileHandler.findFile(name)       // and abstract from 8-17 or more\n            })\n            const promiseImages = channelFiles.map(file => {\n                const promiseImage =  userUploadFileHandler.fileReaderPromiseImage(file)\n                return promiseImage;    \n            })\n            return Promise.all(promiseImages)\n                .then(images => {\n                    const coords = dataProvider.getCordsforCellDisplay(CellPair)\n                    return imageProvider.getDataURLPromise(images, coords);   //The only method of imageprovider. If cords is left blank, it will produce a whole image. Should be\n                })                                                //static class or function\n        })\n        \n        const dataURLs = await Promise.all(dataURLPromiseArray)\n        const newTileState = constructTileState(dataURLs)\n        setTileState(newTileState)\n        console.log(newTileState)\n        console.log(dataURLs)\n        setImageGridManager(new ImageGridManager(classedCellPairObjects, dataURLs))\n        enableIterationButtons()\n        return\n      }\n\n      if (fetchType === 'negative') {\n        dataURLPromiseArray = classedCellPairObjects.map(CellPair => {\n          const channelFileNames = dataProvider.returnAllImgFileNames(CellPair.ImageNumber)\n          const channelFiles = channelFileNames.map(name => { //Alternatively, we could have this.dp.returnAllImgPromisesPerImg({'ImageNumber': 2}, fh)\n              return userUploadFileHandler.findFile(name)       // and abstract from 8-17 or more\n          })\n          const promiseImages = channelFiles.map(file => {\n              const promiseImage =  userUploadFileHandler.fileReaderPromiseImage(file)\n              return promiseImage;    \n          })\n          return Promise.all(promiseImages)\n              .then(images => {\n                  const coords = dataProvider.getCordsforCellDisplay(CellPair)\n                  return imageProvider.getDataURLPromise(images, coords);   //The only method of imageprovider. If cords is left blank, it will produce a whole image. Should be\n              })                                                //static class or function\n      })\n      \n      const dataURLs = await Promise.all(dataURLPromiseArray)\n      const newTileState = constructTileState(dataURLs)\n      setTileState(newTileState)\n      console.log(newTileState)\n      console.log(dataURLs)\n      setImageGridManager(new ImageGridManager(classedCellPairObjects, dataURLs))\n      enableIterationButtons()\n      return\n    }\n    \n  }\n\n  const handleTrain = async () => {\n\n    disableIterationButtons()\n\n    \n\n      const negativeIDs = tileState.negative.map(item => item.id)\n      const positiveIDs = tileState.positive.map(item => item.id)\n\n      const clearedTileState = { unclassified: tileState.unclassified, positive: [], negative: []}\n      setTileState(clearedTileState)\n      console.log(negativeIDs, tileState)\n      imageGridManager.setClassByIndexArray('negative', negativeIDs)\n      imageGridManager.setClassByIndexArray('positive', positiveIDs)\n\n      const negativeCellPairs = imageGridManager.getPairsByClass('negative')\n      const positiveCellPairs = imageGridManager.getPairsByClass('positive')\n \n      const negativeObjectDataRows = negativeCellPairs.map(cellPair => dataProvider.getRow('object_data', {ImageNumber: cellPair.ImageNumber, ObjectNumber: cellPair.ObjectNumber}))\n      const positiveObjectDataRows = positiveCellPairs.map(cellPair => dataProvider.getRow('object_data', {ImageNumber: cellPair.ImageNumber, ObjectNumber: cellPair.ObjectNumber}))\n      const trainingDataAddition = [...negativeObjectDataRows, ...positiveObjectDataRows]\n\n      const negativeLabels = new Array(negativeObjectDataRows.length).fill(0)\n      const positiveLabels = new Array(positiveObjectDataRows.length).fill(1)\n      const trainingLabelsAddition = negativeLabels.concat(positiveLabels)\n\n      const UpdatedTrainingObject = {\n        classifierType: \"LogisticRegression\",\n        trainingData: [...trainingDataAddition, ...trainingObject.trainingData],\n        trainingLabels: [...trainingLabelsAddition, ...trainingObject.trainingLabels],\n        featuresToUse: featuresToUse\n      }\n      console.log(UpdatedTrainingObject)\n      setTrainingObject(UpdatedTrainingObject)\n      const newClassifier = new Classifier(UpdatedTrainingObject)\n      await newClassifier.trainPromise()\n      setClassifier(newClassifier)\n      // const newClassifierManager = new ClassifierManager(dataProvider, UpdatedTrainingObject)\n      \n      \n      // setClassifierManager(newClassifierManager)\n\n      \n      console.log(\"finished train\")\n      enableIterationButtons()\n    \n  }\n\n    const handleUpload = async (eventObject) => {\n        setUploadButtonEnabled(false)\n        const userUploadFileHandler = new UserUploadFileHandler(eventObject)\n        setUserUploadFileHandler(userUploadFileHandler)\n\n        const uploadHandler = new UploadHandler(eventObject)\n        const uploadReturnObject = await uploadHandler.getDataHandlerandStartingTrainingSet();\n\n        const dataProvider = uploadReturnObject.data_provider\n        setDataProvider(dataProvider)\n        const trainingTable = uploadReturnObject.training_data.training_table\n        const trainingDataTable = trainingTable.getDataColumnsPaired()\n\n        const trainingLabels = trainingTable.getTrainingLabels()\n        const initialTrainingData = trainingDataTable.map(row_object => {\n            const ObjectNumber = row_object['objectnum']\n            const ImageNumber = row_object['imagenum']\n            return dataProvider.getRow('object_data', {ObjectNumber, ImageNumber})\n        })\n        const totalFeatures = uploadReturnObject.training_data.features\n        const tempFeaturesToUse = totalFeatures.filter((elem)=>!elem.includes(\"Location\") && (elem !== \"ObjectNumber\") && (elem !== \"ImageNumber\"))\n        setFeaturesToUseState(tempFeaturesToUse)\n        console.log(\"finished data initialization\")\n        const initialTrainingObject = {\n            classifierType: \"LogisticRegression\",\n            trainingData: initialTrainingData,\n            trainingLabels: trainingLabels,\n            featuresToUse: tempFeaturesToUse\n        }\n        setTrainingObject(initialTrainingObject)\n        // console.log(\"starting initial training\")\n        // const newClassifierManager = new ClassifierManager(dataProvider, initialTrainingObject)\n        \n        // setClassifierManager(newClassifierManager)\n        console.log(\"start initial train\")\n        const newClassifier = new Classifier(initialTrainingObject)\n        await newClassifier.trainPromise()\n        setClassifier(newClassifier)\n        console.log(\"end initial train\")\n\n        setFetchButtonEnabled(true)\n        setTrainButtonEnabled(true)\n        setDownloadButtonEnabled(true)\n        \n        \n        console.log(\"finished upload\")\n    }\n\n    const handleDownload = async () => {\n      disableIterationButtons()\n      \n      classifier.DownloadModelPromise()\n        .then(enableIterationButtons)\n      \n    }\n\n    function constructTileState(dataURLs) {\n        return {\n            unclassified: dataURLs.map((dataURL, idx) => {return {id: idx, address: dataURL}}),  \n            positive: [],\n            negative: []\n        };\n    }\n\n    function onChange(sourceId, sourceIndex, targetIndex, targetId) {\n        if (targetId) {\n          const result = move(\n            tileState[sourceId],\n            tileState[targetId],\n            sourceIndex,\n            targetIndex\n          );\n          return setTileState({\n            ...tileState,\n            [sourceId]: result[0],\n            [targetId]: result[1]\n          });\n        }\n    \n        const result = swap(tileState[sourceId], sourceIndex, targetIndex);\n        return setTileState({\n          ...tileState,\n          [sourceId]: result\n        });\n      }\n    \n    return (\n        <div style={{resize: 'horizontal'}}>\n    \n        <Row>\n       \n        \n        <Col>\n        <Image src={logo} style={{marginRight:\"40%\", height:'90px'}}></Image>\n        </Col>\n\n        <Col >\n        <IconButton style={{color: \"black\", marginLeft:\"50%\"}}> <SaveAltIcon /></IconButton> \n        </Col>\n\n\n        </Row>\n        <Row>\n        \n        <Grid container justify=\"center\" spacing={2} style={{marginBottom: 15}}>\n       \n        <Grid key={0} item>\n        {/* <DropdownButton variant=\"secondary\" title= \"Fetch\">\n        \n         <Dropdown.Item >Positive</Dropdown.Item>\n         <Dropdown.Item >Negative</Dropdown.Item>\n         <Dropdown.Item >Random</Dropdown.Item>\n        \n        </DropdownButton> */}\n            <Button disabled={!fetchButtonEnabled} variant=\"contained\" aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClickFetchDropDown}>\n            Fetch\n            </Button>\n            <Menu\n            id=\"simple-menu\"\n            anchorEl={anchorEl}\n            keepMounted\n            open={Boolean(anchorEl)}\n            onClose={handleCloseFetchDropDown}\n            >\n            <MenuItem onClick={()=>handleCloseFetchDropDown(\"random\")}>Random</MenuItem>\n            <MenuItem onClick={()=>handleCloseFetchDropDown(\"positive\")}>Positive</MenuItem>\n            <MenuItem onClick={()=>handleCloseFetchDropDown(\"negative\")}>Negative</MenuItem>\n            </Menu>\n    </Grid>\n\n\n        <Grid key={1} item>\n        <Button disabled={!trainButtonEnabled} variant=\"contained\" onClick={handleTrain}>Train</Button>\n        </Grid>\n\n        <Grid key={2} item>\n        <Button disabled={!evaluateButtonEnabled} variant=\"contained\" onClick={()=>{}}>Evaluate</Button>\n        </Grid>\n        <Grid key={3} item>\n        <Button disabled={!downloadButtonEnabled} variant=\"contained\" onClick={handleDownload}>Download</Button>\n        </Grid>\n        <Grid key={4} item>\n        <Button disabled={!uploadButtonEnabled} variant=\"contained\" component=\"label\" onClick={()=>console.log(\"Upload!\")}> \n            Upload\n            <input  type=\"file\"\n                    hidden webkitdirectory=\"true\"\n                    mozdirectory=\"true\"\n                    msdirectory=\"true\"\n                    odirectory=\"true\"\n                    directory=\"true\"\n                    multiple\n                    onChange = {(eventObject)=>{handleUpload(eventObject)}}   \n            />\n        </Button>\n        </Grid>\n    </Grid>\n    </Row>\n\n    <GridContextProvider onChange={onChange}>\n        <div>\n        \n        <label style = {{textAlign:\"left\", backgroundColor: 'white', paddingLeft: \"10%\", marginBottom: 0.5} }>Unclassified</label>\n        \n        <div className=\"topContainer\">\n       \n        <GridDropZone\n             className=\"dropzone \"\n            id=\"unclassified\"\n            boxesPerRow={8}\n            rowHeight={70}\n          >\n             \n            {tileState.unclassified.map(item => (\n              <GridItem key={item.id}>\n                <div className=\"grid-item\" >\n                    <div className=\"grid-item-content\" style = {{backgroundImage:  `url(${item.address})`}} >\n                        \n                        </div> \n                </div>\n              </GridItem>\n            ))}\n          </GridDropZone>\n          </div>\n        \n        <Row>\n     \n          <label style = {{textAlign:\"left\", backgroundColor: 'white', paddingLeft: \"11%\", userSelect: \"none\", marginBottom:\"0.5%\"} }>Positive</label> \n    \n        \n          <label style = {{textAlign:\"left\", backgroundColor: 'white', paddingRight: \"8%\", marginBottom: 0, userSelect: \"none\", margin: \"auto\",  marginBottom:\"0.5%\"} }>Negative</label>\n       \n          </Row>\n         \n         <Row>\n\n          <GridDropZone\n            className=\"dropzone positive\"\n            id=\"positive\"\n            boxesPerRow={4}\n            rowHeight={70}\n          >\n            \n            {tileState.positive.map(item => (\n              <GridItem key={item.id}>\n                <div className=\"grid-item\"> \n                    <div className=\"grid-item-content\" style = {{backgroundImage: `url(${item.address})`}}>\n                         \n                        </div>  \n                </div>\n              </GridItem>\n            ))}\n          </GridDropZone>\n   \n      \n          <GridDropZone\n            className=\"dropzone negative\"\n            id=\"negative\"\n            boxesPerRow={4}\n            rowHeight={70}\n          >\n            {tileState.negative.map(item => (\n              <GridItem key={item.id}>\n                <div className=\"grid-item\">\n                <div className=\"grid-item-content\" style = {{backgroundImage: `url(${item.address})`}}>\n                        \n                        </div>      \n                </div>\n              </GridItem>\n            ))}\n          </GridDropZone>\n\n     \n      \n        </Row>\n        </div>\n      </GridContextProvider>\n \n    </div>\n\n    );\n}\n\n\n\n\n\nexport default TestUI; ","function test(value:number) : string{\n\n    return 'a'\n}\n\nexport {test}"],"sourceRoot":""}