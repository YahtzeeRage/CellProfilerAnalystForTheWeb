{"version":3,"sources":["webpack://gatsby-test/./src/pages/index.js"],"names":["React","anchorEl","setAnchorEl","dataProvider","setDataProvider","trainingObject","setTrainingObject","userUploadFileHandler","setUserUploadFileHandler","constructTileState","tileState","setTileState","imageGridManager","setImageGridManager","setLastFetchState","featuresToUse","setFeaturesToUseState","fetchButtonEnabled","setFetchButtonEnabled","trainButtonEnabled","setTrainButtonEnabled","evaluateButtonEnabled","downloadButtonEnabled","setDownloadButtonEnabled","uploadButtonEnabled","setUploadButtonEnabled","handleCloseFetchDropDown","fetchType","undefined","handleFetch","disableIterationButtons","enableIterationButtons","unclassified","positive","negative","classifierManager","ClassifierManager","initTrainPromise","console","log","classedCellPairObjects","fetchUpToNCellPairsByClass","imageProvider","ImageProvider","dataURLPromiseArray","map","CellPair","promiseImages","returnAllImgFileNames","ImageNumber","name","findFile","file","fileReaderPromiseImage","Promise","all","then","images","coords","getCordsforCellDisplay","getDataURLPromise","dataURLs","newTileState","ImageGridManager","handleTrain","negativeIDs","item","id","positiveIDs","setClassByIndexArray","negativeCellPairs","getPairsByClass","positiveCellPairs","negativeObjectDataRows","cellPair","getRow","ObjectNumber","positiveObjectDataRows","trainingDataAddition","negativeLabels","Array","length","fill","positiveLabels","trainingLabelsAddition","concat","UpdatedTrainingObject","classifierType","trainingData","trainingLabels","clearedTileState","handleUpload","eventObject","UserUploadFileHandler","uploadHandler","UploadHandler","getDataHandlerandStartingTrainingSet","uploadReturnObject","data_provider","trainingTable","training_data","training_table","trainingDataTable","getDataColumnsPaired","getTrainingLabels","initialTrainingData","row_object","totalFeatures","features","tempFeaturesToUse","filter","elem","includes","handleDownload","userDownloadClassifierSpecPromise","dataURL","idx","address","style","resize","src","logo","marginRight","height","color","marginLeft","container","justify","spacing","marginBottom","key","disabled","variant","aria-controls","aria-haspopup","onClick","event","currentTarget","keepMounted","open","Boolean","onClose","component","type","hidden","webkitdirectory","mozdirectory","msdirectory","odirectory","directory","multiple","onChange","sourceId","sourceIndex","targetIndex","targetId","result","move","swap","textAlign","backgroundColor","paddingLeft","className","boxesPerRow","rowHeight","backgroundImage","userSelect","paddingRight","margin"],"mappings":"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","file":"component---src-pages-index-js-fb8c91fba7e31b4e3c5a.js","sourcesContent":["import React from 'react';\nimport { Row, Col, Container} from \"reactstrap\";\nimport {Box, Button, Grid, IconButton, Menu, MenuItem}from '@material-ui/core'; \nimport logo from '../CPA_newlogo.png';\nimport {Image, Dropdown, DropdownButton} from 'react-bootstrap';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\n\nimport UploadHandler from '../classes/UploadHandler'\nimport {ClassifierManager} from '../classes/ClassifierManager'\nimport {ImageProvider} from '../classes/ImageProvider.js';\nimport UserUploadFileHandler from '../classes/UserUploadFileHandler'\nimport {Classifier} from '../classes/Classifier'\nimport {ImageGridManager}  from '../classes/imGridManager'\n\nimport {\n    GridContextProvider,\n    GridDropZone,\n    GridItem,\n    swap,\n    move\n  } from \"react-grid-dnd\";\n  \n  import \"../dndstyles.css\";\n\n\n\nfunction TestUI(){\n    \n    \n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const [dataProvider, setDataProvider] = React.useState(null)\n\n    // var classifierManager = null;\n    // const [classifierManager, setClassifierManager] = React.useState(null)\n    const [trainingObject, setTrainingObject] = React.useState(null)\n    const [userUploadFileHandler, setUserUploadFileHandler] = React.useState(null)\n    const [tileState, setTileState] = React.useState( constructTileState([]) );\n    const [imageGridManager, setImageGridManager] = React.useState(null)\n    const [lastFetchState, setLastFetchState] = React.useState(null)\n    const [featuresToUse, setFeaturesToUseState] = React.useState(null)\n\n    const [fetchButtonEnabled, setFetchButtonEnabled] = React.useState(false)\n    const [trainButtonEnabled, setTrainButtonEnabled] = React.useState(false)\n    const [evaluateButtonEnabled, setEvaluateButtonEnabled] = React.useState(false)\n    const [downloadButtonEnabled, setDownloadButtonEnabled] = React.useState(false)\n    const [uploadButtonEnabled, setUploadButtonEnabled] = React.useState(true)\n    const N = 20\n\n    const handleClickFetchDropDown = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleCloseFetchDropDown = (fetchType) => {\n        setAnchorEl(null);\n        if (fetchType !== undefined) {\n            handleFetch(fetchType)\n        }\n    };\n\n    const disableIterationButtons = () => {\n      setFetchButtonEnabled(false)\n      setTrainButtonEnabled(false)\n      setDownloadButtonEnabled(false)\n    }\n    const enableIterationButtons = () => {\n      setFetchButtonEnabled(true)\n      setTrainButtonEnabled(true)\n      setDownloadButtonEnabled(true)\n    }\n\n    const handleFetch = async (fetchType) => {\n\n      disableIterationButtons()\n        const emptyTileState = { unclassified: [], positive: [], negative: []}\n        setTileState(emptyTileState)\n        const classifierManager = new ClassifierManager(dataProvider, trainingObject)\n        await classifierManager.initTrainPromise()\n\n        setLastFetchState(fetchType)\n        console.log(\"fetch \" + fetchType)\n        const classedCellPairObjects = classifierManager.fetchUpToNCellPairsByClass(fetchType, N)\n        const imageProvider = new ImageProvider();\n        var dataURLPromiseArray = null;\n        if (fetchType === \"random\") {\n            const dataURLPromiseArray = classedCellPairObjects.map(CellPair => {\n                const channelFileNames = dataProvider.returnAllImgFileNames(CellPair.ImageNumber)\n                const channelFiles = channelFileNames.map(name => { //Alternatively, we could have this.dp.returnAllImgPromisesPerImg({'ImageNumber': 2}, fh)\n                    return userUploadFileHandler.findFile(name)       // and abstract from 8-17 or more\n                })\n                const promiseImages = channelFiles.map(file => {\n                    const promiseImage =  userUploadFileHandler.fileReaderPromiseImage(file)\n                    return promiseImage;    \n                })\n                return Promise.all(promiseImages)\n                    .then(images => {\n                        const coords = dataProvider.getCordsforCellDisplay(CellPair)\n                        return imageProvider.getDataURLPromise(images, coords);   //The only method of imageprovider. If cords is left blank, it will produce a whole image. Should be\n                    })                                                //static class or function\n            })\n            const dataURLs = await Promise.all(dataURLPromiseArray)\n            const newTileState = constructTileState(dataURLs)\n            setTileState(newTileState)\n            console.log(newTileState)\n            console.log(dataURLs)\n            setImageGridManager(new ImageGridManager(classedCellPairObjects, dataURLs))\n\n            \n            enableIterationButtons()\n            return\n        } \n\n        if (fetchType === \"positive\") {\n          dataURLPromiseArray = classedCellPairObjects.map(CellPair => {\n            const channelFileNames = dataProvider.returnAllImgFileNames(CellPair.ImageNumber)\n            const channelFiles = channelFileNames.map(name => { //Alternatively, we could have this.dp.returnAllImgPromisesPerImg({'ImageNumber': 2}, fh)\n                return userUploadFileHandler.findFile(name)       // and abstract from 8-17 or more\n            })\n            const promiseImages = channelFiles.map(file => {\n                const promiseImage =  userUploadFileHandler.fileReaderPromiseImage(file)\n                return promiseImage;    \n            })\n            return Promise.all(promiseImages)\n                .then(images => {\n                    const coords = dataProvider.getCordsforCellDisplay(CellPair)\n                    return imageProvider.getDataURLPromise(images, coords);   //The only method of imageprovider. If cords is left blank, it will produce a whole image. Should be\n                })                                                //static class or function\n        })\n        \n        const dataURLs = await Promise.all(dataURLPromiseArray)\n        const newTileState = constructTileState(dataURLs)\n        setTileState(newTileState)\n        console.log(newTileState)\n        console.log(dataURLs)\n        setImageGridManager(new ImageGridManager(classedCellPairObjects, dataURLs))\n        enableIterationButtons()\n        return\n      }\n\n      if (fetchType === 'negative') {\n        dataURLPromiseArray = classedCellPairObjects.map(CellPair => {\n          const channelFileNames = dataProvider.returnAllImgFileNames(CellPair.ImageNumber)\n          const channelFiles = channelFileNames.map(name => { //Alternatively, we could have this.dp.returnAllImgPromisesPerImg({'ImageNumber': 2}, fh)\n              return userUploadFileHandler.findFile(name)       // and abstract from 8-17 or more\n          })\n          const promiseImages = channelFiles.map(file => {\n              const promiseImage =  userUploadFileHandler.fileReaderPromiseImage(file)\n              return promiseImage;    \n          })\n          return Promise.all(promiseImages)\n              .then(images => {\n                  const coords = dataProvider.getCordsforCellDisplay(CellPair)\n                  return imageProvider.getDataURLPromise(images, coords);   //The only method of imageprovider. If cords is left blank, it will produce a whole image. Should be\n              })                                                //static class or function\n      })\n      \n      const dataURLs = await Promise.all(dataURLPromiseArray)\n      const newTileState = constructTileState(dataURLs)\n      setTileState(newTileState)\n      console.log(newTileState)\n      console.log(dataURLs)\n      setImageGridManager(new ImageGridManager(classedCellPairObjects, dataURLs))\n      enableIterationButtons()\n      return\n    }\n    \n  }\n\n  const handleTrain = async () => {\n\n    disableIterationButtons()\n\n      const negativeIDs = tileState.negative.map(item => item.id)\n      const positiveIDs = tileState.positive.map(item => item.id)\n      console.log(negativeIDs, tileState)\n      imageGridManager.setClassByIndexArray('negative', negativeIDs)\n      imageGridManager.setClassByIndexArray('positive', positiveIDs)\n\n      const negativeCellPairs = imageGridManager.getPairsByClass('negative')\n      const positiveCellPairs = imageGridManager.getPairsByClass('positive')\n \n      const negativeObjectDataRows = negativeCellPairs.map(cellPair => dataProvider.getRow('object_data', {ImageNumber: cellPair.ImageNumber, ObjectNumber: cellPair.ObjectNumber}))\n      const positiveObjectDataRows = positiveCellPairs.map(cellPair => dataProvider.getRow('object_data', {ImageNumber: cellPair.ImageNumber, ObjectNumber: cellPair.ObjectNumber}))\n      const trainingDataAddition = [...negativeObjectDataRows, ...positiveObjectDataRows]\n\n      const negativeLabels = new Array(negativeObjectDataRows.length).fill(0)\n      const positiveLabels = new Array(positiveObjectDataRows.length).fill(1)\n      const trainingLabelsAddition = negativeLabels.concat(positiveLabels)\n\n      const UpdatedTrainingObject = {\n        classifierType: \"LogisticRegression\",\n        trainingData: [...trainingDataAddition, ...trainingObject.trainingData],\n        trainingLabels: [...trainingLabelsAddition, ...trainingObject.trainingLabels],\n        featuresToUse: featuresToUse\n      }\n      console.log(UpdatedTrainingObject)\n      setTrainingObject(UpdatedTrainingObject)\n      // const newClassifierManager = new ClassifierManager(dataProvider, UpdatedTrainingObject)\n      \n      \n      // setClassifierManager(newClassifierManager)\n\n      const clearedTileState = { unclassified: tileState.unclassified, positive: [], negative: []}\n      setTileState(clearedTileState)\n      console.log(\"finished train\")\n      enableIterationButtons()\n    \n  }\n\n    const handleUpload = async (eventObject) => {\n        setUploadButtonEnabled(false)\n        const userUploadFileHandler = new UserUploadFileHandler(eventObject)\n        setUserUploadFileHandler(userUploadFileHandler)\n\n        const uploadHandler = new UploadHandler(eventObject)\n        const uploadReturnObject = await uploadHandler.getDataHandlerandStartingTrainingSet();\n\n        const dataProvider = uploadReturnObject.data_provider\n        setDataProvider(dataProvider)\n        const trainingTable = uploadReturnObject.training_data.training_table\n        const trainingDataTable = trainingTable.getDataColumnsPaired()\n\n        const trainingLabels = trainingTable.getTrainingLabels()\n        const initialTrainingData = trainingDataTable.map(row_object => {\n            const ObjectNumber = row_object['objectnum']\n            const ImageNumber = row_object['imagenum']\n            return dataProvider.getRow('object_data', {ObjectNumber, ImageNumber})\n        })\n        const totalFeatures = uploadReturnObject.training_data.features\n        const tempFeaturesToUse = totalFeatures.filter((elem)=>!elem.includes(\"Location\") && (elem !== \"ObjectNumber\") && (elem !== \"ImageNumber\"))\n        setFeaturesToUseState(tempFeaturesToUse)\n        console.log(\"finished data initialization\")\n        const initialTrainingObject = {\n            classifierType: \"LogisticRegression\",\n            trainingData: initialTrainingData,\n            trainingLabels: trainingLabels,\n            featuresToUse: tempFeaturesToUse\n        }\n        setTrainingObject(initialTrainingObject)\n        // console.log(\"starting initial training\")\n        // const newClassifierManager = new ClassifierManager(dataProvider, initialTrainingObject)\n        \n        // setClassifierManager(newClassifierManager)\n\n        setFetchButtonEnabled(true)\n        setTrainButtonEnabled(true)\n        setDownloadButtonEnabled(true)\n        \n        \n        console.log(\"finished upload\")\n    }\n\n    const handleDownload = async () => {\n      disableIterationButtons()\n      const classifierManager = new ClassifierManager(dataProvider, trainingObject)\n      await classifierManager.initTrainPromise()\n      classifierManager.userDownloadClassifierSpecPromise()\n      enableIterationButtons()\n    }\n\n    function constructTileState(dataURLs) {\n        return {\n            unclassified: dataURLs.map((dataURL, idx) => {return {id: idx, address: dataURL}}),  \n            positive: [],\n            negative: []\n        };\n    }\n\n    function onChange(sourceId, sourceIndex, targetIndex, targetId) {\n        if (targetId) {\n          const result = move(\n            tileState[sourceId],\n            tileState[targetId],\n            sourceIndex,\n            targetIndex\n          );\n          return setTileState({\n            ...tileState,\n            [sourceId]: result[0],\n            [targetId]: result[1]\n          });\n        }\n    \n        const result = swap(tileState[sourceId], sourceIndex, targetIndex);\n        return setTileState({\n          ...tileState,\n          [sourceId]: result\n        });\n      }\n    \n    return (\n        <div style={{resize: 'horizontal'}}>\n    \n        <Row>\n       \n        \n        <Col>\n        <Image src={logo} style={{marginRight:\"40%\", height:'90px'}}></Image>\n        </Col>\n\n        <Col >\n        <IconButton style={{color: \"black\", marginLeft:\"50%\"}}> <SaveAltIcon /></IconButton> \n        </Col>\n\n\n        </Row>\n        <Row>\n        \n        <Grid container justify=\"center\" spacing={2} style={{marginBottom: 15}}>\n       \n        <Grid key={0} item>\n        {/* <DropdownButton variant=\"secondary\" title= \"Fetch\">\n        \n         <Dropdown.Item >Positive</Dropdown.Item>\n         <Dropdown.Item >Negative</Dropdown.Item>\n         <Dropdown.Item >Random</Dropdown.Item>\n        \n        </DropdownButton> */}\n            <Button disabled={!fetchButtonEnabled} variant=\"contained\" aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClickFetchDropDown}>\n            Fetch\n            </Button>\n            <Menu\n            id=\"simple-menu\"\n            anchorEl={anchorEl}\n            keepMounted\n            open={Boolean(anchorEl)}\n            onClose={handleCloseFetchDropDown}\n            >\n            <MenuItem onClick={()=>handleCloseFetchDropDown(\"random\")}>Random</MenuItem>\n            <MenuItem onClick={()=>handleCloseFetchDropDown(\"positive\")}>Positive</MenuItem>\n            <MenuItem onClick={()=>handleCloseFetchDropDown(\"negative\")}>Negative</MenuItem>\n            </Menu>\n    </Grid>\n\n\n        <Grid key={1} item>\n        <Button disabled={!trainButtonEnabled} variant=\"contained\" onClick={handleTrain}>Train</Button>\n        </Grid>\n\n        <Grid key={2} item>\n        <Button disabled={!evaluateButtonEnabled} variant=\"contained\" onClick={()=>{}}>Evaluate</Button>\n        </Grid>\n        <Grid key={3} item>\n        <Button disabled={!downloadButtonEnabled} variant=\"contained\" onClick={handleDownload}>Download</Button>\n        </Grid>\n        <Grid key={4} item>\n        <Button disabled={!uploadButtonEnabled} variant=\"contained\" component=\"label\" onClick={()=>console.log(\"Upload!\")}> \n            Upload\n            <input  type=\"file\"\n                    hidden webkitdirectory=\"true\"\n                    mozdirectory=\"true\"\n                    msdirectory=\"true\"\n                    odirectory=\"true\"\n                    directory=\"true\"\n                    multiple\n                    onChange = {(eventObject)=>{handleUpload(eventObject)}}   \n            />\n        </Button>\n        </Grid>\n    </Grid>\n    </Row>\n\n    <GridContextProvider onChange={onChange}>\n        <div>\n        \n        <label style = {{textAlign:\"left\", backgroundColor: 'white', paddingLeft: \"10%\", marginBottom: 0.5} }>Unclassified</label>\n        \n        <div className=\"topContainer\">\n       \n        <GridDropZone\n             className=\"dropzone \"\n            id=\"unclassified\"\n            boxesPerRow={8}\n            rowHeight={70}\n          >\n             \n            {tileState.unclassified.map(item => (\n              <GridItem key={item.id}>\n                <div className=\"grid-item\" >\n                    <div className=\"grid-item-content\" style = {{backgroundImage:  `url(${item.address})`}} >\n                        \n                        </div> \n                </div>\n              </GridItem>\n            ))}\n          </GridDropZone>\n          </div>\n        \n        <Row>\n     \n          <label style = {{textAlign:\"left\", backgroundColor: 'white', paddingLeft: \"11%\", userSelect: \"none\", marginBottom:\"0.5%\"} }>Positive</label> \n    \n        \n          <label style = {{textAlign:\"left\", backgroundColor: 'white', paddingRight: \"8%\", marginBottom: 0, userSelect: \"none\", margin: \"auto\",  marginBottom:\"0.5%\"} }>Negative</label>\n       \n          </Row>\n         \n         <Row>\n\n          <GridDropZone\n            className=\"dropzone positive\"\n            id=\"positive\"\n            boxesPerRow={4}\n            rowHeight={70}\n          >\n            \n            {tileState.positive.map(item => (\n              <GridItem key={item.id}>\n                <div className=\"grid-item\"> \n                    <div className=\"grid-item-content\" style = {{backgroundImage: `url(${item.address})`}}>\n                         \n                        </div>  \n                </div>\n              </GridItem>\n            ))}\n          </GridDropZone>\n   \n      \n          <GridDropZone\n            className=\"dropzone negative\"\n            id=\"negative\"\n            boxesPerRow={4}\n            rowHeight={70}\n          >\n            {tileState.negative.map(item => (\n              <GridItem key={item.id}>\n                <div className=\"grid-item\">\n                <div className=\"grid-item-content\" style = {{backgroundImage: `url(${item.address})`}}>\n                        \n                        </div>      \n                </div>\n              </GridItem>\n            ))}\n          </GridDropZone>\n\n     \n      \n        </Row>\n        </div>\n      </GridContextProvider>\n \n    </div>\n\n    );\n}\n\n\n\n\n\nexport default TestUI; "],"sourceRoot":""}